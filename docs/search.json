[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pauline Robert’s website",
    "section": "",
    "text": "Hello, I’m Pauline Robert, a passionate Business Analytics Professional with a focus on Data Science and Marketing Strategy. Currently, I’m pursuing a Master’s in Business Analytics at the Zicklin School of Business, Baruch College, with a concentration in Data Science.\nI bring experience from Criteo, Roche Bobois, OCUS, and Showroom Lab, where I’ve worked in marketing coordination, client engagement, sales optimization, and campaign management. My academic background includes a BS in Business Administration from NC State University and a BS in International Business Management from NEOMA Business School.\n\n\n\nI specialize in:\n\nData Analytics & Strategy: Analyzing data to drive key business decisions and optimize marketing efforts.\nMarketing Campaigns: Planning and executing multi-channel marketing campaigns, with a strong focus on client acquisition and retention.\nBusiness Insights: Using tools like Python, SQL, Tableau, and Pandas to uncover trends and drive actionable insights.\nClient Engagement: Enhancing customer experiences by analyzing data and improving KPIs.\n\n\n\n\n\nPython, SQL, Pandas, Tableau\nBusiness Analytics, Data Science\nCampaign Management, Client Engagement\nFluent in French, Spanish, and English\n\n\n\n\n\n\nI’m always eager to connect with professionals and companies looking for data-driven marketing solutions. Whether it’s optimizing sales, streamlining marketing strategies, or discovering key business insights, I can help.\nReach out via LinkedIn or drop me an email at pauline.robert3@orange.fr. Let’s explore how we can collaborate!"
  },
  {
    "objectID": "index.html#what-i-do",
    "href": "index.html#what-i-do",
    "title": "Pauline Robert’s website",
    "section": "",
    "text": "I specialize in:\n\nData Analytics & Strategy: Analyzing data to drive key business decisions and optimize marketing efforts.\nMarketing Campaigns: Planning and executing multi-channel marketing campaigns, with a strong focus on client acquisition and retention.\nBusiness Insights: Using tools like Python, SQL, Tableau, and Pandas to uncover trends and drive actionable insights.\nClient Engagement: Enhancing customer experiences by analyzing data and improving KPIs.\n\n\n\n\n\nPython, SQL, Pandas, Tableau\nBusiness Analytics, Data Science\nCampaign Management, Client Engagement\nFluent in French, Spanish, and English"
  },
  {
    "objectID": "index.html#lets-work-together",
    "href": "index.html#lets-work-together",
    "title": "Pauline Robert’s website",
    "section": "",
    "text": "I’m always eager to connect with professionals and companies looking for data-driven marketing solutions. Whether it’s optimizing sales, streamlining marketing strategies, or discovering key business insights, I can help.\nReach out via LinkedIn or drop me an email at pauline.robert3@orange.fr. Let’s explore how we can collaborate!"
  },
  {
    "objectID": "index.html#reach-me",
    "href": "index.html#reach-me",
    "title": "Pauline Robert’s website",
    "section": "Reach Me",
    "text": "Reach Me\n\nEmail: pauline.robert3@orange.fr\nLinkedIn: Pauline Robert\nLocation: New York, NY"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini Project 1",
    "section": "",
    "text": "This mini project walks you through how to prepare, clean, and analyze data. The project will be followed by a report on the subject analyzed.\nWe are going to analyze the fiscal characteristics of major US public transit systems using data from the National Transit Database. The goal is to understand farebox recovery rates, analyze ridership, and examine the financial efficiency of various transit systems.\nWe will use data from the National Transit Database as our primary source. In particular, since we want to analyze farebox revenues, total number of trips, total number of vehicle miles traveled, and total revenues and expenses by source, we will need to analyze several different tables:\n\nThe 2022 Fare Revenue table\nThe latest Monthly Ridership tables\nThe 2022 Operating Expenses reports\n\nLet’s start by cleaning the data.\n\n\nThe following code will download, clean, and join the tables.\n\n# Load required libraries\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nif(!require(\"readxl\")) install.packages(\"readxl\")\n\nLoading required package: readxl\n\nif(!require(\"DT\")) install.packages(\"DT\")\n\nLoading required package: DT\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(DT)\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n    # directory.\n    download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                  destfile=\"2022_fare_revenue.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n    select(-`State/Parent NTD ID`, \n           -`Reporter Type`,\n           -`Reporting Module`,\n           -`TOS`,\n           -`Passenger Paid Fares`,\n           -`Organization Paid Fares`) |&gt;\n    filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n    select(-`Expense Type`) |&gt;\n    group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`\n             `Agency Name`,  # These are direct operated and sub-contracted \n             `Mode`) |&gt;      # of the same transit modality\n                             # Not a big effect in most munis (significant DO\n                             # tends to get rid of sub-contractors), but we'll sum\n                             # to unify different passenger experiences\n    summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n    ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency Name'. You can override\nusing the `.groups` argument.\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_expenses.csv\" in your project\n    # directory.\n    download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                  destfile=\"2022_expenses.csv\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n    select(`NTD ID`, \n           `Agency`,\n           `Total`, \n           `Mode`) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n    rename(Expenses = Total) |&gt;\n    group_by(`NTD ID`, `Mode`) |&gt;\n    summarize(Expenses = sum(Expenses)) |&gt;\n    ungroup()\n\nRows: 3744 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Agency, City, State, NTD ID, Organization Type, Reporter Type, UZA...\ndbl  (2): Report Year, UACE Code\nnum (10): Primary UZA Population, Agency VOMS, Mode VOMS, Vehicle Operations...\nlgl  (7): Vehicle Operations Questionable, Vehicle Maintenance Questionable,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n`summarise()` has grouped output by 'NTD ID'. You can override using the `.groups` argument.\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\nFinally, let’s extract monthly transit numbers:\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"ridership.xlsx\" in your project\n    # directory.\n    download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                  destfile=\"ridership.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n            filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n            select(-`Legacy NTD ID`, \n                   -`Reporter Type`, \n                   -`Mode/Type of Service Status`, \n                   -`UACE CD`, \n                   -`TOS`) |&gt;\n            pivot_longer(-c(`NTD ID`:`3 Mode`), \n                            names_to=\"month\", \n                            values_to=\"UPT\") |&gt;\n            drop_na() |&gt;\n            mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n            filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n            select(-`Legacy NTD ID`, \n                   -`Reporter Type`, \n                   -`Mode/Type of Service Status`, \n                   -`UACE CD`, \n                   -`TOS`) |&gt;\n            pivot_longer(-c(`NTD ID`:`3 Mode`), \n                            names_to=\"month\", \n                            values_to=\"VRM\") |&gt;\n            drop_na() |&gt;\n            group_by(`NTD ID`, `Agency`, `UZA Name`, \n                     `Mode`, `3 Mode`, month) |&gt;\n            summarize(VRM = sum(VRM)) |&gt;\n            ungroup() |&gt;\n            mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name', 'Mode', '3\nMode'. You can override using the `.groups` argument.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`))\n\nJoining with `by = join_by(`NTD ID`, Agency, `UZA Name`, Mode, `3 Mode`,\nmonth)`\n\n\nThis creates a table as follows:\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()\n\n\n\n\n\n\n\nThe following code will rename the column ‘UZA Name’ to ‘metro_area’. Because it has no spaces in it, this name will be easier to manipulate in code.\n\nUSAGE &lt;- USAGE |&gt;\n  rename(metro_area = `UZA Name`)\n\n\n\n\nThe ‘Mode’ column is also helpful, but it uses a set of codes that aren’t interpretable. To make life easier for ourselves, let’s use a case_when statement to transform this into something we can make sense of.\nFirst, let’s find the unique ‘Mode’ codes in our data using the distinct function. After examining the NTD website and finding the interpretations of these codes, we can complete the following snippet to recode the ‘Mode’ column.\n\n# Find unique Mode codes in the USAGE table\ndistinct(USAGE, Mode)\n\n# A tibble: 18 × 1\n   Mode \n   &lt;chr&gt;\n 1 DR   \n 2 FB   \n 3 MB   \n 4 SR   \n 5 TB   \n 6 VP   \n 7 CB   \n 8 RB   \n 9 LR   \n10 YR   \n11 MG   \n12 CR   \n13 AR   \n14 TR   \n15 HR   \n16 IP   \n17 PB   \n18 CC   \n\n\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",       # HR: Heavy Rail\n    Mode == \"LR\" ~ \"Light Rail\",        # LR: Light Rail\n    Mode == \"MB\" ~ \"Bus\",               # MB: Bus (Motor Bus)\n    Mode == \"CR\" ~ \"Commuter Rail\",     # CR: Commuter Rail\n    Mode == \"DR\" ~ \"Demand Response\",   # DR: Demand Response\n    Mode == \"VP\" ~ \"Vanpool\",           # VP: Vanpool\n    Mode == \"AR\" ~ \"Alaska Railroad\",   # AR: Alaska Railroad\n    Mode == \"RB\" ~ \"Bus Rapid Transit\", # RB: Bus Rapid Transit\n    Mode == \"FB\" ~ \"Ferryboat\",       # FB: Ferryboat\n    Mode == \"SR\" ~ \"Streetcar Rail\",       # SR: Streetcar Rail\n    Mode == \"TB\" ~ \"Trolleybus\",       # TB: Trolleybus\n    Mode == \"CB\" ~ \"Commuter Bus\",       # CB: Commuter Bus\n    Mode == \"YR\" ~ \"Hybrid Rail\",       # YR: Hybrid Rail\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",  # MG: Monorail and Automated Guideway modes\n    Mode == \"TR\" ~ \"Aerial Tramway\",       # TR: Aerial Tramway\n    Mode == \"IP\" ~ \"Inclined Plane\",       # IP: Inclined Plane\n    Mode == \"PB\" ~ \"Publico\",       # PB: Publico\n    Mode == \"CC\" ~ \"Cable Car\",       # CC: Cable Car\n    TRUE ~ \"Unknown\"                    # Any other mode\n  ))\n\nNow that the data is clean, we can create an attractive summary table of the cleaned up USAGE table using the following snippet:\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()\n\n\n\n\n\n\n\n\n\nNow let’s analyse our data.\n\n\nUsing functions filter, group_by, summarize, arrange, we are going to answer the following questions for our analysis with the following codes:\n\nWhat transit agency had the most total VRM in our data set?\n\n\n# Transit agency with the most total VRM\nagency_most_vrm &lt;- USAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1)  # Get the top agency\n\nprint(agency_most_vrm)\n\n# A tibble: 1 × 2\n  Agency                      total_VRM\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 MTA New York City Transit 10832855350\n\n\nThe transit agency that had the most total VRM in our data set is the MTA New York City Transit, which reported a total of 10,832,855,350 VRM.\n\nWhat transit mode had the most total VRM in our data set?\n\n\n# Transit mode with the most total VRM\nmode_most_vrm &lt;- USAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1)  # Get the top mode\n\nprint(mode_most_vrm)\n\n# A tibble: 1 × 2\n  Mode    total_VRM\n  &lt;chr&gt;       &lt;dbl&gt;\n1 Bus   49444494088\n\n\nThe transit mode that had the most total VRM in our data set is the Bus with a total of 49,444,494,088 VRM.\n\nHow many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n\n\n# Filter for Heavy Rail in NYC for May 2024\nNYC_Subway_trip_may_24 &lt;- USAGE %&gt;%\n  mutate(month = format(ymd(month), \"%Y-%m\")) %&gt;% \n  filter(Mode == \"Heavy Rail\", \n         Agency == \"MTA New York City Transit\",  \n         month == \"2024-05\") %&gt;%  \n  summarize(total_trip = sum(UPT, na.rm = TRUE)) \n\nNYC_Subway_trip_may_24\n\n# A tibble: 1 × 1\n  total_trip\n       &lt;dbl&gt;\n1  180458819\n\n\nIn May 2024, 180,458,819 trips were taken on the NYC Subway (Heavy Rail).\n\nHow much did NYC subway ridership fall between April 2019 and April 2020?\n\n\nnyc_ridership_2019 &lt;- USAGE |&gt;\n  filter(metro_area == \"New York--Jersey City--Newark, NY--NJ\", Mode == \"Heavy Rail\", month == \"2019-04-01\") |&gt;\n  summarise(nyc_sub_2019 = sum(UPT, na.rm = TRUE))\nnyc_ridership_2020&lt;- USAGE |&gt;\n  filter(metro_area == \"New York--Jersey City--Newark, NY--NJ\", Mode == \"Heavy Rail\", month == \"2020-04-01\") |&gt;\n  summarise(nyc_subway_ridership_fall= sum(UPT, na.rm = TRUE))\nnyc_ridership=((nyc_ridership_2020-nyc_ridership_2019)/(nyc_ridership_2019))*100\nnyc_ridership_2019\n\n# A tibble: 1 × 1\n  nyc_sub_2019\n         &lt;dbl&gt;\n1    240655437\n\nnyc_ridership_2020\n\n# A tibble: 1 × 1\n  nyc_subway_ridership_fall\n                      &lt;dbl&gt;\n1                  20704824\n\nnyc_ridership\n\n  nyc_subway_ridership_fall\n1                 -91.39649\n\n\nHere our results show us that the NYC Subway ridership went from 240,655,437 in April 2019 to 20,704,824 in April 2020.Our last piece of the code informs us that this represent a 91% ridership fall between April 2019 and April 2020.\n\n\n\n\n\n\nCreate a new table from USAGE that has annual total (sum) UPT and VRM for 2022. This will require use of the group_by, summarize, and filter functions. You will also want to use the year function, to extract a year from the month column.\nThe resulting table should have the following columns:\nNTD ID Agency metro_area Mode UPT VRM Make sure to ungroup your table after creating it.\nWe will name this table USAGE_2022_ANNUAL.\n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;\n  group_by(`NTD ID`, Agency, `metro_area`, Mode) |&gt;\n  summarize(\n    UPT = sum(UPT, na.rm = TRUE),\n    VRM = sum(VRM, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'metro_area'. You can\noverride using the `.groups` argument.\n\nUSAGE_2022_ANNUAL\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                metro_area Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows\n\n\nOnce we have created this new table, we can merge it to the FINANCIALS data but first we need to make sure they have the same “mode” refrence names with the following code:\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",       # HR: Heavy Rail\n    Mode == \"LR\" ~ \"Light Rail\",        # LR: Light Rail\n    Mode == \"MB\" ~ \"Bus\",               # MB: Bus (Motor Bus)\n    Mode == \"CR\" ~ \"Commuter Rail\",     # CR: Commuter Rail\n    Mode == \"DR\" ~ \"Demand Response\",   # DR: Demand Response\n    Mode == \"VP\" ~ \"Vanpool\",           # VP: Vanpool\n    Mode == \"AR\" ~ \"Alaska Railroad\",   # AR: Alaska Railroad\n    Mode == \"RB\" ~ \"Bus Rapid Transit\", # RB: Bus Rapid Transit\n    Mode == \"FB\" ~ \"Ferryboat\",       # FB: Ferryboat\n    Mode == \"SR\" ~ \"Streetcar Rail\",       # SR: Streetcar Rail\n    Mode == \"TB\" ~ \"Trolleybus\",       # TB: Trolleybus\n    Mode == \"CB\" ~ \"Commuter Bus\",       # CB: Commuter Bus\n    Mode == \"YR\" ~ \"Hybrid Rail\",       # YR: Hybrid Rail\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",  # MG: Monorail and Automated Guideway modes\n    Mode == \"TR\" ~ \"Aerial Tramway\",       # TR: Aerial Tramway\n    Mode == \"IP\" ~ \"Inclined Plane\",       # IP: Inclined Plane\n    Mode == \"PB\" ~ \"Publico\",       # PB: Publico\n    Mode == \"CC\" ~ \"Cable Car\",       # CC: Cable Car\n    TRUE ~ \"Unknown\"                    # Any other mode\n  ))\n\nOnce we have made sure that USAGE_2022_ANNUAL and FINANCIALS have the same value for “mode”, we can merge USAGE_2022_ANNUAL to the FINANCIALS data as follows:\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, \n           FINANCIALS, \n           join_by(`NTD ID`, Mode)) |&gt;\n    drop_na()\nUSAGE_AND_FINANCIALS |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nUsing the USAGE_AND_FINANCIALS table, we are going to try to answer the following questions:\n\nWhich transit system (agency and mode) had the most UPT in 2022?\nWhich transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of - Total Fares to Expenses?\nWhich transit system (agency and mode) has the lowest expenses per UPT?\nWhich transit system (agency and mode) has the highest total fares per UPT?\nWhich transit system (agency and mode) has the lowest expenses per VRM?\nWhich transit system (agency and mode) has the highest total fares per VRM?\n\nWe will restrict our answers to major transit systems by defining them as those with 400,000 UPT per annum.\nTo answer these questions, we’ll need to perform the following steps using the USAGE_AND_FINANCIALS table:\n\nWhich transit system (agency and mode) had the most UPT in 2022?\n\n\n# Find the transit system with the most UPT in 2022\nlibrary(dplyr)\nlibrary(knitr)\nmax_upt &lt;- USAGE_AND_FINANCIALS %&gt;%\n  filter(UPT &gt;= 400000) %&gt;%\n  arrange(desc(UPT)) %&gt;%\n  slice(1) %&gt;%\n  select(Agency, Mode, UPT)\nkable(max_upt, caption = \"Transit System with Most UPT in 2022\")\n\n\nTransit System with Most UPT in 2022\n\n\nAgency\nMode\nUPT\n\n\n\n\nMTA New York City Transit\nHeavy Rail\n1793073801\n\n\n\n\n\nThe answer shows us that the MTA New York City Transit is the transit system that had the most UTP with more than 1.79 billion of trips.\n\nWhich transit system (agency and mode) had the highest farebox recovery (Total Fares to Expenses ratio)?\n\n\nUSAGE_AND_FINANCIALS |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares = sum(`Total Fares`, na.rm = TRUE),\n    total_expenses = sum(Expenses, na.rm = TRUE)\n  ) |&gt;\n  mutate(farebox_recovery_ratio = total_fares / total_expenses) |&gt;\n  ungroup() |&gt;\n  arrange(desc(farebox_recovery_ratio)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                 Mode  total_fares total_expenses farebox_recovery_ratio\n  &lt;chr&gt;                  &lt;chr&gt;       &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n1 Transit Authority of … Vanp…       97300          40801                   2.38\n\n\nThe Transit System with the highest recovery ratio is the Transit Authority of Central Kentuchy, with the Vanpool mode and a recovery ratio of $2.38 USD.\n3.Which transit system (agency and mode) has the lowest expenses per UPT?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_expenses = sum(Expenses, na.rm = TRUE),\n    total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  filter(total_UPT &gt;= 400000) |&gt;\n    mutate (expenses_per_UPT = total_expenses/total_UPT)|&gt;\n  ungroup() |&gt;\n  arrange(expenses_per_UPT) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                         Mode  total_expenses total_UPT expenses_per_UPT\n  &lt;chr&gt;                          &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;            &lt;dbl&gt;\n1 North Carolina State Universi… Bus          2727412   2313091             1.18\n\n\nNorth Carolina State University is the agency with the lowest expenses per UPT with the Bus mode. The expenses per UPT is $1.18 USD.\n4.Which transit system (agency and mode) has the highest total fares per UPT?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares1 = sum(`Total Fares`, na.rm = TRUE),\n    total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  \n  mutate (total_fares_per_UPT = total_fares1/total_UPT)|&gt;\n  ungroup() |&gt;\n  arrange(desc(total_fares_per_UPT)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                Mode          total_fares1 total_UPT total_fares_per_UPT\n  &lt;chr&gt;                 &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;               &lt;dbl&gt;\n1 Altoona Metro Transit Demand Respo…        17163        26                660.\n\n\nThe Altoona Metro Transit with the Demand Response mode had the highest total fares per UPT. With just 26 trips, it collected a total in fares of $17,058 USD with a fare of $660 USD per UPT.\n5.Which transit system (agency and mode) has the lowest expenses per VRM?\n\nlowest_expenses_per_vrm &lt;- USAGE_AND_FINANCIALS %&gt;%\n  filter(UPT &gt;= 400000) %&gt;%\n  mutate(expenses_per_vrm = Expenses / VRM) %&gt;%\n  arrange(expenses_per_vrm) %&gt;%\n  slice(1) %&gt;%\n  select(Agency, Mode, expenses_per_vrm)\n\nkable(lowest_expenses_per_vrm, caption = \"Transit System with Lowest Expenses per VRM in 2022\")\n\n\nTransit System with Lowest Expenses per VRM in 2022\n\n\nAgency\nMode\nexpenses_per_vrm\n\n\n\n\nMetropolitan Transportation Commission\nVanpool\n0.4449998\n\n\n\n\n\nNew Mexico Department of Transportation Vanpool mode has the lowest expense per VRM. Its fare per VRM is around 0.45.\n6.Which transit system (agency and mode) has the highest total fares per VRM?\n\nhighest_fares_per_VRM &lt;- USAGE_AND_FINANCIALS %&gt;%\n  mutate(fares_per_VRM = `Total Fares` / VRM)  %&gt;%  \n  arrange(desc(fares_per_VRM)) %&gt;%  \n  slice_max(fares_per_VRM, n = 1) \n\nkable(highest_fares_per_VRM, caption = \"Transit System with Highest Fares per VRM in 2022\")\n\n\nTransit System with Highest Fares per VRM in 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNTD ID\nAgency\nmetro_area\nMode\nUPT\nVRM\nAgency Name\nTotal Fares\nExpenses\nfares_per_VRM\n\n\n\n\n50521\nChicago Water Taxi (Wendella)\nChicago, IL–IN\nFerryboat\n16936\n600\nChicago Water Taxi (Wendella)\n142473\n211296\n237.455\n\n\n\n\n\nThe transit system that has the highest total fares per VRM is the Ferryboat from Chicago Water Taxi (Wendella) with a total fare per VRM of $237 USD."
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "test",
    "section": "",
    "text": "install.packages(“tidyverse”)\n\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n    # directory.\n    download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                  destfile=\"2022_fare_revenue.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n    select(-`State/Parent NTD ID`, \n           -`Reporter Type`,\n           -`Reporting Module`,\n           -`TOS`,\n           -`Passenger Paid Fares`,\n           -`Organization Paid Fares`) |&gt;\n    filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n    select(-`Expense Type`)\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_expenses.csv\" in your project\n    # directory.\n    download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                  destfile=\"2022_expenses.csv\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n    select(`NTD ID`, \n           `Agency`,\n           `Total`, \n           `Mode`) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n    rename(Expenses = Total) |&gt;\n    group_by(`NTD ID`, `Mode`) |&gt;\n    summarize(Expenses = sum(Expenses)) |&gt;\n    ungroup()\n\nRows: 3744 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Agency, City, State, NTD ID, Organization Type, Reporter Type, UZA...\ndbl  (2): Report Year, UACE Code\nnum (10): Primary UZA Population, Agency VOMS, Mode VOMS, Vehicle Operations...\nlgl  (7): Vehicle Operations Questionable, Vehicle Maintenance Questionable,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n`summarise()` has grouped output by 'NTD ID'. You can override using the `.groups` argument.\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"ridership.xlsx\" in your project\n    # directory.\n    download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                  destfile=\"ridership.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n            filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n            select(-`Legacy NTD ID`, \n                   -`Reporter Type`, \n                   -`Mode/Type of Service Status`, \n                   -`UACE CD`, \n                   -`TOS`) |&gt;\n            pivot_longer(-c(`NTD ID`:`3 Mode`), \n                            names_to=\"month\", \n                            values_to=\"UPT\") |&gt;\n            drop_na() |&gt;\n            mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n            filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n            select(-`Legacy NTD ID`, \n                   -`Reporter Type`, \n                   -`Mode/Type of Service Status`, \n                   -`UACE CD`, \n                   -`TOS`) |&gt;\n            pivot_longer(-c(`NTD ID`:`3 Mode`), \n                            names_to=\"month\", \n                            values_to=\"VRM\") |&gt;\n            drop_na() |&gt;\n            group_by(`NTD ID`, `Agency`, `UZA Name`, \n                     `Mode`, `3 Mode`, month) |&gt;\n            summarize(VRM = sum(VRM)) |&gt;\n            ungroup() |&gt;\n            mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name', 'Mode', '3\nMode'. You can override using the `.groups` argument.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`))\n\nJoining with `by = join_by(`NTD ID`, Agency, `UZA Name`, Mode, `3 Mode`,\nmonth)`\n\n\n\nif(!require(\"DT\")) install.packages(\"DT\")\n\nLoading required package: DT\n\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()\n\n\n\n\n\n\n# Rename the column 'UZA Name' to 'metro_area'\nUSAGE &lt;- USAGE |&gt; \n  rename(metro_area = `UZA Name`)\n\n\n# Find unique values in the Mode column\ndistinct(USAGE, Mode)\n\n# A tibble: 18 × 1\n   Mode \n   &lt;chr&gt;\n 1 DR   \n 2 FB   \n 3 MB   \n 4 SR   \n 5 TB   \n 6 VP   \n 7 CB   \n 8 RB   \n 9 LR   \n10 YR   \n11 MG   \n12 CR   \n13 AR   \n14 TR   \n15 HR   \n16 IP   \n17 PB   \n18 CC   \n\n# Now use case_when to recode the Mode column\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"AR\" ~ \"Automated Guideway\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    TRUE ~ \"Unknown\"\n  ))\n\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Get in Touch\nIf you would like to reach me, feel free to contact me through the following methods:\n\nEmail: pauline.robert3@orange.fr\nLinkedIn: Pauline Robert LinkedIn"
  },
  {
    "objectID": "mp01.html#this-report-analyzes-the-fiscal-characteristics-of-major-us-public-transit-systems-using-data-from-the-national-transit-database.-the-goal-is-to-understand-farebox-recovery-rates-analyze-ridership-and-examine-the-financial-efficiency-of-various-transit-systems.",
    "href": "mp01.html#this-report-analyzes-the-fiscal-characteristics-of-major-us-public-transit-systems-using-data-from-the-national-transit-database.-the-goal-is-to-understand-farebox-recovery-rates-analyze-ridership-and-examine-the-financial-efficiency-of-various-transit-systems.",
    "title": "Mini Project 1",
    "section": "",
    "text": "# Load required libraries\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nif(!require(\"readxl\")) install.packages(\"readxl\")\n\nLoading required package: readxl\n\nif(!require(\"DT\")) install.packages(\"DT\")\n\nLoading required package: DT\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(DT)\n\n# Load Fare Revenue Data\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n    download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                  destfile=\"2022_fare_revenue.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nFARES &lt;- read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n    select(-`State/Parent NTD ID`, -`Reporter Type`, -`Reporting Module`, -`TOS`,\n           -`Passenger Paid Fares`, -`Organization Paid Fares`) |&gt;\n    filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n    select(-`Expense Type`)\n\n# Load Expenses Data\nif(!file.exists(\"2022_expenses.csv\")){\n    download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                  destfile=\"2022_expenses.csv\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nEXPENSES &lt;- read_csv(\"2022_expenses.csv\") |&gt;\n    select(`NTD ID`, `Agency`, `Total`, `Mode`) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n    rename(Expenses = Total) |&gt;\n    group_by(`NTD ID`, `Mode`) |&gt;\n    summarize(Expenses = sum(Expenses)) |&gt;\n    ungroup()\n\nRows: 3744 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Agency, City, State, NTD ID, Organization Type, Reporter Type, UZA...\ndbl  (2): Report Year, UACE Code\nnum (10): Primary UZA Population, Agency VOMS, Mode VOMS, Vehicle Operations...\nlgl  (7): Vehicle Operations Questionable, Vehicle Maintenance Questionable,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n`summarise()` has grouped output by 'NTD ID'. You can override using the `.groups` argument.\n\n# Join Fares and Expenses\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, by = c(\"NTD ID\", \"Mode\"))\n\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"ridership.xlsx\" in your project\n    # directory.\n    download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                  destfile=\"ridership.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n            filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n            select(-`Legacy NTD ID`, \n                   -`Reporter Type`, \n                   -`Mode/Type of Service Status`, \n                   -`UACE CD`, \n                   -`TOS`) |&gt;\n            pivot_longer(-c(`NTD ID`:`3 Mode`), \n                            names_to=\"month\", \n                            values_to=\"UPT\") |&gt;\n            drop_na() |&gt;\n            mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n            filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n            select(-`Legacy NTD ID`, \n                   -`Reporter Type`, \n                   -`Mode/Type of Service Status`, \n                   -`UACE CD`, \n                   -`TOS`) |&gt;\n            pivot_longer(-c(`NTD ID`:`3 Mode`), \n                            names_to=\"month\", \n                            values_to=\"VRM\") |&gt;\n            drop_na() |&gt;\n            group_by(`NTD ID`, `Agency`, `UZA Name`, \n                     `Mode`, `3 Mode`, month) |&gt;\n            summarize(VRM = sum(VRM)) |&gt;\n            ungroup() |&gt;\n            mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name', 'Mode', '3\nMode'. You can override using the `.groups` argument.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`))\n\nJoining with `by = join_by(`NTD ID`, Agency, `UZA Name`, Mode, `3 Mode`,\nmonth)`\n\n\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()\n\n\n\n\n\n\nUSAGE &lt;- USAGE |&gt;\n  rename(metro_area = `UZA Name`)\n\n\n# Find unique Mode codes in the USAGE table\ndistinct(USAGE, Mode)\n\n# A tibble: 18 × 1\n   Mode \n   &lt;chr&gt;\n 1 DR   \n 2 FB   \n 3 MB   \n 4 SR   \n 5 TB   \n 6 VP   \n 7 CB   \n 8 RB   \n 9 LR   \n10 YR   \n11 MG   \n12 CR   \n13 AR   \n14 TR   \n15 HR   \n16 IP   \n17 PB   \n18 CC   \n\n\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",       # HR: Heavy Rail\n    Mode == \"LR\" ~ \"Light Rail\",        # LR: Light Rail\n    Mode == \"MB\" ~ \"Bus\",               # MB: Bus (Motor Bus)\n    Mode == \"CR\" ~ \"Commuter Rail\",     # CR: Commuter Rail\n    Mode == \"DR\" ~ \"Demand Response\",   # DR: Demand Response\n    Mode == \"VP\" ~ \"Vanpool\",           # VP: Vanpool\n    Mode == \"AR\" ~ \"Alaska Railroad\",   # AR: Alaska Railroad\n    Mode == \"RB\" ~ \"Bus Rapid Transit\", # RB: Bus Rapid Transit\n    Mode == \"FB\" ~ \"Ferryboat\",       # FB: Ferryboat\n    Mode == \"SR\" ~ \"Streetcar Rail\",       # SR: Streetcar Rail\n    Mode == \"TB\" ~ \"Trolleybus\",       # TB: Trolleybus\n    Mode == \"CB\" ~ \"Commuter Bus\",       # CB: Commuter Bus\n    Mode == \"YR\" ~ \"Hybrid Rail\",       # YR: Hybrid Rail\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",  # MG: Monorail and Automated Guideway modes\n    Mode == \"TR\" ~ \"Aerial Tramway\",       # TR: Aerial Tramway\n    Mode == \"IP\" ~ \"Inclined Plane\",       # IP: Inclined Plane\n    Mode == \"PB\" ~ \"Publico\",       # PB: Publico\n    Mode == \"CC\" ~ \"Cable Car\",       # CC: Cable Car\n    TRUE ~ \"Unknown\"                    # Any other mode\n  ))\n\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()\n\n\n\n\n\n\n# Clean the USAGE table by unselecting columns and renaming others\nUSAGE_CLEAN &lt;- USAGE |&gt;\n  select(-`NTD ID`, -`3 Mode`, \n         UPT = `UPT`,    # Renaming UPT to a more descriptive name (if desired)\n         VRM = `VRM`,    # Renaming VRM to a more descriptive name (if desired)\n         metro_area,     # Keep the renamed metro_area\n         Agency,         # Keep Agency\n         Mode,           # Keep Mode\n         month)          # Keep month\nprint(USAGE_CLEAN)\n\n# A tibble: 281,010 × 6\n   Agency      metro_area          Mode            month         UPT    VRM\n   &lt;chr&gt;       &lt;chr&gt;               &lt;chr&gt;           &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n 1 King County Seattle--Tacoma, WA Demand Response 2002-01-01 135144 746158\n 2 King County Seattle--Tacoma, WA Demand Response 2002-02-01 127378 656324\n 3 King County Seattle--Tacoma, WA Demand Response 2002-03-01 136030 726578\n 4 King County Seattle--Tacoma, WA Demand Response 2002-04-01 142204 736975\n 5 King County Seattle--Tacoma, WA Demand Response 2002-05-01 144697 746158\n 6 King County Seattle--Tacoma, WA Demand Response 2002-06-01 131833 696633\n 7 King County Seattle--Tacoma, WA Demand Response 2002-07-01 137547 746158\n 8 King County Seattle--Tacoma, WA Demand Response 2002-08-01 136915 747339\n 9 King County Seattle--Tacoma, WA Demand Response 2002-09-01 132111 695451\n10 King County Seattle--Tacoma, WA Demand Response 2002-10-01 150074 766920\n# ℹ 281,000 more rows\n\n\n\n# Transit agency with the most total VRM\nagency_most_vrm &lt;- USAGE_CLEAN |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1)  # Get the top agency\n\nprint(agency_most_vrm)\n\n# A tibble: 1 × 2\n  Agency                      total_VRM\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 MTA New York City Transit 10832855350\n\n\n\n# Transit mode with the most total VRM\nmode_most_vrm &lt;- USAGE_CLEAN |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1)  # Get the top mode\n\nprint(mode_most_vrm)\n\n# A tibble: 1 × 2\n  Mode    total_VRM\n  &lt;chr&gt;       &lt;dbl&gt;\n1 Bus   49444494088\n\n\n\n# Trips taken on the NYC Subway (Heavy Rail) in May 2024\nnyc_subway_trips_may_2024 &lt;- USAGE_CLEAN |&gt;\n  filter(Mode == \"Heavy Rail\", month == \"2024-05-01\") |&gt;\n  summarize(total_trips = sum(UPT, na.rm = TRUE))\n\nprint(nyc_subway_trips_may_2024)\n\n# A tibble: 1 × 1\n  total_trips\n        &lt;dbl&gt;\n1   237383777\n\n\n\n# Mode of transport with the longest average trip in May 2024\nlongest_avg_trip &lt;- USAGE_CLEAN |&gt;\n  filter(month == \"2024-05-01\") |&gt;\n  group_by(Mode) |&gt;\n  summarize(avg_trip_length = mean(VRM / UPT, na.rm = TRUE)) |&gt;\n  arrange(desc(avg_trip_length)) |&gt;\n  slice(1)  # Get the mode with the longest average trip\n\nprint(longest_avg_trip)\n\n# A tibble: 1 × 2\n  Mode  avg_trip_length\n  &lt;chr&gt;           &lt;dbl&gt;\n1 Bus               Inf\n\n\n\n# Ridership fall for NYC Subway between April 2019 and April 2020\nnyc_subway_ridership_fall &lt;- USAGE_CLEAN |&gt;\n  filter(Mode == \"Heavy Rail\", month %in% c(\"2019-04-01\", \"2020-04-01\")) |&gt;\n  group_by(month) |&gt;\n  summarize(total_ridership = sum(UPT, na.rm = TRUE))\n\n# Calculate the fall in ridership\nridership_fall_amount &lt;- nyc_subway_ridership_fall$total_ridership[2] - nyc_subway_ridership_fall$total_ridership[1]\n\nprint(ridership_fall_amount)\n\n[1] -296416858\n\n\n\nlibrary(dplyr)\nlibrary(lubridate)\n\n# Create the USAGE_2022_ANNUAL table\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;  # Filter for the year 2022\n  group_by(`NTD ID`, Agency, metro_area, Mode) |&gt;  # Group by specified columns\n  summarize(\n    UPT = sum(UPT, na.rm = TRUE),  # Calculate total UPT\n    VRM = sum(VRM, na.rm = TRUE)   # Calculate total VRM\n  ) |&gt; \n  ungroup()  # Ungroup the table\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'metro_area'. You can\noverride using the `.groups` argument.\n\n# Print the resulting table\nprint(USAGE_2022_ANNUAL)\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                metro_area Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows"
  },
  {
    "objectID": "mp01.html#introduction",
    "href": "mp01.html#introduction",
    "title": "Mini Project 1",
    "section": "",
    "text": "This report analyzes the fiscal characteristics of major US public transit systems using data from the National Transit Database. The goal is to understand farebox recovery rates, analyze ridership, and examine the financial efficiency of various transit systems.\nWe will use data from the National Transit Database as our primary source. In particular, since we want to analyze farebox revenues, total number of trips, total number of vehicle miles traveled, and total revenues and expenses by source, we will need to analyze several different tables:\n\nThe 2022 Fare Revenue table\nThe latest Monthly Ridership tables\nThe 2022 Operating Expenses reports\n\nLet’s start by cleaning the data."
  },
  {
    "objectID": "mp01.html#data-preparation",
    "href": "mp01.html#data-preparation",
    "title": "Mini Project 1",
    "section": "",
    "text": "The following code will download, clean, and join the tables.\n\n# Load required libraries\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nif(!require(\"readxl\")) install.packages(\"readxl\")\n\nLoading required package: readxl\n\nif(!require(\"DT\")) install.packages(\"DT\")\n\nLoading required package: DT\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(DT)\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n    # directory.\n    download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                  destfile=\"2022_fare_revenue.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n    select(-`State/Parent NTD ID`, \n           -`Reporter Type`,\n           -`Reporting Module`,\n           -`TOS`,\n           -`Passenger Paid Fares`,\n           -`Organization Paid Fares`) |&gt;\n    filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n    select(-`Expense Type`) |&gt;\n    group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`\n             `Agency Name`,  # These are direct operated and sub-contracted \n             `Mode`) |&gt;      # of the same transit modality\n                             # Not a big effect in most munis (significant DO\n                             # tends to get rid of sub-contractors), but we'll sum\n                             # to unify different passenger experiences\n    summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n    ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency Name'. You can override\nusing the `.groups` argument.\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_expenses.csv\" in your project\n    # directory.\n    download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                  destfile=\"2022_expenses.csv\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n    select(`NTD ID`, \n           `Agency`,\n           `Total`, \n           `Mode`) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n    rename(Expenses = Total) |&gt;\n    group_by(`NTD ID`, `Mode`) |&gt;\n    summarize(Expenses = sum(Expenses)) |&gt;\n    ungroup()\n\nRows: 3744 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Agency, City, State, NTD ID, Organization Type, Reporter Type, UZA...\ndbl  (2): Report Year, UACE Code\nnum (10): Primary UZA Population, Agency VOMS, Mode VOMS, Vehicle Operations...\nlgl  (7): Vehicle Operations Questionable, Vehicle Maintenance Questionable,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n`summarise()` has grouped output by 'NTD ID'. You can override using the `.groups` argument.\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\nFinally, let’s extract monthly transit numbers:\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"ridership.xlsx\" in your project\n    # directory.\n    download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                  destfile=\"ridership.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n            filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n            select(-`Legacy NTD ID`, \n                   -`Reporter Type`, \n                   -`Mode/Type of Service Status`, \n                   -`UACE CD`, \n                   -`TOS`) |&gt;\n            pivot_longer(-c(`NTD ID`:`3 Mode`), \n                            names_to=\"month\", \n                            values_to=\"UPT\") |&gt;\n            drop_na() |&gt;\n            mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n            filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n            select(-`Legacy NTD ID`, \n                   -`Reporter Type`, \n                   -`Mode/Type of Service Status`, \n                   -`UACE CD`, \n                   -`TOS`) |&gt;\n            pivot_longer(-c(`NTD ID`:`3 Mode`), \n                            names_to=\"month\", \n                            values_to=\"VRM\") |&gt;\n            drop_na() |&gt;\n            group_by(`NTD ID`, `Agency`, `UZA Name`, \n                     `Mode`, `3 Mode`, month) |&gt;\n            summarize(VRM = sum(VRM)) |&gt;\n            ungroup() |&gt;\n            mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name', 'Mode', '3\nMode'. You can override using the `.groups` argument.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`))\n\nJoining with `by = join_by(`NTD ID`, Agency, `UZA Name`, Mode, `3 Mode`,\nmonth)`\n\n\nThis creates a table as follows:\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()\n\n\n\n\n\n\n\nThe following code will rename the column ‘UZA Name’ to ‘metro_area’. Because it has no spaces in it, this name will be easier to manipulate in code.\n\nUSAGE &lt;- USAGE |&gt;\n  rename(metro_area = `UZA Name`)\n\n\n\n\nThe ‘Mode’ column is also helpful, but it uses a set of codes that aren’t interpretable. To make life easier for ourselves, let’s use a case_when statement to transform this into something we can make sense of.\nFirst, let’s find the unique ‘Mode’ codes in our data using the distinct function. After examining the NTD website and finding the interpretations of these codes, we can complete the following snippet to recode the ‘Mode’ column.\n\n# Find unique Mode codes in the USAGE table\ndistinct(USAGE, Mode)\n\n# A tibble: 18 × 1\n   Mode \n   &lt;chr&gt;\n 1 DR   \n 2 FB   \n 3 MB   \n 4 SR   \n 5 TB   \n 6 VP   \n 7 CB   \n 8 RB   \n 9 LR   \n10 YR   \n11 MG   \n12 CR   \n13 AR   \n14 TR   \n15 HR   \n16 IP   \n17 PB   \n18 CC   \n\n\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",       # HR: Heavy Rail\n    Mode == \"LR\" ~ \"Light Rail\",        # LR: Light Rail\n    Mode == \"MB\" ~ \"Bus\",               # MB: Bus (Motor Bus)\n    Mode == \"CR\" ~ \"Commuter Rail\",     # CR: Commuter Rail\n    Mode == \"DR\" ~ \"Demand Response\",   # DR: Demand Response\n    Mode == \"VP\" ~ \"Vanpool\",           # VP: Vanpool\n    Mode == \"AR\" ~ \"Alaska Railroad\",   # AR: Alaska Railroad\n    Mode == \"RB\" ~ \"Bus Rapid Transit\", # RB: Bus Rapid Transit\n    Mode == \"FB\" ~ \"Ferryboat\",       # FB: Ferryboat\n    Mode == \"SR\" ~ \"Streetcar Rail\",       # SR: Streetcar Rail\n    Mode == \"TB\" ~ \"Trolleybus\",       # TB: Trolleybus\n    Mode == \"CB\" ~ \"Commuter Bus\",       # CB: Commuter Bus\n    Mode == \"YR\" ~ \"Hybrid Rail\",       # YR: Hybrid Rail\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",  # MG: Monorail and Automated Guideway modes\n    Mode == \"TR\" ~ \"Aerial Tramway\",       # TR: Aerial Tramway\n    Mode == \"IP\" ~ \"Inclined Plane\",       # IP: Inclined Plane\n    Mode == \"PB\" ~ \"Publico\",       # PB: Publico\n    Mode == \"CC\" ~ \"Cable Car\",       # CC: Cable Car\n    TRUE ~ \"Unknown\"                    # Any other mode\n  ))\n\nNow that the data is clean, we can create an attractive summary table of the cleaned up USAGE table using the following snippet:\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n    mutate(month=as.character(month)) |&gt; \n    DT::datatable()"
  },
  {
    "objectID": "mp01.html#data-analysis",
    "href": "mp01.html#data-analysis",
    "title": "Mini Project 1",
    "section": "",
    "text": "Now let’s analyse our data.\n\n\nUsing functions filter, group_by, summarize, arrange, we are going to answer the following questions for our analysis with the following codes:\n\nWhat transit agency had the most total VRM in our data set?\n\n\n# Transit agency with the most total VRM\nagency_most_vrm &lt;- USAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1)  # Get the top agency\n\nprint(agency_most_vrm)\n\n# A tibble: 1 × 2\n  Agency                      total_VRM\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 MTA New York City Transit 10832855350\n\n\nThe transit agency that had the most total VRM in our data set is the MTA New York City Transit, which reported a total of 10,832,855,350 VRM.\n\nWhat transit mode had the most total VRM in our data set?\n\n\n# Transit mode with the most total VRM\nmode_most_vrm &lt;- USAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1)  # Get the top mode\n\nprint(mode_most_vrm)\n\n# A tibble: 1 × 2\n  Mode    total_VRM\n  &lt;chr&gt;       &lt;dbl&gt;\n1 Bus   49444494088\n\n\nThe transit mode that had the most total VRM in our data set is the Bus with a total of 49,444,494,088 VRM.\n\nHow many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n\n\n# Filter for Heavy Rail in NYC for May 2024\nNYC_Subway_trip_may_24 &lt;- USAGE %&gt;%\n  mutate(month = format(ymd(month), \"%Y-%m\")) %&gt;% \n  filter(Mode == \"Heavy Rail\", \n         Agency == \"MTA New York City Transit\",  \n         month == \"2024-05\") %&gt;%  \n  summarize(total_trip = sum(UPT, na.rm = TRUE)) \n\nNYC_Subway_trip_may_24\n\n# A tibble: 1 × 1\n  total_trip\n       &lt;dbl&gt;\n1  180458819\n\n\nIn May 2024, 180,458,819 trips were taken on the NYC Subway (Heavy Rail).\n\nHow much did NYC subway ridership fall between April 2019 and April 2020?\n\n\nnyc_ridership_2019 &lt;- USAGE |&gt;\n  filter(metro_area == \"New York--Jersey City--Newark, NY--NJ\", Mode == \"Heavy Rail\", month == \"2019-04-01\") |&gt;\n  summarise(nyc_sub_2019 = sum(UPT, na.rm = TRUE))\nnyc_ridership_2020&lt;- USAGE |&gt;\n  filter(metro_area == \"New York--Jersey City--Newark, NY--NJ\", Mode == \"Heavy Rail\", month == \"2020-04-01\") |&gt;\n  summarise(nyc_subway_ridership_fall= sum(UPT, na.rm = TRUE))\nnyc_ridership=((nyc_ridership_2020-nyc_ridership_2019)/(nyc_ridership_2019))*100\nnyc_ridership_2019\n\n# A tibble: 1 × 1\n  nyc_sub_2019\n         &lt;dbl&gt;\n1    240655437\n\nnyc_ridership_2020\n\n# A tibble: 1 × 1\n  nyc_subway_ridership_fall\n                      &lt;dbl&gt;\n1                  20704824\n\nnyc_ridership\n\n  nyc_subway_ridership_fall\n1                 -91.39649\n\n\nHere our results show us that the NYC Subway ridership went from 240,655,437 in April 2019 to 20,704,824 in April 2020.Our last piece of the code informs us that this represent a 91% ridership fall between April 2019 and April 2020.\n\n\n\n\n\n\nCreate a new table from USAGE that has annual total (sum) UPT and VRM for 2022. This will require use of the group_by, summarize, and filter functions. You will also want to use the year function, to extract a year from the month column.\nThe resulting table should have the following columns:\nNTD ID Agency metro_area Mode UPT VRM Make sure to ungroup your table after creating it.\nWe will name this table USAGE_2022_ANNUAL.\n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;\n  group_by(`NTD ID`, Agency, `metro_area`, Mode) |&gt;\n  summarize(\n    UPT = sum(UPT, na.rm = TRUE),\n    VRM = sum(VRM, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'metro_area'. You can\noverride using the `.groups` argument.\n\nUSAGE_2022_ANNUAL\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                metro_area Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows\n\n\nOnce we have created this new table, we can merge it to the FINANCIALS data but first we need to make sure they have the same “mode” refrence names with the following code:\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",       # HR: Heavy Rail\n    Mode == \"LR\" ~ \"Light Rail\",        # LR: Light Rail\n    Mode == \"MB\" ~ \"Bus\",               # MB: Bus (Motor Bus)\n    Mode == \"CR\" ~ \"Commuter Rail\",     # CR: Commuter Rail\n    Mode == \"DR\" ~ \"Demand Response\",   # DR: Demand Response\n    Mode == \"VP\" ~ \"Vanpool\",           # VP: Vanpool\n    Mode == \"AR\" ~ \"Alaska Railroad\",   # AR: Alaska Railroad\n    Mode == \"RB\" ~ \"Bus Rapid Transit\", # RB: Bus Rapid Transit\n    Mode == \"FB\" ~ \"Ferryboat\",       # FB: Ferryboat\n    Mode == \"SR\" ~ \"Streetcar Rail\",       # SR: Streetcar Rail\n    Mode == \"TB\" ~ \"Trolleybus\",       # TB: Trolleybus\n    Mode == \"CB\" ~ \"Commuter Bus\",       # CB: Commuter Bus\n    Mode == \"YR\" ~ \"Hybrid Rail\",       # YR: Hybrid Rail\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",  # MG: Monorail and Automated Guideway modes\n    Mode == \"TR\" ~ \"Aerial Tramway\",       # TR: Aerial Tramway\n    Mode == \"IP\" ~ \"Inclined Plane\",       # IP: Inclined Plane\n    Mode == \"PB\" ~ \"Publico\",       # PB: Publico\n    Mode == \"CC\" ~ \"Cable Car\",       # CC: Cable Car\n    TRUE ~ \"Unknown\"                    # Any other mode\n  ))\n\nOnce we have made sure that USAGE_2022_ANNUAL and FINANCIALS have the same value for “mode”, we can merge USAGE_2022_ANNUAL to the FINANCIALS data as follows:\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, \n           FINANCIALS, \n           join_by(`NTD ID`, Mode)) |&gt;\n    drop_na()\nUSAGE_AND_FINANCIALS |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\n\nUsing the USAGE_AND_FINANCIALS table, we are going to try to answer the following questions:\n\nWhich transit system (agency and mode) had the most UPT in 2022?\nWhich transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of - Total Fares to Expenses?\nWhich transit system (agency and mode) has the lowest expenses per UPT?\nWhich transit system (agency and mode) has the highest total fares per UPT?\nWhich transit system (agency and mode) has the lowest expenses per VRM?\nWhich transit system (agency and mode) has the highest total fares per VRM?\n\nWe will restrict our answers to major transit systems by defining them as those with 400,000 UPT per annum.\nTo answer these questions, we’ll need to perform the following steps using the USAGE_AND_FINANCIALS table:\n\nWhich transit system (agency and mode) had the most UPT in 2022?\n\n\n# Find the transit system with the most UPT in 2022\nlibrary(dplyr)\nlibrary(knitr)\nmax_upt &lt;- USAGE_AND_FINANCIALS %&gt;%\n  filter(UPT &gt;= 400000) %&gt;%\n  arrange(desc(UPT)) %&gt;%\n  slice(1) %&gt;%\n  select(Agency, Mode, UPT)\nkable(max_upt, caption = \"Transit System with Most UPT in 2022\")\n\n\nTransit System with Most UPT in 2022\n\n\nAgency\nMode\nUPT\n\n\n\n\nMTA New York City Transit\nHeavy Rail\n1793073801\n\n\n\n\n\nThe answer shows us that the MTA New York City Transit is the transit system that had the most UTP with more than 1.79 billion of trips.\n\nWhich transit system (agency and mode) had the highest farebox recovery (Total Fares to Expenses ratio)?\n\n\nUSAGE_AND_FINANCIALS |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares = sum(`Total Fares`, na.rm = TRUE),\n    total_expenses = sum(Expenses, na.rm = TRUE)\n  ) |&gt;\n  mutate(farebox_recovery_ratio = total_fares / total_expenses) |&gt;\n  ungroup() |&gt;\n  arrange(desc(farebox_recovery_ratio)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                 Mode  total_fares total_expenses farebox_recovery_ratio\n  &lt;chr&gt;                  &lt;chr&gt;       &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n1 Transit Authority of … Vanp…       97300          40801                   2.38\n\n\nThe Transit System with the highest recovery ratio is the Transit Authority of Central Kentuchy, with the Vanpool mode and a recovery ratio of $2.38 USD.\n3.Which transit system (agency and mode) has the lowest expenses per UPT?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_expenses = sum(Expenses, na.rm = TRUE),\n    total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  filter(total_UPT &gt;= 400000) |&gt;\n    mutate (expenses_per_UPT = total_expenses/total_UPT)|&gt;\n  ungroup() |&gt;\n  arrange(expenses_per_UPT) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                         Mode  total_expenses total_UPT expenses_per_UPT\n  &lt;chr&gt;                          &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;            &lt;dbl&gt;\n1 North Carolina State Universi… Bus          2727412   2313091             1.18\n\n\nNorth Carolina State University is the agency with the lowest expenses per UPT with the Bus mode. The expenses per UPT is $1.18 USD.\n4.Which transit system (agency and mode) has the highest total fares per UPT?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares1 = sum(`Total Fares`, na.rm = TRUE),\n    total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  \n  mutate (total_fares_per_UPT = total_fares1/total_UPT)|&gt;\n  ungroup() |&gt;\n  arrange(desc(total_fares_per_UPT)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                Mode          total_fares1 total_UPT total_fares_per_UPT\n  &lt;chr&gt;                 &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;               &lt;dbl&gt;\n1 Altoona Metro Transit Demand Respo…        17163        26                660.\n\n\nThe Altoona Metro Transit with the Demand Response mode had the highest total fares per UPT. With just 26 trips, it collected a total in fares of $17,058 USD with a fare of $660 USD per UPT.\n5.Which transit system (agency and mode) has the lowest expenses per VRM?\n\nlowest_expenses_per_vrm &lt;- USAGE_AND_FINANCIALS %&gt;%\n  filter(UPT &gt;= 400000) %&gt;%\n  mutate(expenses_per_vrm = Expenses / VRM) %&gt;%\n  arrange(expenses_per_vrm) %&gt;%\n  slice(1) %&gt;%\n  select(Agency, Mode, expenses_per_vrm)\n\nkable(lowest_expenses_per_vrm, caption = \"Transit System with Lowest Expenses per VRM in 2022\")\n\n\nTransit System with Lowest Expenses per VRM in 2022\n\n\nAgency\nMode\nexpenses_per_vrm\n\n\n\n\nMetropolitan Transportation Commission\nVanpool\n0.4449998\n\n\n\n\n\nNew Mexico Department of Transportation Vanpool mode has the lowest expense per VRM. Its fare per VRM is around 0.45.\n6.Which transit system (agency and mode) has the highest total fares per VRM?\n\nhighest_fares_per_VRM &lt;- USAGE_AND_FINANCIALS %&gt;%\n  mutate(fares_per_VRM = `Total Fares` / VRM)  %&gt;%  \n  arrange(desc(fares_per_VRM)) %&gt;%  \n  slice_max(fares_per_VRM, n = 1) \n\nkable(highest_fares_per_VRM, caption = \"Transit System with Highest Fares per VRM in 2022\")\n\n\nTransit System with Highest Fares per VRM in 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNTD ID\nAgency\nmetro_area\nMode\nUPT\nVRM\nAgency Name\nTotal Fares\nExpenses\nfares_per_VRM\n\n\n\n\n50521\nChicago Water Taxi (Wendella)\nChicago, IL–IN\nFerryboat\n16936\n600\nChicago Water Taxi (Wendella)\n142473\n211296\n237.455\n\n\n\n\n\nThe transit system that has the highest total fares per VRM is the Ferryboat from Chicago Water Taxi (Wendella) with a total fare per VRM of $237 USD."
  }
]