[
  {
    "objectID": "FinalReport.html",
    "href": "FinalReport.html",
    "title": "Final Report",
    "section": "",
    "text": "To assess the influence of neighborhood location on Airbnb listing prices, we compared these prices to the median asking rents across NYC boroughs. Higher rents in certain neighborhoods may correlate with elevated nightly Airbnb rates, providing insight into the relationship between long-term rental costs and short-term rental pricing.\nThe following visualizations showcase the average median asking rents across NYC boroughs for 2019 and 2023, based on data from StreetEasy, alongside the average Airbnb listing prices by neighborhood for the same years. These comparisons highlight trends in both long-term rental costs and short-term accommodation pricing.\n\n\n\n\nCode\nlibrary(httr)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(plotly)\n\n# Function to safely download and extract the dataset\nsafe_download_extract &lt;- function(url, zip_file, extract_dir) {\n  tryCatch({\n    download.file(url, destfile = zip_file, mode = \"wb\")\n    if (file.exists(zip_file)) {\n      unzip(zip_file, exdir = extract_dir)\n      return(TRUE)\n    } else {\n      message(\"Failed to download the file.\")\n      return(FALSE)\n    }\n  }, error = function(e) {\n    message(\"Error in downloading or extracting: \", e$message)\n    return(FALSE)\n  })\n}\n\n# Function to safely read CSV\nsafe_read_csv &lt;- function(file_path) {\n  tryCatch({\n    df &lt;- read_csv(file_path)\n    if (nrow(df) &gt; 0) {\n      return(df)\n    } else {\n      message(\"The CSV file is empty.\")\n      return(NULL)\n    }\n  }, error = function(e) {\n    message(\"Error reading CSV: \", e$message)\n    return(NULL)\n  })\n}\n\n# Main execution\nurl &lt;- 'https://cdn-charts.streeteasy.com/rentals/All/medianAskingRent_All.zip?_ga=2.55931043.945781993.1730314388-725217219.1730314388'\nzip_file &lt;- \"medianAskingRent_All.zip\"\nextract_dir &lt;- \"StreetEasyAskingRentData\"\ndata_file_path &lt;- file.path(extract_dir, \"medianAskingRent_All.csv\")\n\n# Step 1: Download and extract\nif (!safe_download_extract(url, zip_file, extract_dir)) {\n  stop(\"Failed to download or extract the dataset.\")\n}\n\n# Step 2: Load the data\ndf &lt;- safe_read_csv(data_file_path)\nif (is.null(df)) {\n  stop(\"Failed to read the CSV file.\")\n}\n\n\n# Step 3: Prepare the Data\n# Select only the columns for 2019\ncols_2019 &lt;- c(\"areaName\", \"Borough\", \"areaType\", grep(\"^2019-\", names(df), value = TRUE))\ndf_2019 &lt;- df[, cols_2019]\n\n# Melt the dataframe\ndf_melted &lt;- df_2019 %&gt;%\n  pivot_longer(cols = starts_with(\"2019-\"),\n               names_to = \"YearMonth\",\n               values_to = \"MedianAskingRent\")\n\ndf_melted$YearMonth &lt;- ym(df_melted$YearMonth)\n\n# Calculate average median rent per borough for 2019\navg_median_rent_2019 &lt;- df_melted %&gt;%\n  group_by(Borough) %&gt;%\n  summarize(MedianAskingRent = mean(MedianAskingRent, na.rm = TRUE))\n\n# Create a bar chart for 2019 with custom colors\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_ST_2019 &lt;- plot_ly(avg_median_rent_2019, x = ~Borough, y = ~MedianAskingRent, type = 'bar',\n               color = ~Borough, colors = color_map) %&gt;%\n  layout(title = 'Average Median Asking Rent by Borough in 2019 in NYC&lt;br&gt;&lt;sup&gt;Data from StreetEasy&lt;/sup&gt;',\n         xaxis = list(title = 'Borough'),\n         yaxis = list(title = 'Average Median Asking Rent'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\n# Show the plot\nfig_ST_2019\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(httr)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(plotly)\n\n# Function to safely download and extract the dataset\nsafe_download_extract &lt;- function(url, zip_file, extract_dir) {\n  tryCatch({\n    download.file(url, destfile = zip_file, mode = \"wb\")\n    if (file.exists(zip_file)) {\n      unzip(zip_file, exdir = extract_dir)\n      return(TRUE)\n    } else {\n      message(\"Failed to download the file.\")\n      return(FALSE)\n    }\n  }, error = function(e) {\n    message(\"Error in downloading or extracting: \", e$message)\n    return(FALSE)\n  })\n}\n\n# Function to safely read CSV\nsafe_read_csv &lt;- function(file_path) {\n  tryCatch({\n    df &lt;- read_csv(file_path)\n    if (nrow(df) &gt; 0) {\n      return(df)\n    } else {\n      message(\"The CSV file is empty.\")\n      return(NULL)\n    }\n  }, error = function(e) {\n    message(\"Error reading CSV: \", e$message)\n    return(NULL)\n  })\n}\n\n# Main execution\nurl &lt;- 'https://cdn-charts.streeteasy.com/rentals/All/medianAskingRent_All.zip?_ga=2.55931043.945781993.1730314388-725217219.1730314388'\nzip_file &lt;- \"medianAskingRent_All.zip\"\nextract_dir &lt;- \"StreetEasyAskingRentData\"\ndata_file_path &lt;- file.path(extract_dir, \"medianAskingRent_All.csv\")\n\n# Step 1: Download and extract\nif (!safe_download_extract(url, zip_file, extract_dir)) {\n  stop(\"Failed to download or extract the dataset.\")\n}\n\n# Step 2: Load the data\ndf &lt;- safe_read_csv(data_file_path)\nif (is.null(df)) {\n  stop(\"Failed to read the CSV file.\")\n}\n\n\n# Step 3: Prepare the Data\n# Select only the columns for 2023\ncols_2023 &lt;- c(\"areaName\", \"Borough\", \"areaType\", grep(\"^2023-\", names(df), value = TRUE))\ndf_2023 &lt;- df[, cols_2023]\n\n# Melt the dataframe\ndf_melted &lt;- df_2023 %&gt;%\n  pivot_longer(cols = starts_with(\"2023-\"),\n               names_to = \"YearMonth\",\n               values_to = \"MedianAskingRent\")\n\ndf_melted$YearMonth &lt;- ym(df_melted$YearMonth)\n\n# Calculate average median rent per borough for 2023\navg_median_rent_2023 &lt;- df_melted %&gt;%\n  group_by(Borough) %&gt;%\n  summarize(MedianAskingRent = mean(MedianAskingRent, na.rm = TRUE))\n\n# Create a bar chart for 2023 with custom colors\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_ST_2023 &lt;- plot_ly(avg_median_rent_2023, x = ~Borough, y = ~MedianAskingRent, type = 'bar',\n               color = ~Borough, colors = color_map) %&gt;%\n  layout(title = 'Average Median Asking Rent by Borough in 2023 in NYC&lt;br&gt;&lt;sup&gt;Data from StreetEasy&lt;/sup&gt;',\n         xaxis = list(title = 'Borough'),\n         yaxis = list(title = 'Average Median Asking Rent'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\n# Show the plot\nfig_ST_2023\n\n\n\n\n\n\n\n\nCode\nlibrary(readr)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Step 1: Load the datasets\ndf_2019 &lt;- read_csv('AB_NYC_2019.csv')\ndf_2023 &lt;- read_csv('NYC-Airbnb-2023.csv')\n\n# Step 2: Replace outliers in the 'price' column with the mean\nreplace_outliers_with_mean &lt;- function(df, column, lower_quantile = 0.05, upper_quantile = 0.95) {\n  lower_bound &lt;- quantile(df[[column]], lower_quantile)\n  upper_bound &lt;- quantile(df[[column]], upper_quantile)\n  mean_value &lt;- mean(df[[column]][df[[column]] &gt;= lower_bound & df[[column]] &lt;= upper_bound])\n  df[[column]] &lt;- ifelse(df[[column]] &lt; lower_bound | df[[column]] &gt; upper_bound, mean_value, df[[column]])\n  return(df)\n}\n\ndf_2019_clean &lt;- replace_outliers_with_mean(df_2019, 'price')\ndf_2023_clean &lt;- replace_outliers_with_mean(df_2023, 'price')\n\n# Step 3: Calculate average price per neighborhood_group\navg_price_2019 &lt;- df_2019_clean %&gt;%\n  group_by(neighbourhood_group) %&gt;%\n  summarize(price = mean(price))\n\navg_price_2023 &lt;- df_2023_clean %&gt;%\n  group_by(neighbourhood_group) %&gt;%\n  summarize(price = mean(price))\n\n# Step 4: Create bar charts for 2019 and 2023\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_2019 &lt;- plot_ly(avg_price_2019, x = ~neighbourhood_group, y = ~price, type = 'bar',\n                    color = ~neighbourhood_group, colors = color_map) %&gt;%\n  layout(title = 'Average Airbnb Price by Neighborhood Group in NYC (2019)&lt;br&gt;&lt;sup&gt;Data from Airbnb&lt;/sup&gt;',\n         xaxis = list(title = 'Neighborhood Group'),\n         yaxis = list(title = 'Average Price ($)'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\nfig_2023 &lt;- plot_ly(avg_price_2023, x = ~neighbourhood_group, y = ~price, type = 'bar',\n                    color = ~neighbourhood_group, colors = color_map) %&gt;%\n  layout(title = 'Average Airbnb Price by Neighborhood Group in NYC (2023)&lt;br&gt;&lt;sup&gt;Data from Airbnb&lt;/sup&gt;',\n         xaxis = list(title = 'Neighborhood Group'),\n         yaxis = list(title = 'Average Price ($)'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\n\n\n\n\n\n\nCode\nfig_2019\n\n\n\n\n\n\n\n\n\n\n\nCode\nfig_2023\n\n\n\n\n\n\nIn 2023, the average Airbnb listing prices across NYC’s neighborhood groups reveal clear disparities. Manhattan recorded the highest average price, approximately $160, followed by Brooklyn at $140, Queens at $120, Staten Island at $100, and the Bronx at $80, the lowest. This pattern suggests that neighborhoods with higher median asking rents, such as Manhattan and Brooklyn, also command higher Airbnb listing prices, indicating a strong correlation between the two metrics.\nComparing this with 2019 data, a similar trend is observed. In 2019, Manhattan led with an average Airbnb price of $140, followed by Brooklyn at $120, Queens at $100, Staten Island at $80, and the Bronx at $60. Both datasets highlight Manhattan and Brooklyn as consistently commanding the highest Airbnb prices, reflecting their premium status in both the short-term rental and long-term housing markets. From 2019 to 2023, Queens and Staten Island experienced slight increases in Airbnb prices, aligning with rising median asking rents, while the Bronx, despite remaining the most affordable, showed a modest upward trend in prices.\nThe analysis of median asking rents further substantiates these observations. In 2019, Manhattan had the highest median asking rent at approximately $3,500, followed by Brooklyn at $3,000, with other boroughs trailing significantly. By 2023, Manhattan’s median asking rent had surged to $4,500, while Brooklyn’s increased to $3,500, indicating a notable rise in rental costs in these boroughs. These increases were less pronounced in other areas, emphasizing the growing disparity in housing costs.\nOverall, the data supports the hypothesis that a neighborhood’s location significantly influences Airbnb prices. Manhattan and Brooklyn consistently show higher values, underscoring their premium status in the city’s real estate market. Over the four-year period, there has been an overall increase in prices, with particularly sharp rises in Manhattan and Brooklyn, suggesting heightened demand or increasing costs of living in these areas.\n\n\n\n\n\n\n\n\nView the code here\nairbnb_2019 &lt;- read_csv(\"AB_NYC_2019.csv\")\nairbnb_2023 &lt;- read_csv(\"NYC-Airbnb-2023.csv\")\n\n\nSince the data set does not have a direct date column for Booking, we used the last_review column as a proxy to analyze the activity over time.\n\n\n\n\n\nView the code here\nairbnb_2019$last_review &lt;- as.Date(airbnb_2019$last_review, format = \"%Y-%m-%d\")\nairbnb_2023$last_review &lt;- as.Date(airbnb_2023$last_review, format = \"%Y-%m-%d\")\n\n# Extract month and year\nairbnb_2019$month &lt;- format(airbnb_2019$last_review, \"%Y-%m\")\nairbnb_2023$month &lt;- format(airbnb_2023$last_review, \"%Y-%m\")\n\n# Filter data to only include months in the respective years\nairbnb_2019_filtered &lt;- airbnb_2019 %&gt;% filter(format(last_review, \"%Y\") == \"2019\")\nairbnb_2023_filtered &lt;- airbnb_2023 %&gt;% filter(format(last_review, \"%Y\") == \"2023\")\n\n# Create a sequence of all months in each year\nall_months_2019 &lt;- seq(as.Date(\"2019-01-01\"), as.Date(\"2019-12-01\"), by = \"month\")\nall_months_2023 &lt;- seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-01\"), by = \"month\")\n\n# Convert to character format for plotting\nall_months_2019 &lt;- format(all_months_2019, \"%Y-%m\")\nall_months_2023 &lt;- format(all_months_2023, \"%Y-%m\")\n\n# Plotting the data\nggplot(airbnb_2019_filtered, aes(x = factor(month, levels = all_months_2019))) +\n  geom_bar() +\n  labs(title = \"Monthly Reviews in 2019\", x = \"Month\", y = \"Number of Reviews\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nView the code here\nggplot(airbnb_2023_filtered, aes(x = factor(month, levels = all_months_2023))) +\n  geom_bar() +\n  labs(title = \"Monthly Reviews in 2023\", x = \"Month\", y = \"Number of Reviews\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nThe two graphs show the number of reviews for Airbnb in New York City (NYC) in 2019 and 2023. The peak season for Airbnb in NYC in 2019 was in June and July, with the highest number of reviews in June. There was a significant drop in reviews from June to July. The lowest number of reviews was in January and February. On the other hand, the peak season in 2023 was in February, with the highest number of reviews. There was a significant drop in reviews from February to March. The lowest number of reviews was in January. Overall, there seems to be a shift in the peak season from June-July in 2019 to February in 2023 and the number of reviews in 2023 is significantly lower than in 2019.\n\n\n\n\n\nView the code here\n# Combine the data by property type\ncombined_data &lt;- bind_rows(\n  airbnb_2019_filtered %&gt;% mutate(year = 2019),\n  airbnb_2023_filtered %&gt;% mutate(year = 2023)\n)\n\n# Create a sequence of all months in each year\nall_months_2019 &lt;- format(seq(as.Date(\"2019-01-01\"), as.Date(\"2019-12-01\"), by = \"month\"), \"%Y-%m\")\nall_months_2023 &lt;- format(seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-01\"), by = \"month\"), \"%Y-%m\")\n\n# Define custom colors for each property type\ncustom_colors &lt;- c(\n  \"Private room\" = \"#1f77b4\",\n  \"Entire home/apt\" = \"#ff7f0e\",\n  \"Shared room\" = \"#2ca02c\"\n)\n\n# Calculate the counts of reviews for each month and property type\ncounts &lt;- combined_data %&gt;%\n  group_by(month, room_type) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\n\n# Merge counts with combined data\ncombined_data &lt;- combined_data %&gt;%\n  left_join(counts, by = c(\"month\", \"room_type\"))\n\nggplot(combined_data, aes(x = factor(month, levels = c(all_months_2019, all_months_2023)), fill = room_type)) +\n  geom_bar(position = \"dodge\", stat = \"count\") +\n  geom_text(aes(y = ..count.., label = ..count..), stat = \"count\", position = position_dodge(width = 1), vjust = -0.5, size = 1.5) +\n  facet_wrap(~ room_type, scales = \"free_y\") +\n  labs(title = \"Monthly Reviews by Property Type\", x = \"Months\", y = \"Number of Reviews\") +\n  theme_minimal(base_size = 10) +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, size = 9),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"white\", color = NA),\n    plot.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  scale_fill_manual(values = custom_colors)\n\n\n\n\n\n\n\n\n\nProperty Type Breakdown:\n\nThe most popular property type in both years in ” Entire home / Apt ”\nThe least popular property type in both years is ” Shared room / Hotel room ”\nThe peak season in 2023 was in February, with the highest number of reviews.\n\n\n\n\n\n\nView the code here\nborough_counts &lt;- combined_data %&gt;%\n  group_by(neighbourhood_group, year) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\nnyc_boroughs &lt;- counties(state = \"NY\", cb = TRUE, progress_bar = FALSE) %&gt;%\n  filter(NAME %in% c(\"New York\", \"Kings\", \"Queens\", \"Bronx\", \"Richmond\")) %&gt;%\n  mutate(neighbourhood_group = case_when(\n    NAME == \"New York\" ~ \"Manhattan\",\n    NAME == \"Kings\" ~ \"Brooklyn\",\n    NAME == \"Queens\" ~ \"Queens\",\n    NAME == \"Bronx\" ~ \"Bronx\",\n    NAME == \"Richmond\" ~ \"Staten Island\"\n  ))\n\n\nnyc_boroughs_counts_2019 &lt;- nyc_boroughs %&gt;%\n  left_join(borough_counts %&gt;% filter(year == 2019), by = \"neighbourhood_group\")\nnyc_boroughs_counts_2023 &lt;- nyc_boroughs %&gt;%\n  left_join(borough_counts %&gt;% filter(year == 2023), by = \"neighbourhood_group\")\n\nggplot() +\n  geom_sf(data = nyc_boroughs_counts_2019, aes(fill = count), color = \"black\") +\n  scale_fill_viridis_c(option = \"C\") +\n  labs(title = \"Airbnb Reviews by Borough in NYC (2019)\", fill = \"Reviews\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"tl\", which_north = \"true\", style = ggspatial::north_arrow_fancy_orienteering())\n\n\n\n\n\n\n\n\n\nView the code here\nggplot() +\n  geom_sf(data = nyc_boroughs_counts_2023, aes(fill = count), color = \"black\") +\n  scale_fill_viridis_c(option = \"C\") +\n  labs(title = \"Airbnb Reviews by Borough in NYC (2023)\", fill = \"Reviews\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"tl\", which_north = \"true\", style = ggspatial::north_arrow_fancy_orienteering())\n\n\n\n\n\n\n\n\n\nThe maps above shows the distribution of Airbnb reviews/bookings across different boroughs in New York City (NYC) in 2019 and 2023. There appears to be a shift in the areas with the highest concentration of reviews. In 2019, Manhattan and parts of Brooklyn had the most intense activity. By 2023, the concentration seems to have shifted slightly, with some areas in Brooklyn and Queens showing higher relative activity.\nIn conclusion, the Peak Season can be attributed to valentine’s Day and winter events in the month of February and summer vacation, warm weather and festivals in June & July. While, the decrease in bookings across all boroughs could be due to a combination of factors, including the pandemic, changes in Airbnb’s policies, and increased competition from other short-term rental platforms.\n\n\n\n\n\n\n\nCode\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(caret)\n\n\nLoading required package: lattice\n\n\n\nAttaching package: 'caret'\n\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\n\nThe following object is masked from 'package:httr':\n\n    progress\n\n\nCode\nlibrary(ggplot2)\n\n\n\n\n\n\n\n\nInitial code to download the databases\n\n\n\nCode\ndf_2019 &lt;- read.csv(\"AB_NYC_2019.csv\")\ndf_2023 &lt;- read.csv(\"NYC-Airbnb-2023.csv\")\n\n\n\n\n\n\n\n\nHandle missing values\n\n\n\nCode\nlibrary(dplyr)\n\ndf_2019 &lt;- df_2019 %&gt;%\n  mutate(\n    reviews_per_month = coalesce(reviews_per_month, 0),\n    last_review = coalesce(last_review, '0')  # Replace NA with a string '0'\n  )\n\n\nlibrary(dplyr)\n\ndf_2023 &lt;- df_2023 %&gt;%\n  mutate(\n    reviews_per_month = coalesce(reviews_per_month, 0),\n    last_review = coalesce(last_review, '0')  # Replace NA with a string '0'\n  )\n\n\n\nEncoding Categorical Columns\n\n\n\nCode\n#2019 Database\n# Perform one-hot encoding without dropping any levels\ndummy &lt;- dummyVars(~ room_type + neighbourhood_group, data = df_2019)\n# Apply the transformation\ndf_ohe1 &lt;- predict(dummy, newdata = df_2019)\n# Convert to a data frame\ndf_ohe1 &lt;- as.data.frame(df_ohe1)\n# Combine the encoded columns with the original data\ndf2_2019 &lt;- bind_cols(df_2019, df_ohe1)\n# Verify that all levels, including 'Bronx', are present\ncolnames(df_ohe1)\n\n# Combine the original dataframe with the encoded columns\ndf_2019 &lt;- bind_cols(df_2019, df_ohe1)\n\n# Drop the unencoded columns ('room_type' and 'neighbourhood_group')\ndf_2019 &lt;- df_2019 %&gt;%\n  select(-room_type, -neighbourhood_group)\n\n# View the first few rows of the updated dataframe\nhead(df_2019)\n\n\n#2023 Database\n# Perform one-hot encoding without dropping any levels\ndummy2 &lt;- dummyVars(~ room_type + neighbourhood_group, data = df_2023)\n# Apply the transformation\ndf_ohe2 &lt;- predict(dummy2, newdata = df_2023)\n# Convert to a data frame\ndf_ohe2 &lt;- as.data.frame(df_ohe2)\n# Combine the encoded columns with the original data\ndf2_2023 &lt;- bind_cols(df_2023, df_ohe2)\n# Verify that all levels, including 'Bronx', are present\ncolnames(df_ohe2)\n\n# Combine the original dataframe with the encoded columns\ndf_2023 &lt;- bind_cols(df_2023, df_ohe2)\n\n# Drop the unencoded columns ('room_type' and 'neighbourhood_group')\ndf_2023 &lt;- df_2023 %&gt;%\n  select(-room_type, -neighbourhood_group)\n\n# View the first few rows of the updated dataframe\nhead(df_2023)\n\n\n\nRemoving outliers from the price and minimum_nights.\n\n\n\nCode\n#2019 Database\n# Define a function to remove outliers using the 3-sigma rule\nremove_outliers &lt;- function(df, columns) {\n  for (col in columns) {\n    # Calculate the mean and standard deviation\n    mean_col &lt;- mean(df[[col]], na.rm = TRUE)\n    std_col &lt;- sd(df[[col]], na.rm = TRUE)\n    \n    # Define the upper and lower bounds\n    lower_bound &lt;- mean_col - 3 * std_col\n    upper_bound &lt;- mean_col + 3 * std_col\n    \n    # Filter the DataFrame to keep values within the bounds\n    df &lt;- df %&gt;% filter(df[[col]] &gt;= lower_bound & df[[col]] &lt;= upper_bound)\n  }\n  return(df)\n}\n\n# Specify the columns to clean\ncolumns_to_clean &lt;- c('price', 'minimum_nights')\n\n# Apply the function to the dataset\ndf_2019 &lt;- remove_outliers(df2_2019, columns_to_clean)\n\n# Check the shape of the cleaned dataset (number of rows and columns)\ncat(\"Original dataset shape:\", dim(df2_2019), \"\\n\")\ncat(\"Cleaned dataset shape:\", dim(df_2019), \"\\n\")\n\n\ndf_2019 &lt;- df_2019 %&gt;%\n  select(-room_type, -neighbourhood, -last_review, -latitude,-longitude,)\n\n# Optional: View the first few rows of the cleaned data\n#head(df_2019, 3)\n\n\n\n\nCode\n#2023 Database\n\n# Define a function to remove outliers using the 3-sigma rule\nremove_outliers2 &lt;- function(df, columns) {\n  for (col in columns) {\n    # Calculate the mean and standard deviation\n    mean_col &lt;- mean(df[[col]], na.rm = TRUE)\n    std_col &lt;- sd(df[[col]], na.rm = TRUE)\n    \n    # Define the upper and lower bounds\n    lower_bound &lt;- mean_col - 3 * std_col\n    upper_bound &lt;- mean_col + 3 * std_col\n    \n    # Filter the DataFrame to keep values within the bounds\n    df2 &lt;- df %&gt;% filter(df[[col]] &gt;= lower_bound & df[[col]] &lt;= upper_bound)\n  }\n  return(df2)\n}\n\n# Specify the columns to clean\ncolumns_to_clean2 &lt;- c('price', 'minimum_nights')\n\n# Apply the function to the dataset\ndf_2023 &lt;- remove_outliers2(df2_2023, columns_to_clean2)\n\n# Check the shape of the cleaned dataset (number of rows and columns)\ncat(\"Original dataset shape:\", dim(df2_2023), \"\\n\")\ncat(\"Cleaned dataset shape:\", dim(df_2023), \"\\n\")\n\ndf_2023 &lt;- df_2023 %&gt;%\n  select(-room_type, -neighbourhood, -last_review, -latitude,-longitude, -license, -number_of_reviews_ltm)\n\n\n\nRenaming the columns\n\n\n\nCode\n\n# Rename columns\ndf_2019 &lt;- df_2019 %&gt;%\n  rename(\n    `No. Listings/Host` = calculated_host_listings_count,\n    `Home/Apartment` = `room_typeEntire home/apt`,\n    `Private Room` = `room_typePrivate room`,\n    `Shared Room` = `room_typeShared room`,\n    Bronx = `neighbourhood_groupBronx`,\n    Brooklyn = `neighbourhood_groupBrooklyn`,\n    Manhattan = `neighbourhood_groupManhattan`,\n    Queens = `neighbourhood_groupQueens`,\n    `Staten Island` = `neighbourhood_groupStaten Island`,\n    `Airbnb Name` = name,\n    `Host ID` = host_id,\n    `Host Name` = host_name,\n    Price = price,\n    `Minimum Nights` = minimum_nights,\n    `No. Reviews` = number_of_reviews,\n    `Reviews/Month` = reviews_per_month,\n    `Availability 2019` = availability_365\n  )\n\n# View the first few rows to confirm the changes\nhead(df_2019)\n\n\n\n\nCode\n# Rename columns\ndf_2023 &lt;- df_2023 %&gt;%\n  rename(\n    `No. Listings/Host` = calculated_host_listings_count,\n    `Hotel Room` = `room_typeHotel room`,\n    `Home/Apartment` = `room_typeEntire home/apt`,\n    `Private Room` = `room_typePrivate room`,\n    `Shared Room` = `room_typeShared room`,\n    Bronx = `neighbourhood_groupBronx`,\n    Brooklyn = `neighbourhood_groupBrooklyn`,\n    Manhattan = `neighbourhood_groupManhattan`,\n    Queens = `neighbourhood_groupQueens`,\n    `Staten Island` = `neighbourhood_groupStaten Island`,\n    `Airbnb Name` = name,\n    `Host ID` = host_id,\n    `Host Name` = host_name,\n    Price = price,\n    `Minimum Nights` = minimum_nights,\n    `No. Reviews` = number_of_reviews,\n    `Reviews/Month` = reviews_per_month,\n    `Availability 2023` = availability_365\n  )\n\n# View the first few rows to confirm the changes\nhead(df_2023)\n\n\n     id                                 Airbnb Name Host ID Host Name\n1  2595                       Skylit Midtown Castle    2845  Jennifer\n2  5121                             BlissArtsSpace!    7356     Garon\n3  5203          Cozy Clean Guest Room - Family Apt    7490 MaryEllen\n4  5178           Large Furnished Room Near B'way　    8967  Shunichi\n5  5136 Large Sunny Brooklyn Duplex, Patio + Garden    7378   Rebecca\n6 29628                     Comfortable, Sunny Room  127608     Chris\n  neighbourhood_group Price Minimum Nights No. Reviews Reviews/Month\n1           Manhattan   150             30          49          0.30\n2            Brooklyn    60             30          50          0.30\n3           Manhattan    75              2         118          0.72\n4           Manhattan    68              2         575          3.41\n5            Brooklyn   275             60           3          0.03\n6            Brooklyn    93              3         350          2.25\n  No. Listings/Host Availability 2023 Home/Apartment Hotel Room Private Room\n1                 3               314              1          0            0\n2                 2               365              0          0            1\n3                 1                 0              0          0            1\n4                 1               106              0          0            1\n5                 1               181              1          0            0\n6                 1               145              0          0            1\n  Shared Room Bronx Brooklyn Manhattan Queens Staten Island\n1           0     0        0         1      0             0\n2           0     0        1         0      0             0\n3           0     0        0         1      0             0\n4           0     0        0         1      0             0\n5           0     0        1         0      0             0\n6           0     0        1         0      0             0\n\n\n\n\n\n\n\nCode to see the target Variables\n\n\n\nCode\n#2019 database\n# Define the target variable\ny_2019 &lt;- df_2019$Price\n\n# Define the feature set by selecting all columns except the specified ones\nX_2019 &lt;- df_2019 %&gt;%\n  select(-Price, -`Airbnb Name`, -`Host Name`)\n\n# Print the dimensions of the feature set and target variable\ncat(\"Feature set shape:\", dim(X_2019), \"\\n\")\ncat(\"Target shape:\", length(y_2019), \"\\n\")\n\n\n\n\nCode\n\n\n#2023 database\n# Define the target variable\ny_2023 &lt;- df_2023$Price\n\n# Define the feature set by selecting all columns except the specified ones\nX_2023 &lt;- df_2023 %&gt;%\n  select(-Price, -`Airbnb Name`, -`Host Name`)\n\n# Print the dimensions of the feature set and target variable\ncat(\"Feature set shape:\", dim(X_2023), \"\\n\")\ncat(\"Target shape:\", length(y_2023), \"\\n\")\n\n\n\n\n\n\n\n\n\n\n\nIn 2019, price was mainly driven by room type, with Manhattan Airbnbs being the most popular, and homes and apartments were top choices.\n\n\n\n\nIn 2019, price was mainly driven by room type, with Manhattan Airbnbs being the most popular, and homes and apartments were top choices.\nBy 2023, the number of reviews became a key price factor. Homes and apartments remained dominant, and Manhattan stayed popular, but reviews grew more important. This shift may be due to the 2020 pandemic, increasing demand for cleaner, safer spaces, and a 2023 law limiting short-term apartment rentals in NYC.\n\n\n\n\n\n\n\nCode\n\n# Assuming df_2019 and df_2023 are the two dataframes\nmerged_df &lt;- merge(df_2019, df_2023, by = \"Host ID\", all = FALSE)\n\n# Strip any leading/trailing spaces from column names\ncolnames(merged_df) &lt;- trimws(colnames(merged_df))\n\n# Rename columns in the merged dataframe\ncolnames(merged_df) &lt;- gsub(\"Home/Apartment_x\", \"Home/Apartment\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Private Room_x\", \"Private Room\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Shared Room_x\", \"Shared Room\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Bronx_x\", \"Bronx\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Brooklyn_x\", \"Brooklyn\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Manhattan_x\", \"Manhattan\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Queens_x\", \"Queens\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Staten Island_x\", \"Staten Island\", colnames(merged_df))\n\n# Display the updated column names\nprint(colnames(merged_df))\n#head(merged_df)\n\n\n\n\nCode\n\n# Compute the change in availability between 2023 and 2019\nmerged_df$availability_change &lt;- merged_df$`Availability 2023` - merged_df$`Availability 2019`\n\n# Display the first few rows to check the result\nhead(merged_df)\n\n\n\n\n\n\n\n\nCode\n# Rename and extract relevant columns for 2019\nmin_nights_2019 &lt;- df_2019 %&gt;%\n  select(`Host ID`, `Minimum Nights`) %&gt;%\n  group_by(`Host ID`) %&gt;%\n  summarize(`Min Nights 2019` = mean(`Minimum Nights`, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# Rename and extract relevant columns for 2023\nmin_nights_2023 &lt;- df_2023 %&gt;%\n  select(`Host ID`, `Minimum Nights`) %&gt;%\n  group_by(`Host ID`) %&gt;%\n  summarize(`Min Nights 2023` = mean(`Minimum Nights`, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# Merge both datasets\nmerged_min_nights &lt;- merge(min_nights_2019, min_nights_2023, by = \"Host ID\", all = FALSE)\n\n# Calculate the difference\nmerged_min_nights$`Min Nights Change` &lt;- merged_min_nights$`Min Nights 2023` - merged_min_nights$`Min Nights 2019`\n\n# Analyze the results\nsummary(merged_min_nights)\n\n\n    Host ID          Min Nights 2019  Min Nights 2023  Min Nights Change\n Min.   :     2438   Min.   : 1.000   Min.   :  1.00   Min.   :-58.00   \n 1st Qu.:  6501582   1st Qu.: 1.000   1st Qu.:  5.00   1st Qu.:  0.50   \n Median : 23971160   Median : 2.333   Median : 30.00   Median : 25.00   \n Mean   : 52742098   Mean   : 4.853   Mean   : 21.52   Mean   : 16.67   \n 3rd Qu.: 68240110   3rd Qu.: 4.000   3rd Qu.: 30.00   3rd Qu.: 28.00   \n Max.   :274298453   Max.   :62.000   Max.   :100.00   Max.   : 98.00   \n\n\n\n\nCode\n# Count the number of unique Host IDs\nunique_host_ids_count &lt;- length(unique(merged_min_nights$`Host ID`))\n\n# Print the result\ncat(sprintf(\"Number of unique Host IDs: %d\\n\", unique_host_ids_count))\n\n\nNumber of unique Host IDs: 13985\n\n\n\n\nCode\n# Hosts with increased minimum nights\nincreased_min_nights &lt;- merged_min_nights[merged_min_nights$`Min Nights Change` &gt; 0, ]\n#print(increased_min_nights)\n\n# Hosts with decreased minimum nights\ndecreased_min_nights &lt;- merged_min_nights[merged_min_nights$`Min Nights Change` &lt; 0, ]\n#print(decreased_min_nights)\n\n\n\n\nCode\n# Define bins for changes (10-day intervals)\nbins &lt;- c(-Inf, seq(-120, 120, by = 10), Inf)\n\n# Define labels for bins\nlabels &lt;- c(\n  paste0(seq(-120, 110, by = 10), \" to \", seq(-110, 120, by = 10)),\n  \"&gt; 120 days\", \"&lt; -120 days\"\n)\n\n# Create a new column with 10-day bins\nmerged_min_nights$`Change Group` &lt;- cut(\n  merged_min_nights$`Min Nights Change`,\n  breaks = bins,\n  labels = labels,\n  include.lowest = TRUE\n)\n\n# Display the first few rows to check\nhead(merged_min_nights)\n\n\n  Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1    2438            45.0       45.000000          0.000000      0 to 10\n2    2571             9.0       14.000000          5.000000     10 to 20\n3    2787             1.0        5.142857          4.142857     10 to 20\n4    2845             1.0       22.333333         21.333333     30 to 40\n5    2868            29.0       30.000000          1.000000     10 to 20\n6    3647             3.5        5.000000          1.500000     10 to 20\n\n\n\n\nCode\n# Group by 'Change Group' and count\ngrouped_changes &lt;- merged_min_nights %&gt;%\n  group_by(`Change Group`) %&gt;%\n  summarise(Count = n()) %&gt;%\n  arrange(`Change Group`)\n\n# Add a dummy column for a single-row heatmap\ngrouped_changes &lt;- grouped_changes %&gt;%\n  mutate(Dummy = \"Hosts\")  # Create a dummy column for the x-axis\n\n# Plot the heatmap with counts displayed\nggplot(data = grouped_changes, aes(x = Dummy, y = `Change Group`, fill = Count)) +\n  geom_tile(color = \"black\") +\n  geom_text(aes(label = Count), color = \"white\", size = 4) +  # Add labels\n  scale_fill_gradient(low = \"pink\", high = \"purple\", name = \"Number of Hosts\") +\n  labs(\n    title = \"Heatmap of Minimum Nights Changes (2019 to 2023)\",\n    x = \"\",\n    y = \"Change Group (days)\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    plot.title = element_text(hjust = 0.5, size = 16)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nPer the previous analysis, the variable “Minimum Nights” was one of the major factors in the price change in 2023. After reviewing our data, we found that the average minimum nights on Airbnb listings increased from 4.85 nights (2019) to 16.66 nights (2023). In the plot below, we can see that out of the 13,980 total listings found in both datasets, half of them increased their required minimum stay to between 30 and 40 days.\n\n\n\n\n\n\n\n\nCode\n# Drop duplicate Host IDs, keeping the first occurrence\ndf_2019_unique &lt;- df_2019 %&gt;% distinct(`Host ID`, .keep_all = TRUE)\ndf_2023_unique &lt;- df_2023 %&gt;% distinct(`Host ID`, .keep_all = TRUE)\n\n# Merge with the merged_min_nights dataframe\nmerged_min_nights &lt;- merged_min_nights %&gt;%\n  left_join(select(df_2019_unique, `Host ID`, `Price`), by = \"Host ID\") %&gt;%\n  rename(Price_2019 = Price) %&gt;%\n  left_join(select(df_2023_unique, `Host ID`, `Price`), by = \"Host ID\") %&gt;%\n  rename(Price_2023 = Price)\n\n# Calculate the price change\nmerged_min_nights &lt;- merged_min_nights %&gt;%\n  mutate(\n    Price_Change = Price_2023 - Price_2019,\n    Price_Change_Percent = ((Price_2023 - Price_2019) / Price_2019) * 100\n  )\n\n# View the first few rows of the resulting dataframe\nhead(merged_min_nights)\n\n\n  Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1    2438            45.0       45.000000          0.000000      0 to 10\n2    2571             9.0       14.000000          5.000000     10 to 20\n3    2787             1.0        5.142857          4.142857     10 to 20\n4    2845             1.0       22.333333         21.333333     30 to 40\n5    2868            29.0       30.000000          1.000000     10 to 20\n6    3647             3.5        5.000000          1.500000     10 to 20\n  Price_2019 Price_2023 Price_Change Price_Change_Percent\n1         95         95            0              0.00000\n2        182         99          -83            -45.60440\n3        149        199           50             33.55705\n4        225        150          -75            -33.33333\n5         60         60            0              0.00000\n6         79        169           90            113.92405\n\n\n\n\nCode\n# Define bins for the percentage change (e.g., -100% to 100% in 10% increments)\nbins_percentage &lt;- seq(-100, 100, by = 10)\nlabels_percentage &lt;- paste(bins_percentage[-length(bins_percentage)], \"% to \", bins_percentage[-1] - 1, \"%\", sep = \"\")\n\n# Categorize into bins for price change\nmerged_min_nights$Price_Change_Group &lt;- cut(\n  merged_min_nights$Price_Change_Percent,\n  breaks = bins_percentage,\n  labels = labels_percentage,\n  include.lowest = TRUE\n)\n\n# Group by Price Change Group and count the number of listings\nprice_change_grouped &lt;- merged_min_nights %&gt;%\n  count(Price_Change_Group) %&gt;%\n  arrange(Price_Change_Group)\n\n# Plotting the price change distribution\nlibrary(ggplot2)\nggplot(price_change_grouped, aes(x = Price_Change_Group, y = n)) +\n  geom_bar(stat = \"identity\", fill = \"purple\", color = \"black\") +\n  geom_text(aes(label = n), vjust = -0.5, size = 3) +\n  labs(\n    title = \"Price Change Distribution (2019 to 2023)\",\n    x = \"Price Change Group (%)\",\n    y = \"Number of Listings\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_line(color = \"gray\"))\n\n\n\n\n\n\n\n\n\n\nThe goal of this analysis is to review the change in behavior in comparison with the change in minimum nights. As we can observe, 41.77% of listings registered in 2019 and 2023 maintained almost the same price. According to previous research, the new Law 18 affected many owners monetarily, as the length of stay increased. Fewer tourists can afford a long stay, which led owners to offer slight discounts or promotions to keep their business running.\n\nhttps://www.thecity.nyc/2023/08/15/how-new-airbnb-registration-system-works/\n\n\n\n\n\n\nCode\n# Get the top 20 listings with the highest increase in minimum nights\ntop_50_min_nights_increase &lt;- merged_min_nights %&gt;%\n  arrange(desc(`Min Nights Change`)) %&gt;%\n  head(20)\n\n# View the top 15 listings\nhead(top_50_min_nights_increase, 15)\n\n\n     Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1   19703783               2             100                98   100 to 110\n2    4331864               8             100                92   100 to 110\n3  165884816               2              91                89    90 to 100\n4  183707967               2              90                88    90 to 100\n5    7159107               3              90                87    90 to 100\n6   10461612               3              90                87    90 to 100\n7   16204937               3              90                87    90 to 100\n8  120574445               3              90                87    90 to 100\n9  170071460               3              90                87    90 to 100\n10     45384              14             100                86    90 to 100\n11   9909455               4              90                86    90 to 100\n12  23212298               4              90                86    90 to 100\n13  44460139               4              90                86    90 to 100\n14  50116095               4              90                86    90 to 100\n15   2423061               5              90                85    90 to 100\n   Price_2019 Price_2023 Price_Change Price_Change_Percent Price_Change_Group\n1         160        445          285            178.12500               &lt;NA&gt;\n2         135         99          -36            -26.66667       -30% to -21%\n3         161        161            0              0.00000        -10% to -1%\n4         150         90          -60            -40.00000       -50% to -41%\n5          85        150           65             76.47059         70% to 79%\n6         160        160            0              0.00000        -10% to -1%\n7         215        180          -35            -16.27907       -20% to -11%\n8         200        175          -25            -12.50000       -20% to -11%\n9         100        100            0              0.00000        -10% to -1%\n10        240        450          210             87.50000         80% to 89%\n11         45         88           43             95.55556         90% to 99%\n12        127        194           67             52.75591         50% to 59%\n13        190         39         -151            -79.47368       -80% to -71%\n14         65         50          -15            -23.07692       -30% to -21%\n15        125        260          135            108.00000               &lt;NA&gt;\n\n\n\n\nCode\n# Load required libraries\nlibrary(ggplot2)\n\n# Create a scatter plot to visualize the relationship between Minimum Nights Change and Price Change\nggplot(top_50_min_nights_increase, aes(x = `Min Nights Change`, y = `Price_Change`, color = `Price_Change`, size = `Price_Change`)) +\n  geom_point() +\n  scale_size_continuous(range = c(3, 10)) +  # Adjust the size range for better visibility\n  scale_color_gradientn(colors = c(\"blue\", \"red\")) +  # Coolwarm color palette approximation\n  labs(\n    title = \"Relationship Between Minimum Nights Change and Price Change\",\n    x = \"Change in Minimum Nights\",\n    y = \"Price Change (Monetary)\",\n    color = \"Price Change (%)\",\n    size = \"Price Change (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")  # Adjust legend position\n\n\n\n\n\n\n\n\n\n\n\nIn this analysis, we selected the top 20 listings with the greatest increase in length of stay. As expected, most of the listings show a $0 change or a decrease in price.\n\n\n\n\n\n\nCode\n# Ensure necessary libraries are loaded\nlibrary(dplyr)\n\n# Remove duplicates by Host ID in both 2019 and 2023 data frames\ndf_2019_unique &lt;- df_2019 %&gt;% distinct(`Host ID`, .keep_all = TRUE)\ndf_2023_unique &lt;- df_2023 %&gt;% distinct(`Host ID`, .keep_all = TRUE)\n\n# Add 'No. Reviews' and 'Reviews/Month' from df_2019 and df_2023 into merged_min_nights\nmerged_min_nights &lt;- merged_min_nights %&gt;%\n  left_join(df_2019_unique %&gt;%\n              select(`Host ID`, `No. Reviews`, `Reviews/Month`) %&gt;%\n              rename(`No. Reviews 2019` = `No. Reviews`, \n                     `Reviews/Month 2019` = `Reviews/Month`), \n            by = \"Host ID\") %&gt;%\n  left_join(df_2023_unique %&gt;%\n              select(`Host ID`, `No. Reviews`, `Reviews/Month`) %&gt;%\n              rename(`No. Reviews 2023` = `No. Reviews`, \n                     `Reviews/Month 2023` = `Reviews/Month`), \n            by = \"Host ID\")\n\nhead(merged_min_nights)\n\n\n  Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1    2438            45.0       45.000000          0.000000      0 to 10\n2    2571             9.0       14.000000          5.000000     10 to 20\n3    2787             1.0        5.142857          4.142857     10 to 20\n4    2845             1.0       22.333333         21.333333     30 to 40\n5    2868            29.0       30.000000          1.000000     10 to 20\n6    3647             3.5        5.000000          1.500000     10 to 20\n  Price_2019 Price_2023 Price_Change Price_Change_Percent Price_Change_Group\n1         95         95            0              0.00000        -10% to -1%\n2        182         99          -83            -45.60440       -50% to -41%\n3        149        199           50             33.55705         30% to 39%\n4        225        150          -75            -33.33333       -40% to -31%\n5         60         60            0              0.00000        -10% to -1%\n6         79        169           90            113.92405               &lt;NA&gt;\n  No. Reviews 2019 Reviews/Month 2019 No. Reviews 2023 Reviews/Month 2023\n1                1               0.06                1               0.02\n2               27               0.37               44               0.37\n3                9               0.21               42               0.49\n4               45               0.38               49               0.30\n5                2               0.06                2               0.03\n6               60               0.64               73               0.53\n\n\n\n\nCode\n# Calculate the change in No. Reviews and Reviews/Month between 2019 and 2023\nmerged_min_nights['No. Reviews Change'] = merged_min_nights['No. Reviews 2023'] - merged_min_nights['No. Reviews 2019']\nmerged_min_nights['Reviews/Month Change'] = merged_min_nights['Reviews/Month 2023'] - merged_min_nights['Reviews/Month 2019']\n\n# Optional: Calculate percentage change for No. Reviews and Reviews/Month\nmerged_min_nights['No. Reviews Change (%)'] = ((merged_min_nights['No. Reviews 2023'] - merged_min_nights['No. Reviews 2019']) / merged_min_nights['No. Reviews 2019']) * 100\nmerged_min_nights['Reviews/Month Change (%)'] = ((merged_min_nights['Reviews/Month 2023'] - merged_min_nights['Reviews/Month 2019']) / merged_min_nights['Reviews/Month 2019']) * 100\n\n# View the first few rows\nhead(merged_min_nights)\n\n\n  Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1    2438            45.0       45.000000          0.000000      0 to 10\n2    2571             9.0       14.000000          5.000000     10 to 20\n3    2787             1.0        5.142857          4.142857     10 to 20\n4    2845             1.0       22.333333         21.333333     30 to 40\n5    2868            29.0       30.000000          1.000000     10 to 20\n6    3647             3.5        5.000000          1.500000     10 to 20\n  Price_2019 Price_2023 Price_Change Price_Change_Percent Price_Change_Group\n1         95         95            0              0.00000        -10% to -1%\n2        182         99          -83            -45.60440       -50% to -41%\n3        149        199           50             33.55705         30% to 39%\n4        225        150          -75            -33.33333       -40% to -31%\n5         60         60            0              0.00000        -10% to -1%\n6         79        169           90            113.92405               &lt;NA&gt;\n  No. Reviews 2019 Reviews/Month 2019 No. Reviews 2023 Reviews/Month 2023\n1                1               0.06                1               0.02\n2               27               0.37               44               0.37\n3                9               0.21               42               0.49\n4               45               0.38               49               0.30\n5                2               0.06                2               0.03\n6               60               0.64               73               0.53\n  No. Reviews Change Reviews/Month Change No. Reviews Change (%)\n1                  0                -0.04               0.000000\n2                 17                 0.00              62.962963\n3                 33                 0.28             366.666667\n4                  4                -0.08               8.888889\n5                  0                -0.03               0.000000\n6                 13                -0.11              21.666667\n  Reviews/Month Change (%)\n1                -66.66667\n2                  0.00000\n3                133.33333\n4                -21.05263\n5                -50.00000\n6                -17.18750\n\n\n\n\nCode\n# Create the scatter plot\nggplot(merged_min_nights, aes(x = `Min Nights Change`, y = `No. Reviews Change`)) +\n  geom_point(color = \"blue\") +  # Plot points in blue\n  labs(\n    title = \"Scatter Plot of Minimum Nights Change vs Reviews Change\",\n    x = \"Minimum Nights Change\",\n    y = \"Review Change\"\n  ) +\n  theme_minimal()  # Use a minimal theme\n\n\n\n\n\n\n\n\n\n\n\nOur third approach is to compare and analyze the relationship between Minimum Nights Change and the number of reviews change to determine if there is a significant correlation suggesting that changes in minimum nights directly affect the number of reviews per listing. Most data points are concentrated around zero on both axes, indicating that many listings experienced minimal or no change in either variable.\n\n\n\n\n\n\nCode\n# Get the top 20 listings with the highest increase in minimum nights\ntop_20_min_nights_increase &lt;- merged_min_nights %&gt;%\n  arrange(desc(`Min Nights Change`)) %&gt;%\n  head(20)\n\n# View the top 3 of the top 20\nhead(top_20_min_nights_increase, 3)\n\n\n    Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1  19703783               2             100                98   100 to 110\n2   4331864               8             100                92   100 to 110\n3 165884816               2              91                89    90 to 100\n  Price_2019 Price_2023 Price_Change Price_Change_Percent Price_Change_Group\n1        160        445          285            178.12500               &lt;NA&gt;\n2        135         99          -36            -26.66667       -30% to -21%\n3        161        161            0              0.00000        -10% to -1%\n  No. Reviews 2019 Reviews/Month 2019 No. Reviews 2023 Reviews/Month 2023\n1                5               0.36                6               0.10\n2                7               0.14                8               0.09\n3               10               0.69               11               0.19\n  No. Reviews Change Reviews/Month Change No. Reviews Change (%)\n1                  1                -0.26               20.00000\n2                  1                -0.05               14.28571\n3                  1                -0.50               10.00000\n  Reviews/Month Change (%)\n1                -72.22222\n2                -35.71429\n3                -72.46377\n\n\n\n\nCode\n# Ensure necessary libraries are loaded\nlibrary(ggplot2)\nlibrary(reshape2)\n\n# Calculate the correlation matrix\ncorrelation_matrix &lt;- cor(merged_min_nights[, c('Min Nights Change', 'Price_Change', 'No. Reviews Change')])\n\n# Convert the correlation matrix to a long format for ggplot\ncorrelation_matrix_melted &lt;- melt(correlation_matrix)\n\n# Plot the correlation matrix heatmap\nggplot(correlation_matrix_melted, aes(Var1, Var2, fill = value)) +\n  geom_tile() +\n  geom_text(aes(label = sprintf(\"%.2f\", value)), color = \"white\", size = 5) +  # Add correlation values to tiles\n  scale_fill_gradient2(low = \"blue\", high = \"purple\", mid = \"orange\", midpoint = 0) +\n  labs(title = \"Correlation Between Minimum Nights Change, Price Change, and Reviews\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n\n\n\n\n\n\n\n\n\nIn conclusion, the change in the length of stay has had a notable impact on rental prices, particularly in 2023. As previously discussed, 50% of the listings increased their minimum nights requirement; however, these listings did not significantly raise their prices. Instead, many owners opted to keep prices stable or slightly reduce them, despite broader economic factors such as inflation and increased tourism. This suggests a strategic decision by owners to adopt a “low price” approach to attract more customers, likely in response to new Airbnb regulations and heightened consumer sensitivity to environmental and social challenges.\nOn the other hand, the change in the number of reviews showed only a slight increase in 2023 and did not appear to have a substantial impact on the minimum nights requirement. Ultimately, it is evident that price changes are more strongly influenced by adjustments in the Minimum Nights variable than by the number of reviews. This highlights the importance of length-of-stay policies as a key factor shaping Airbnb rental strategies in recent years."
  },
  {
    "objectID": "FinalReport.html#price-trends-over-time",
    "href": "FinalReport.html#price-trends-over-time",
    "title": "Final Report",
    "section": "Price Trends Over Time",
    "text": "Price Trends Over Time\n\nManhattan consistently shows the highest prices for both Airbnb listings and median asking rents, indicating its prime position in NYC’s real estate market.\nBrooklyn follows, showcasing its appeal in both short-term and long-term rental markets.\nQueens and Staten Island also reflect increases in both Airbnb and rental prices, albeit less pronounced than in Manhattan and Brooklyn.\nBronx maintains the lowest prices in both categories, yet also shows an upward trend over the years."
  },
  {
    "objectID": "FinalReport.html#visualizations",
    "href": "FinalReport.html#visualizations",
    "title": "Final Report",
    "section": "Visualizations",
    "text": "Visualizations\nTo better understand the price trends, the following visualizations present the average median asking rents for 2019 and 2023 (data from StreetEasy), as well as the average Airbnb prices for these years (data from Airbnb).\n\nAverage Median Asking Rent by Borough (2019)\nlibrary(tidyverse) library(ggplot2)"
  },
  {
    "objectID": "IndividualFinalReport.html",
    "href": "IndividualFinalReport.html",
    "title": "Individual Final Report: Listing Legends",
    "section": "",
    "text": "As members of the Listing Legends team, our project explored the impact of property characteristics such as type, location, and availability, and host reputation, including reviews and the number of listings, on Airbnb pricing in NYC. Our analysis draws on data from 2019 and 2023 that we retrived from Kaggle.\nMy specific question for this project was “How do rental prices vary by neighborhood in New York City?”. So I focused on the influence of the Airbnb listing locations on the price per night. When landlords and tenants list their home or a room of their apartment on Airbnb, the general motivation to determine the price per night is to cover a part of the amount of rent they pay per month or the mortgage they need to reimburse. That is why I chose to compare the average price per night per neighborhood group on Airbnb to the average median asking rent per borough in New York City. StreetEasy provides data about the housing market of NYC from 2010 to 2024."
  },
  {
    "objectID": "IndividualFinalReport.html#streeteasy-data-manipulation",
    "href": "IndividualFinalReport.html#streeteasy-data-manipulation",
    "title": "Individual Final Report: Listing Legends",
    "section": "StreetEasy Data Manipulation",
    "text": "StreetEasy Data Manipulation\n\n1. Data Downloading\nTo start my analysis, I downloaded all the necessary library packages:\n\n\nCode\nlibrary(knitr)\nlibrary(httr)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(plotly)\n\n\nThe next step is to download the Median Asking Rent per Borough in NYC data set from StreetEasy with the following code by extracting the file from the url link and unzipping it in order to be able to read it:\n\n\nCode\n# Function to safely download and extract the dataset\nsafe_download_extract &lt;- function(url, zip_file, extract_dir) {\n  tryCatch({\n    download.file(url, destfile = zip_file, mode = \"wb\")\n    if (file.exists(zip_file)) {\n      unzip(zip_file, exdir = extract_dir)\n      return(TRUE)\n    } else {\n      message(\"Failed to download the file.\")\n      return(FALSE)\n    }\n  }, error = function(e) {\n    message(\"Error in downloading or extracting: \", e$message)\n    return(FALSE)\n  })\n}\n\n# Function to safely read CSV\nsafe_read_csv &lt;- function(file_path) {\n  tryCatch({\n    df &lt;- read_csv(file_path)\n    if (nrow(df) &gt; 0) {\n      return(df)\n    } else {\n      message(\"The CSV file is empty.\")\n      return(NULL)\n    }\n  }, error = function(e) {\n    message(\"Error reading CSV: \", e$message)\n    return(NULL)\n  })\n}\n\n# Main execution\nurl &lt;- 'https://cdn-charts.streeteasy.com/rentals/All/medianAskingRent_All.zip?_ga=2.55931043.945781993.1730314388-725217219.1730314388'\nzip_file &lt;- \"medianAskingRent_All.zip\"\nextract_dir &lt;- \"StreetEasyAskingRentData\"\ndata_file_path &lt;- file.path(extract_dir, \"medianAskingRent_All.csv\")\n\n\n\n\n2. Visualization\nAfter our data has been downloaded and unzip in our files, we can start visualizing our data. I chose to display bar charts to visualize the data that we are going to analyze because it is easy to interpret and clearly show differences in values between groups, helping to analyze trends over time. To code my bar charts visuals, I chose to use the function plot_ly() from the Plotly library. The visualizations created with Plotly are highly interactive, meaning users can hover over elements to get more information, zoom in or out on the plot, and explore the data in a more dynamic way compared to static charts.\nOur columns in the StreetEasy datasets are named as following “2010-01”. So we first have the Year and then the Month number. In order to be able to regroup only the values for 2019 and 2023, I used the pivot_longer() function to “melt” the dataframe, transforming the wide-format data with columns for each month into a long-format structure. This makes it easier to group, filter, and summarize the data by borough. The long format also simplifies plotting and statistical operations, as it aligns each value with its corresponding borough and time period in a single column.\nHere is the code for 2019 Average Median Asking Price per Borough in NYC visual:\n\n\nCode\n# Step 1: Download and extract\nif (!safe_download_extract(url, zip_file, extract_dir)) {\n  stop(\"Failed to download or extract the dataset.\")\n}\n\n# Step 2: Load the data\ndf &lt;- safe_read_csv(data_file_path)\nif (is.null(df)) {\n  stop(\"Failed to read the CSV file.\")\n}\n\n\n# Step 3: Prepare the Data\n# Select only the columns for 2019\ncols_2019 &lt;- c(\"areaName\", \"Borough\", \"areaType\", grep(\"^2019-\", names(df), value = TRUE))\ndf_2019 &lt;- df[, cols_2019]\n\n# Melt the dataframe\ndf_melted &lt;- df_2019 %&gt;%\n  pivot_longer(cols = starts_with(\"2019-\"),\n               names_to = \"YearMonth\",\n               values_to = \"MedianAskingRent\")\n\ndf_melted$YearMonth &lt;- ym(df_melted$YearMonth)\n\n# Calculate average median rent per borough for 2019\navg_median_rent_2019 &lt;- df_melted %&gt;%\n  group_by(Borough) %&gt;%\n  summarize(MedianAskingRent = mean(MedianAskingRent, na.rm = TRUE))\n\n# Create a bar chart for 2019 with custom colors\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_ST_2019 &lt;- plot_ly(avg_median_rent_2019, x = ~Borough, y = ~MedianAskingRent, type = 'bar',\n               color = ~Borough, colors = color_map) %&gt;%\n  layout(title = 'Average Median Asking Rent by Borough in 2019 in NYC&lt;br&gt;&lt;sup&gt;Data from StreetEasy&lt;/sup&gt;',\n         xaxis = list(title = 'Borough'),\n         yaxis = list(title = 'Average Median Asking Rent'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\n# Show the plot\nfig_ST_2019\n\n\n\n\n\n\nHere is the code for 2023 Average Median Asking Price per Borough in NYC visual:\n\n\nCode\n# Step 1: Download and extract\nif (!safe_download_extract(url, zip_file, extract_dir)) {\n  stop(\"Failed to download or extract the dataset.\")\n}\n\n# Step 2: Load the data\ndf &lt;- safe_read_csv(data_file_path)\nif (is.null(df)) {\n  stop(\"Failed to read the CSV file.\")\n}\n\n# Step 3: Prepare the Data\n# Select only the columns for 2023\ncols_2023 &lt;- c(\"areaName\", \"Borough\", \"areaType\", grep(\"^2023-\", names(df), value = TRUE))\ndf_2023 &lt;- df[, cols_2023]\n\n# Melt the dataframe\ndf_melted &lt;- df_2023 %&gt;%\n  pivot_longer(cols = starts_with(\"2023-\"),\n               names_to = \"YearMonth\",\n               values_to = \"MedianAskingRent\")\n\ndf_melted$YearMonth &lt;- ym(df_melted$YearMonth)\n\n# Calculate average median rent per borough for 2023\navg_median_rent_2023 &lt;- df_melted %&gt;%\n  group_by(Borough) %&gt;%\n  summarize(MedianAskingRent = mean(MedianAskingRent, na.rm = TRUE))\n\n# Create a bar chart for 2023 with custom colors\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_ST_2023 &lt;- plot_ly(avg_median_rent_2023, x = ~Borough, y = ~MedianAskingRent, type = 'bar',\n               color = ~Borough, colors = color_map) %&gt;%\n  layout(title = 'Average Median Asking Rent by Borough in 2023 in NYC&lt;br&gt;&lt;sup&gt;Data from StreetEasy&lt;/sup&gt;',\n         xaxis = list(title = 'Borough'),\n         yaxis = list(title = 'Average Median Asking Rent'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\n# Show the plot\nfig_ST_2023"
  },
  {
    "objectID": "IndividualFinalReport.html#kaggle-airbnb-data-manipulation",
    "href": "IndividualFinalReport.html#kaggle-airbnb-data-manipulation",
    "title": "Individual Final Report: Listing Legends",
    "section": "Kaggle Airbnb Data Manipulation",
    "text": "Kaggle Airbnb Data Manipulation\n\n1. Data Downloading\nFor the data collected from Kaggle, I downloaded the data sets directly from the Kaggle website. We use for 2019 the data set from the Kaggle project New York City Airbnb Open Data, and for 2023, we took the data set New York City Airbnb 2023, Public Data. Both of those Kaggle projects took their data from Inside Airbnb. This website provides a lot of different data about Airbnb but getting that data is not free, that is why we chose to download those data sets from Kaggle.\nOnce the data sets are downloaded into our files, we can start building our visuals.\n\n\n2. Visualization\nFor my visualization, I will focus on the “price” and “neighborhood_group” columns. Upon examining the data, I noticed that the “price” column contains some extremely high values. This is likely due to the presence of high-end Airbnb listings in NYC, which skew the average nightly price. These luxury listings are primarily concentrated in Manhattan, and their inclusion may distort our observations. To provide a more accurate representation, I’ve chosen to handle these outliers by replacing them with the mean value, rather than removing these listings entirely. This approach ensures we maintain a realistic dataset while reducing the impact of extreme price points.\nHere is the code to handle the outliers and create the visuals:\n\n\nCode\n# Step 1: Load the datasets\ndf_2019 &lt;- read_csv('AB_NYC_2019.csv')\ndf_2023 &lt;- read_csv('NYC-Airbnb-2023.csv')\n\n# Step 2: Replace outliers in the 'price' column with the mean\nreplace_outliers_with_mean &lt;- function(df, column, lower_quantile = 0.05, upper_quantile = 0.95) {\n  lower_bound &lt;- quantile(df[[column]], lower_quantile)\n  upper_bound &lt;- quantile(df[[column]], upper_quantile)\n  mean_value &lt;- mean(df[[column]][df[[column]] &gt;= lower_bound & df[[column]] &lt;= upper_bound])\n  df[[column]] &lt;- ifelse(df[[column]] &lt; lower_bound | df[[column]] &gt; upper_bound, mean_value, df[[column]])\n  return(df)\n}\n\ndf_2019_clean &lt;- replace_outliers_with_mean(df_2019, 'price')\ndf_2023_clean &lt;- replace_outliers_with_mean(df_2023, 'price')\n\n# Step 3: Calculate average price per neighborhood_group\navg_price_2019 &lt;- df_2019_clean %&gt;%\n  group_by(neighbourhood_group) %&gt;%\n  summarize(price = mean(price))\n\navg_price_2023 &lt;- df_2023_clean %&gt;%\n  group_by(neighbourhood_group) %&gt;%\n  summarize(price = mean(price))\n\n# Step 4: Create bar charts for 2019 and 2023\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_2019 &lt;- plot_ly(avg_price_2019, x = ~neighbourhood_group, y = ~price, type = 'bar',\n                    color = ~neighbourhood_group, colors = color_map) %&gt;%\n  layout(title = 'Average Airbnb Price by Neighborhood Group in NYC (2019)&lt;br&gt;&lt;sup&gt;Data from Airbnb&lt;/sup&gt;',\n         xaxis = list(title = 'Neighborhood Group'),\n         yaxis = list(title = 'Average Price ($)'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\nfig_2023 &lt;- plot_ly(avg_price_2023, x = ~neighbourhood_group, y = ~price, type = 'bar',\n                    color = ~neighbourhood_group, colors = color_map) %&gt;%\n  layout(title = 'Average Airbnb Price by Neighborhood Group in NYC (2023)&lt;br&gt;&lt;sup&gt;Data from Airbnb&lt;/sup&gt;',\n         xaxis = list(title = 'Neighborhood Group'),\n         yaxis = list(title = 'Average Price ($)'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\n\nHere is our visual for 2019:\n\n\nCode\nfig_2019\n\n\n\n\n\n\nHere is our visual for 2023:\n\n\nCode\nfig_2023"
  },
  {
    "objectID": "IndividualFinalReport.html#analysis-of-airbnb-prices-and-median-asking-rents-in-nyc",
    "href": "IndividualFinalReport.html#analysis-of-airbnb-prices-and-median-asking-rents-in-nyc",
    "title": "Individual Final Report: Listing Legends",
    "section": "Analysis of Airbnb Prices and Median Asking Rents in NYC",
    "text": "Analysis of Airbnb Prices and Median Asking Rents in NYC\n\n2023: Neighborhood Group Pricing Trends\nIn 2023, both Airbnb pricing and median asking rents across NYC boroughs reflect a consistent pattern where higher long-term rental costs correspond to higher short-term rental prices:\n\nManhattan:\n\nAverage Airbnb price: $160 per night\n\nMedian asking rent: $4,500 per month\n\nBrooklyn:\n\nAverage Airbnb price: $140 per night\n\nMedian asking rent: $3,500 per month\n\nQueens:\n\nAverage Airbnb price: $120 per night\n\nMedian asking rent: $2,700 per month\n\nStaten Island:\n\nAverage Airbnb price: $100 per night\n\nMedian asking rent: $2,200 per month\n\nBronx:\n\nAverage Airbnb price: $80 per night\n\nMedian asking rent: $2,000 per month\n\n\n\n\nComparison with 2019 Data\nIn 2019, both Airbnb prices and median rents were lower, but the borough rankings remained consistent:\n\nManhattan:\n\nAverage Airbnb price: $140 per night\n\nMedian asking rent: $3,500 per month\n\nBrooklyn:\n\nAverage Airbnb price: $120 per night\n\nMedian asking rent: $3,000 per month\n\nQueens:\n\nAverage Airbnb price: $100 per night\n\nMedian asking rent: $2,400 per month\n\nStaten Island:\n\nAverage Airbnb price: $80 per night\n\nMedian asking rent: $2,000 per month\n\nBronx:\n\nAverage Airbnb price: $60 per night\n\nMedian asking rent: $1,800 per month\n\n\n\n\nKey Observations and Insights\n\nConsistent Borough Hierarchy:\nManhattan and Brooklyn consistently lead both Airbnb and median rent markets, indicating that these boroughs are premium locations in NYC’s real estate landscape. The Bronx remains the most affordable, with the lowest prices for both markets in 2019 and 2023.\nGrowth in Pricing:\n\nFrom 2019 to 2023, median asking rents increased sharply in Manhattan (up $1,000) and Brooklyn (up $500), reflecting rising demand or increased cost of living in these areas.\n\nSimilarly, Airbnb prices rose by $20 in Manhattan and Brooklyn, aligning with these broader market trends.\n\nProportional Increases:\nAcross all boroughs, the percentage increases in Airbnb prices roughly correspond to increases in median asking rents, suggesting a direct relationship between the long-term rental market and short-term rental pricing.\nQueens and Staten Island Dynamics:\nBoth boroughs show moderate increases in Airbnb and median rent prices, maintaining their mid-tier affordability status within the city."
  },
  {
    "objectID": "IndividualFinalReport.html#conclusion",
    "href": "IndividualFinalReport.html#conclusion",
    "title": "Individual Final Report: Listing Legends",
    "section": "Conclusion",
    "text": "Conclusion\nThe data clearly illustrate a strong link between median asking rents and Airbnb listing prices, with neighborhood group rankings remaining consistent over time. Manhattan and Brooklyn stand out as premium markets for both short-term and long-term rentals, driven by higher demand and rising costs. The significant price increases between 2019 and 2023 suggest broader economic and market changes, such as inflation, increased tourism, or heightened demand for housing in these areas. Further statistical analysis could provide deeper insights into the exact drivers behind these trends and their potential implications for renters and Airbnb hosts."
  },
  {
    "objectID": "FinalReport.html#average-median-asking-rent-by-borough-in-2019-in-nyc",
    "href": "FinalReport.html#average-median-asking-rent-by-borough-in-2019-in-nyc",
    "title": "Final Report: Listing Legends",
    "section": "Average Median Asking Rent by Borough in 2019 in NYC",
    "text": "Average Median Asking Rent by Borough in 2019 in NYC\n\n\nCode\nlibrary(httr)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(plotly)\n\n# Function to safely download and extract the dataset\nsafe_download_extract &lt;- function(url, zip_file, extract_dir) {\n  tryCatch({\n    download.file(url, destfile = zip_file, mode = \"wb\")\n    if (file.exists(zip_file)) {\n      unzip(zip_file, exdir = extract_dir)\n      return(TRUE)\n    } else {\n      message(\"Failed to download the file.\")\n      return(FALSE)\n    }\n  }, error = function(e) {\n    message(\"Error in downloading or extracting: \", e$message)\n    return(FALSE)\n  })\n}\n\n# Function to safely read CSV\nsafe_read_csv &lt;- function(file_path) {\n  tryCatch({\n    df &lt;- read_csv(file_path)\n    if (nrow(df) &gt; 0) {\n      return(df)\n    } else {\n      message(\"The CSV file is empty.\")\n      return(NULL)\n    }\n  }, error = function(e) {\n    message(\"Error reading CSV: \", e$message)\n    return(NULL)\n  })\n}\n\n# Main execution\nurl &lt;- 'https://cdn-charts.streeteasy.com/rentals/All/medianAskingRent_All.zip?_ga=2.55931043.945781993.1730314388-725217219.1730314388'\nzip_file &lt;- \"medianAskingRent_All.zip\"\nextract_dir &lt;- \"StreetEasyAskingRentData\"\ndata_file_path &lt;- file.path(extract_dir, \"medianAskingRent_All.csv\")\n\n# Step 1: Download and extract\nif (!safe_download_extract(url, zip_file, extract_dir)) {\n  stop(\"Failed to download or extract the dataset.\")\n}\n\n# Step 2: Load the data\ndf &lt;- safe_read_csv(data_file_path)\nif (is.null(df)) {\n  stop(\"Failed to read the CSV file.\")\n}\n\n\n# Step 3: Prepare the Data\n# Select only the columns for 2019\ncols_2019 &lt;- c(\"areaName\", \"Borough\", \"areaType\", grep(\"^2019-\", names(df), value = TRUE))\ndf_2019 &lt;- df[, cols_2019]\n\n# Melt the dataframe\ndf_melted &lt;- df_2019 %&gt;%\n  pivot_longer(cols = starts_with(\"2019-\"),\n               names_to = \"YearMonth\",\n               values_to = \"MedianAskingRent\")\n\ndf_melted$YearMonth &lt;- ym(df_melted$YearMonth)\n\n# Calculate average median rent per borough for 2019\navg_median_rent_2019 &lt;- df_melted %&gt;%\n  group_by(Borough) %&gt;%\n  summarize(MedianAskingRent = mean(MedianAskingRent, na.rm = TRUE))\n\n# Create a bar chart for 2019 with custom colors\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_ST_2019 &lt;- plot_ly(avg_median_rent_2019, x = ~Borough, y = ~MedianAskingRent, type = 'bar',\n               color = ~Borough, colors = color_map) %&gt;%\n  layout(title = 'Average Median Asking Rent by Borough in 2019 in NYC&lt;br&gt;&lt;sup&gt;Data from StreetEasy&lt;/sup&gt;',\n         xaxis = list(title = 'Borough'),\n         yaxis = list(title = 'Average Median Asking Rent'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\n# Show the plot\nfig_ST_2019"
  },
  {
    "objectID": "FinalReport.html#average-median-asking-rent-by-borough-in-2023-in-nyc",
    "href": "FinalReport.html#average-median-asking-rent-by-borough-in-2023-in-nyc",
    "title": "Final Report: Listing Legends",
    "section": "Average Median Asking Rent by Borough in 2023 in NYC",
    "text": "Average Median Asking Rent by Borough in 2023 in NYC\n\n\nCode\nlibrary(httr)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(plotly)\n\n# Function to safely download and extract the dataset\nsafe_download_extract &lt;- function(url, zip_file, extract_dir) {\n  tryCatch({\n    download.file(url, destfile = zip_file, mode = \"wb\")\n    if (file.exists(zip_file)) {\n      unzip(zip_file, exdir = extract_dir)\n      return(TRUE)\n    } else {\n      message(\"Failed to download the file.\")\n      return(FALSE)\n    }\n  }, error = function(e) {\n    message(\"Error in downloading or extracting: \", e$message)\n    return(FALSE)\n  })\n}\n\n# Function to safely read CSV\nsafe_read_csv &lt;- function(file_path) {\n  tryCatch({\n    df &lt;- read_csv(file_path)\n    if (nrow(df) &gt; 0) {\n      return(df)\n    } else {\n      message(\"The CSV file is empty.\")\n      return(NULL)\n    }\n  }, error = function(e) {\n    message(\"Error reading CSV: \", e$message)\n    return(NULL)\n  })\n}\n\n# Main execution\nurl &lt;- 'https://cdn-charts.streeteasy.com/rentals/All/medianAskingRent_All.zip?_ga=2.55931043.945781993.1730314388-725217219.1730314388'\nzip_file &lt;- \"medianAskingRent_All.zip\"\nextract_dir &lt;- \"StreetEasyAskingRentData\"\ndata_file_path &lt;- file.path(extract_dir, \"medianAskingRent_All.csv\")\n\n# Step 1: Download and extract\nif (!safe_download_extract(url, zip_file, extract_dir)) {\n  stop(\"Failed to download or extract the dataset.\")\n}\n\n# Step 2: Load the data\ndf &lt;- safe_read_csv(data_file_path)\nif (is.null(df)) {\n  stop(\"Failed to read the CSV file.\")\n}\n\n\n# Step 3: Prepare the Data\n# Select only the columns for 2023\ncols_2023 &lt;- c(\"areaName\", \"Borough\", \"areaType\", grep(\"^2023-\", names(df), value = TRUE))\ndf_2023 &lt;- df[, cols_2023]\n\n# Melt the dataframe\ndf_melted &lt;- df_2023 %&gt;%\n  pivot_longer(cols = starts_with(\"2023-\"),\n               names_to = \"YearMonth\",\n               values_to = \"MedianAskingRent\")\n\ndf_melted$YearMonth &lt;- ym(df_melted$YearMonth)\n\n# Calculate average median rent per borough for 2023\navg_median_rent_2023 &lt;- df_melted %&gt;%\n  group_by(Borough) %&gt;%\n  summarize(MedianAskingRent = mean(MedianAskingRent, na.rm = TRUE))\n\n# Create a bar chart for 2023 with custom colors\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_ST_2023 &lt;- plot_ly(avg_median_rent_2023, x = ~Borough, y = ~MedianAskingRent, type = 'bar',\n               color = ~Borough, colors = color_map) %&gt;%\n  layout(title = 'Average Median Asking Rent by Borough in 2023 in NYC&lt;br&gt;&lt;sup&gt;Data from StreetEasy&lt;/sup&gt;',\n         xaxis = list(title = 'Borough'),\n         yaxis = list(title = 'Average Median Asking Rent'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\n# Show the plot\nfig_ST_2023\n\n\n\n\n\n\n\n\nCode\nlibrary(readr)\nlibrary(dplyr)\nlibrary(plotly)\n\n# Step 1: Load the datasets\ndf_2019 &lt;- read_csv('AB_NYC_2019.csv')\ndf_2023 &lt;- read_csv('NYC-Airbnb-2023.csv')\n\n# Step 2: Replace outliers in the 'price' column with the mean\nreplace_outliers_with_mean &lt;- function(df, column, lower_quantile = 0.05, upper_quantile = 0.95) {\n  lower_bound &lt;- quantile(df[[column]], lower_quantile)\n  upper_bound &lt;- quantile(df[[column]], upper_quantile)\n  mean_value &lt;- mean(df[[column]][df[[column]] &gt;= lower_bound & df[[column]] &lt;= upper_bound])\n  df[[column]] &lt;- ifelse(df[[column]] &lt; lower_bound | df[[column]] &gt; upper_bound, mean_value, df[[column]])\n  return(df)\n}\n\ndf_2019_clean &lt;- replace_outliers_with_mean(df_2019, 'price')\ndf_2023_clean &lt;- replace_outliers_with_mean(df_2023, 'price')\n\n# Step 3: Calculate average price per neighborhood_group\navg_price_2019 &lt;- df_2019_clean %&gt;%\n  group_by(neighbourhood_group) %&gt;%\n  summarize(price = mean(price))\n\navg_price_2023 &lt;- df_2023_clean %&gt;%\n  group_by(neighbourhood_group) %&gt;%\n  summarize(price = mean(price))\n\n# Step 4: Create bar charts for 2019 and 2023\ncolor_map &lt;- c(\n  'Manhattan' = '#7FD4C1',\n  'Brooklyn' = '#30BFDD',\n  'Queens' = '#8690FF',\n  'Bronx' = '#ACD0F4',\n  'Staten Island' = '#F7C0BB'\n)\n\nfig_2019 &lt;- plot_ly(avg_price_2019, x = ~neighbourhood_group, y = ~price, type = 'bar',\n                    color = ~neighbourhood_group, colors = color_map) %&gt;%\n  layout(title = 'Average Airbnb Price by Neighborhood Group in NYC (2019)&lt;br&gt;&lt;sup&gt;Data from Airbnb&lt;/sup&gt;',\n         xaxis = list(title = 'Neighborhood Group'),\n         yaxis = list(title = 'Average Price ($)'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)\n\nfig_2023 &lt;- plot_ly(avg_price_2023, x = ~neighbourhood_group, y = ~price, type = 'bar',\n                    color = ~neighbourhood_group, colors = color_map) %&gt;%\n  layout(title = 'Average Airbnb Price by Neighborhood Group in NYC (2023)&lt;br&gt;&lt;sup&gt;Data from Airbnb&lt;/sup&gt;',\n         xaxis = list(title = 'Neighborhood Group'),\n         yaxis = list(title = 'Average Price ($)'),\n         plot_bgcolor = 'white',\n         paper_bgcolor = 'white',\n         width = 600,\n         height = 600)"
  },
  {
    "objectID": "FinalReport.html#average-airbnb-price-by-neighborhood-group-in-nyc-2019",
    "href": "FinalReport.html#average-airbnb-price-by-neighborhood-group-in-nyc-2019",
    "title": "Final Report: Listing Legends",
    "section": "Average Airbnb Price by Neighborhood Group in NYC (2019)",
    "text": "Average Airbnb Price by Neighborhood Group in NYC (2019)\n\n\nCode\nfig_2019"
  },
  {
    "objectID": "FinalReport.html#average-airbnb-price-by-neighborhood-group-in-nyc-2023",
    "href": "FinalReport.html#average-airbnb-price-by-neighborhood-group-in-nyc-2023",
    "title": "Final Report: Listing Legends",
    "section": "Average Airbnb Price by Neighborhood Group in NYC (2023)",
    "text": "Average Airbnb Price by Neighborhood Group in NYC (2023)\n\n\nCode\nfig_2023\n\n\n\n\n\n\nIn 2023, the average Airbnb listing prices across NYC’s neighborhood groups reveal clear disparities. Manhattan recorded the highest average price, approximately $160, followed by Brooklyn at $140, Queens at $120, Staten Island at $100, and the Bronx at $80, the lowest. This pattern suggests that neighborhoods with higher median asking rents, such as Manhattan and Brooklyn, also command higher Airbnb listing prices, indicating a strong correlation between the two metrics.\nComparing this with 2019 data, a similar trend is observed. In 2019, Manhattan led with an average Airbnb price of $140, followed by Brooklyn at $120, Queens at $100, Staten Island at $80, and the Bronx at $60. Both datasets highlight Manhattan and Brooklyn as consistently commanding the highest Airbnb prices, reflecting their premium status in both the short-term rental and long-term housing markets. From 2019 to 2023, Queens and Staten Island experienced slight increases in Airbnb prices, aligning with rising median asking rents, while the Bronx, despite remaining the most affordable, showed a modest upward trend in prices.\nThe analysis of median asking rents further substantiates these observations. In 2019, Manhattan had the highest median asking rent at approximately $3,500, followed by Brooklyn at $3,000, with other boroughs trailing significantly. By 2023, Manhattan’s median asking rent had surged to $4,500, while Brooklyn’s increased to $3,500, indicating a notable rise in rental costs in these boroughs. These increases were less pronounced in other areas, emphasizing the growing disparity in housing costs.\nOverall, the data supports the hypothesis that a neighborhood’s location significantly influences Airbnb prices. Manhattan and Brooklyn consistently show higher values, underscoring their premium status in the city’s real estate market. Over the four-year period, there has been an overall increase in prices, with particularly sharp rises in Manhattan and Brooklyn, suggesting heightened demand or increasing costs of living in these areas."
  },
  {
    "objectID": "FinalReport.html#load-the-airbnb-data-set",
    "href": "FinalReport.html#load-the-airbnb-data-set",
    "title": "Final Report: Listing Legends",
    "section": "Load the Airbnb Data set",
    "text": "Load the Airbnb Data set\n\n\nView the code here\nairbnb_2019 &lt;- read_csv(\"AB_NYC_2019.csv\")\nairbnb_2023 &lt;- read_csv(\"NYC-Airbnb-2023.csv\")\n\n\nSince the data set does not have a direct date column for Booking, we used the last_review column as a proxy to analyze the activity over time."
  },
  {
    "objectID": "FinalReport.html#lets-now-identify-the-peak-seasons-in-2019-and-2023",
    "href": "FinalReport.html#lets-now-identify-the-peak-seasons-in-2019-and-2023",
    "title": "Final Report: Listing Legends",
    "section": "Let’s now identify the Peak Seasons in 2019 and 2023",
    "text": "Let’s now identify the Peak Seasons in 2019 and 2023\n\n\nView the code here\nairbnb_2019$last_review &lt;- as.Date(airbnb_2019$last_review, format = \"%Y-%m-%d\")\nairbnb_2023$last_review &lt;- as.Date(airbnb_2023$last_review, format = \"%Y-%m-%d\")\n\n# Extract month and year\nairbnb_2019$month &lt;- format(airbnb_2019$last_review, \"%Y-%m\")\nairbnb_2023$month &lt;- format(airbnb_2023$last_review, \"%Y-%m\")\n\n# Filter data to only include months in the respective years\nairbnb_2019_filtered &lt;- airbnb_2019 %&gt;% filter(format(last_review, \"%Y\") == \"2019\")\nairbnb_2023_filtered &lt;- airbnb_2023 %&gt;% filter(format(last_review, \"%Y\") == \"2023\")\n\n# Create a sequence of all months in each year\nall_months_2019 &lt;- seq(as.Date(\"2019-01-01\"), as.Date(\"2019-12-01\"), by = \"month\")\nall_months_2023 &lt;- seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-01\"), by = \"month\")\n\n# Convert to character format for plotting\nall_months_2019 &lt;- format(all_months_2019, \"%Y-%m\")\nall_months_2023 &lt;- format(all_months_2023, \"%Y-%m\")\n\n# Plotting the data\nggplot(airbnb_2019_filtered, aes(x = factor(month, levels = all_months_2019))) +\n  geom_bar() +\n  labs(title = \"Monthly Reviews in 2019\", x = \"Month\", y = \"Number of Reviews\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nView the code here\nggplot(airbnb_2023_filtered, aes(x = factor(month, levels = all_months_2023))) +\n  geom_bar() +\n  labs(title = \"Monthly Reviews in 2023\", x = \"Month\", y = \"Number of Reviews\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\n\nThe two graphs show the number of reviews for Airbnb in New York City (NYC) in 2019 and 2023. The peak season for Airbnb in NYC in 2019 was in June and July, with the highest number of reviews in June. There was a significant drop in reviews from June to July. The lowest number of reviews was in January and February. On the other hand, the peak season in 2023 was in February, with the highest number of reviews. There was a significant drop in reviews from February to March. The lowest number of reviews was in January. Overall, there seems to be a shift in the peak season from June-July in 2019 to February in 2023 and the number of reviews in 2023 is significantly lower than in 2019.\nAnother perspective would be to look at the number of reviews/bookings for all property types.\n\n\nView the code here\n# Combine the data by property type\ncombined_data &lt;- bind_rows(\n  airbnb_2019_filtered %&gt;% mutate(year = 2019),\n  airbnb_2023_filtered %&gt;% mutate(year = 2023)\n)\n\n# Create a sequence of all months in each year\nall_months_2019 &lt;- format(seq(as.Date(\"2019-01-01\"), as.Date(\"2019-12-01\"), by = \"month\"), \"%Y-%m\")\nall_months_2023 &lt;- format(seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-01\"), by = \"month\"), \"%Y-%m\")\n\n# Define custom colors for each property type\ncustom_colors &lt;- c(\n  \"Private room\" = \"#1f77b4\",\n  \"Entire home/apt\" = \"#ff7f0e\",\n  \"Shared room\" = \"#2ca02c\"\n)\n\n# Calculate the counts of reviews for each month and property type\ncounts &lt;- combined_data %&gt;%\n  group_by(month, room_type) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\n\n# Merge counts with combined data\ncombined_data &lt;- combined_data %&gt;%\n  left_join(counts, by = c(\"month\", \"room_type\"))\n\nggplot(combined_data, aes(x = factor(month, levels = c(all_months_2019, all_months_2023)), fill = room_type)) +\n  geom_bar(position = \"dodge\", stat = \"count\") +\n  geom_text(aes(y = ..count.., label = ..count..), stat = \"count\", position = position_dodge(width = 1), vjust = -0.5, size = 1.5) +\n  facet_wrap(~ room_type, scales = \"free_y\") +\n  labs(title = \"Monthly Reviews by Property Type\", x = \"Months\", y = \"Number of Reviews\") +\n  theme_minimal(base_size = 10) +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, size = 9),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"white\", color = NA),\n    plot.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  scale_fill_manual(values = custom_colors)\n\n\n\n\n\n\n\n\n\nProperty Type Breakdown:\n\nThe most popular property type in both years in ” Entire home / Apt ”\nThe least popular property type in both years is ” Shared room / Hotel room ”\nThe peak season in 2023 was in February, with the highest number of reviews.\n\nFinally, I created two maps, one for 2019 and one for 2023, showing the number of Airbnb reviews/“bookings” by borough in NYC.\n\n\nView the code here\nborough_counts &lt;- combined_data %&gt;%\n  group_by(neighbourhood_group, year) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\nnyc_boroughs &lt;- counties(state = \"NY\", cb = TRUE, progress_bar = FALSE) %&gt;%\n  filter(NAME %in% c(\"New York\", \"Kings\", \"Queens\", \"Bronx\", \"Richmond\")) %&gt;%\n  mutate(neighbourhood_group = case_when(\n    NAME == \"New York\" ~ \"Manhattan\",\n    NAME == \"Kings\" ~ \"Brooklyn\",\n    NAME == \"Queens\" ~ \"Queens\",\n    NAME == \"Bronx\" ~ \"Bronx\",\n    NAME == \"Richmond\" ~ \"Staten Island\"\n  ))\n\n\nnyc_boroughs_counts_2019 &lt;- nyc_boroughs %&gt;%\n  left_join(borough_counts %&gt;% filter(year == 2019), by = \"neighbourhood_group\")\nnyc_boroughs_counts_2023 &lt;- nyc_boroughs %&gt;%\n  left_join(borough_counts %&gt;% filter(year == 2023), by = \"neighbourhood_group\")\n\nggplot() +\n  geom_sf(data = nyc_boroughs_counts_2019, aes(fill = count), color = \"black\") +\n  scale_fill_viridis_c(option = \"C\") +\n  labs(title = \"Airbnb Reviews by Borough in NYC (2019)\", fill = \"Reviews\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"tl\", which_north = \"true\", style = ggspatial::north_arrow_fancy_orienteering())\n\n\n\n\n\n\n\n\n\nView the code here\nggplot() +\n  geom_sf(data = nyc_boroughs_counts_2023, aes(fill = count), color = \"black\") +\n  scale_fill_viridis_c(option = \"C\") +\n  labs(title = \"Airbnb Reviews by Borough in NYC (2023)\", fill = \"Reviews\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"tl\", which_north = \"true\", style = ggspatial::north_arrow_fancy_orienteering())\n\n\n\n\n\n\n\n\n\nThe maps above shows the distribution of Airbnb reviews/bookings across different boroughs in New York City (NYC) in 2019 and 2023. There appears to be a shift in the areas with the highest concentration of reviews. In 2019, Manhattan and parts of Brooklyn had the most intense activity. By 2023, the concentration seems to have shifted slightly, with some areas in Brooklyn and Queens showing higher relative activity.\nIn conclusion, the Peak Season can be attributed to valentine’s Day and winter events in the month of February and summer vacation, warm weather and festivals in June & July. While, the decrease in bookings across all boroughs could be due to a combination of factors, including the pandemic, changes in Airbnb’s policies, and increased competition from other short-term rental platforms."
  },
  {
    "objectID": "FinalReport.html#another-perspective-would-be-to-look-at-the-number-of-reviewsbookings-for-all-property-types.",
    "href": "FinalReport.html#another-perspective-would-be-to-look-at-the-number-of-reviewsbookings-for-all-property-types.",
    "title": "Final Report: Listing Legends - Analyzing Airbnb Market Trends for NYC",
    "section": "Another perspective would be to look at the number of reviews/bookings for all property types.",
    "text": "Another perspective would be to look at the number of reviews/bookings for all property types.\n\n\nView the code here\n# Combine the data by property type\ncombined_data &lt;- bind_rows(\n  airbnb_2019_filtered %&gt;% mutate(year = 2019),\n  airbnb_2023_filtered %&gt;% mutate(year = 2023)\n)\n\n# Create a sequence of all months in each year\nall_months_2019 &lt;- format(seq(as.Date(\"2019-01-01\"), as.Date(\"2019-12-01\"), by = \"month\"), \"%Y-%m\")\nall_months_2023 &lt;- format(seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-01\"), by = \"month\"), \"%Y-%m\")\n\n# Define custom colors for each property type\ncustom_colors &lt;- c(\n  \"Private room\" = \"#1f77b4\",\n  \"Entire home/apt\" = \"#ff7f0e\",\n  \"Shared room\" = \"#2ca02c\"\n)\n\n# Calculate the counts of reviews for each month and property type\ncounts &lt;- combined_data %&gt;%\n  group_by(month, room_type) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\n\n# Merge counts with combined data\ncombined_data &lt;- combined_data %&gt;%\n  left_join(counts, by = c(\"month\", \"room_type\"))\n\nggplot(combined_data, aes(x = factor(month, levels = c(all_months_2019, all_months_2023)), fill = room_type)) +\n  geom_bar(position = \"dodge\", stat = \"count\") +\n  geom_text(aes(y = ..count.., label = ..count..), stat = \"count\", position = position_dodge(width = 1), vjust = -0.5, size = 1.5) +\n  facet_wrap(~ room_type, scales = \"free_y\") +\n  labs(title = \"Monthly Reviews by Property Type\", x = \"Months\", y = \"Number of Reviews\") +\n  theme_minimal(base_size = 10) +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, size = 9),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"white\", color = NA),\n    plot.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  scale_fill_manual(values = custom_colors)\n\n\n\n\n\n\n\n\n\nProperty Type Breakdown:\n\nThe most popular property type in both years in ” Entire home / Apt ”\nThe least popular property type in both years is ” Shared room / Hotel room ”\nThe peak season in 2023 was in February, with the highest number of reviews.\n\nFinally, I created two maps, one for 2019 and one for 2023, showing the number of Airbnb reviews/“bookings” by borough in NYC.\n\n\nView the code here\nborough_counts &lt;- combined_data %&gt;%\n  group_by(neighbourhood_group, year) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\nnyc_boroughs &lt;- counties(state = \"NY\", cb = TRUE, progress_bar = FALSE) %&gt;%\n  filter(NAME %in% c(\"New York\", \"Kings\", \"Queens\", \"Bronx\", \"Richmond\")) %&gt;%\n  mutate(neighbourhood_group = case_when(\n    NAME == \"New York\" ~ \"Manhattan\",\n    NAME == \"Kings\" ~ \"Brooklyn\",\n    NAME == \"Queens\" ~ \"Queens\",\n    NAME == \"Bronx\" ~ \"Bronx\",\n    NAME == \"Richmond\" ~ \"Staten Island\"\n  ))\n\n\nnyc_boroughs_counts_2019 &lt;- nyc_boroughs %&gt;%\n  left_join(borough_counts %&gt;% filter(year == 2019), by = \"neighbourhood_group\")\nnyc_boroughs_counts_2023 &lt;- nyc_boroughs %&gt;%\n  left_join(borough_counts %&gt;% filter(year == 2023), by = \"neighbourhood_group\")\n\nggplot() +\n  geom_sf(data = nyc_boroughs_counts_2019, aes(fill = count), color = \"black\") +\n  scale_fill_viridis_c(option = \"C\") +\n  labs(title = \"Airbnb Reviews by Borough in NYC (2019)\", fill = \"Reviews\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"tl\", which_north = \"true\", style = ggspatial::north_arrow_fancy_orienteering())\n\n\n\n\n\n\n\n\n\nView the code here\nggplot() +\n  geom_sf(data = nyc_boroughs_counts_2023, aes(fill = count), color = \"black\") +\n  scale_fill_viridis_c(option = \"C\") +\n  labs(title = \"Airbnb Reviews by Borough in NYC (2023)\", fill = \"Reviews\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"tl\", which_north = \"true\", style = ggspatial::north_arrow_fancy_orienteering())\n\n\n\n\n\n\n\n\n\nThe maps above shows the distribution of Airbnb reviews/bookings across different boroughs in New York City (NYC) in 2019 and 2023. There appears to be a shift in the areas with the highest concentration of reviews. In 2019, Manhattan and parts of Brooklyn had the most intense activity. By 2023, the concentration seems to have shifted slightly, with some areas in Brooklyn and Queens showing higher relative activity.\nIn conclusion, the Peak Season can be attributed to valentine’s Day and winter events in the month of February and summer vacation, warm weather and festivals in June & July. While, the decrease in bookings across all boroughs could be due to a combination of factors, including the pandemic, changes in Airbnb’s policies, and increased competition from other short-term rental platforms."
  },
  {
    "objectID": "FinalReport.html#finally-i-created-two-maps-one-for-2019-and-one-for-2023-showing-the-number-of-airbnb-reviewsbookings-by-borough-in-nyc.",
    "href": "FinalReport.html#finally-i-created-two-maps-one-for-2019-and-one-for-2023-showing-the-number-of-airbnb-reviewsbookings-by-borough-in-nyc.",
    "title": "Final Report",
    "section": "",
    "text": "View the code here\nborough_counts &lt;- combined_data %&gt;%\n  group_by(neighbourhood_group, year) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup()\nnyc_boroughs &lt;- counties(state = \"NY\", cb = TRUE, progress_bar = FALSE) %&gt;%\n  filter(NAME %in% c(\"New York\", \"Kings\", \"Queens\", \"Bronx\", \"Richmond\")) %&gt;%\n  mutate(neighbourhood_group = case_when(\n    NAME == \"New York\" ~ \"Manhattan\",\n    NAME == \"Kings\" ~ \"Brooklyn\",\n    NAME == \"Queens\" ~ \"Queens\",\n    NAME == \"Bronx\" ~ \"Bronx\",\n    NAME == \"Richmond\" ~ \"Staten Island\"\n  ))\n\n\nnyc_boroughs_counts_2019 &lt;- nyc_boroughs %&gt;%\n  left_join(borough_counts %&gt;% filter(year == 2019), by = \"neighbourhood_group\")\nnyc_boroughs_counts_2023 &lt;- nyc_boroughs %&gt;%\n  left_join(borough_counts %&gt;% filter(year == 2023), by = \"neighbourhood_group\")\n\nggplot() +\n  geom_sf(data = nyc_boroughs_counts_2019, aes(fill = count), color = \"black\") +\n  scale_fill_viridis_c(option = \"C\") +\n  labs(title = \"Airbnb Reviews by Borough in NYC (2019)\", fill = \"Reviews\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"tl\", which_north = \"true\", style = ggspatial::north_arrow_fancy_orienteering())\n\n\n\n\n\n\n\n\n\nView the code here\nggplot() +\n  geom_sf(data = nyc_boroughs_counts_2023, aes(fill = count), color = \"black\") +\n  scale_fill_viridis_c(option = \"C\") +\n  labs(title = \"Airbnb Reviews by Borough in NYC (2023)\", fill = \"Reviews\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"tl\", which_north = \"true\", style = ggspatial::north_arrow_fancy_orienteering())\n\n\n\n\n\n\n\n\n\nThe maps above shows the distribution of Airbnb reviews/bookings across different boroughs in New York City (NYC) in 2019 and 2023. There appears to be a shift in the areas with the highest concentration of reviews. In 2019, Manhattan and parts of Brooklyn had the most intense activity. By 2023, the concentration seems to have shifted slightly, with some areas in Brooklyn and Queens showing higher relative activity.\nIn conclusion, the Peak Season can be attributed to valentine’s Day and winter events in the month of February and summer vacation, warm weather and festivals in June & July. While, the decrease in bookings across all boroughs could be due to a combination of factors, including the pandemic, changes in Airbnb’s policies, and increased competition from other short-term rental platforms."
  },
  {
    "objectID": "FinalReport.html#installing-libraries",
    "href": "FinalReport.html#installing-libraries",
    "title": "Final Report: Listing Legends",
    "section": "Installing libraries",
    "text": "Installing libraries\n\n\n\nCode\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(caret)\n\n\nLoading required package: lattice\n\n\n\nAttaching package: 'caret'\n\n\nThe following object is masked from 'package:httr':\n\n    progress\n\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\n\nCode\nlibrary(ggplot2)"
  },
  {
    "objectID": "FinalReport.html#downloading-nyc-databases-for-2019-and-2023.",
    "href": "FinalReport.html#downloading-nyc-databases-for-2019-and-2023.",
    "title": "Final Report: Listing Legends",
    "section": "Downloading NYC databases for 2019 and 2023.",
    "text": "Downloading NYC databases for 2019 and 2023.\n\n\nInitial code to download the databases\n\n\n\nCode\ndf_2019 &lt;- read.csv(\"AB_NYC_2019.csv\")\ndf_2023 &lt;- read.csv(\"NYC-Airbnb-2023.csv\")"
  },
  {
    "objectID": "FinalReport.html#cleaning-and-pre-processing",
    "href": "FinalReport.html#cleaning-and-pre-processing",
    "title": "Final Report: Listing Legends",
    "section": "Cleaning and Pre processing",
    "text": "Cleaning and Pre processing\n\n\nHandle missing values\n\n\n\nCode\nlibrary(dplyr)\n\ndf_2019 &lt;- df_2019 %&gt;%\n  mutate(\n    reviews_per_month = coalesce(reviews_per_month, 0),\n    last_review = coalesce(last_review, '0')  # Replace NA with a string '0'\n  )\n\n\nlibrary(dplyr)\n\ndf_2023 &lt;- df_2023 %&gt;%\n  mutate(\n    reviews_per_month = coalesce(reviews_per_month, 0),\n    last_review = coalesce(last_review, '0')  # Replace NA with a string '0'\n  )\n\n\n\nEncoding Categorical Columns\n\n\n\nCode\n#2019 Database\n# Perform one-hot encoding without dropping any levels\ndummy &lt;- dummyVars(~ room_type + neighbourhood_group, data = df_2019)\n# Apply the transformation\ndf_ohe1 &lt;- predict(dummy, newdata = df_2019)\n# Convert to a data frame\ndf_ohe1 &lt;- as.data.frame(df_ohe1)\n# Combine the encoded columns with the original data\ndf2_2019 &lt;- bind_cols(df_2019, df_ohe1)\n# Verify that all levels, including 'Bronx', are present\ncolnames(df_ohe1)\n\n# Combine the original dataframe with the encoded columns\ndf_2019 &lt;- bind_cols(df_2019, df_ohe1)\n\n# Drop the unencoded columns ('room_type' and 'neighbourhood_group')\ndf_2019 &lt;- df_2019 %&gt;%\n  select(-room_type, -neighbourhood_group)\n\n# View the first few rows of the updated dataframe\nhead(df_2019)\n\n\n#2023 Database\n# Perform one-hot encoding without dropping any levels\ndummy2 &lt;- dummyVars(~ room_type + neighbourhood_group, data = df_2023)\n# Apply the transformation\ndf_ohe2 &lt;- predict(dummy2, newdata = df_2023)\n# Convert to a data frame\ndf_ohe2 &lt;- as.data.frame(df_ohe2)\n# Combine the encoded columns with the original data\ndf2_2023 &lt;- bind_cols(df_2023, df_ohe2)\n# Verify that all levels, including 'Bronx', are present\ncolnames(df_ohe2)\n\n# Combine the original dataframe with the encoded columns\ndf_2023 &lt;- bind_cols(df_2023, df_ohe2)\n\n# Drop the unencoded columns ('room_type' and 'neighbourhood_group')\ndf_2023 &lt;- df_2023 %&gt;%\n  select(-room_type, -neighbourhood_group)\n\n# View the first few rows of the updated dataframe\nhead(df_2023)\n\n\n\nRemoving outliers from the price and minimum_nights.\n\n\n\nCode\n#2019 Database\n# Define a function to remove outliers using the 3-sigma rule\nremove_outliers &lt;- function(df, columns) {\n  for (col in columns) {\n    # Calculate the mean and standard deviation\n    mean_col &lt;- mean(df[[col]], na.rm = TRUE)\n    std_col &lt;- sd(df[[col]], na.rm = TRUE)\n    \n    # Define the upper and lower bounds\n    lower_bound &lt;- mean_col - 3 * std_col\n    upper_bound &lt;- mean_col + 3 * std_col\n    \n    # Filter the DataFrame to keep values within the bounds\n    df &lt;- df %&gt;% filter(df[[col]] &gt;= lower_bound & df[[col]] &lt;= upper_bound)\n  }\n  return(df)\n}\n\n# Specify the columns to clean\ncolumns_to_clean &lt;- c('price', 'minimum_nights')\n\n# Apply the function to the dataset\ndf_2019 &lt;- remove_outliers(df2_2019, columns_to_clean)\n\n# Check the shape of the cleaned dataset (number of rows and columns)\ncat(\"Original dataset shape:\", dim(df2_2019), \"\\n\")\ncat(\"Cleaned dataset shape:\", dim(df_2019), \"\\n\")\n\n\ndf_2019 &lt;- df_2019 %&gt;%\n  select(-room_type, -neighbourhood, -last_review, -latitude,-longitude,)\n\n# Optional: View the first few rows of the cleaned data\n#head(df_2019, 3)\n\n\n\n\nCode\n#2023 Database\n\n# Define a function to remove outliers using the 3-sigma rule\nremove_outliers2 &lt;- function(df, columns) {\n  for (col in columns) {\n    # Calculate the mean and standard deviation\n    mean_col &lt;- mean(df[[col]], na.rm = TRUE)\n    std_col &lt;- sd(df[[col]], na.rm = TRUE)\n    \n    # Define the upper and lower bounds\n    lower_bound &lt;- mean_col - 3 * std_col\n    upper_bound &lt;- mean_col + 3 * std_col\n    \n    # Filter the DataFrame to keep values within the bounds\n    df2 &lt;- df %&gt;% filter(df[[col]] &gt;= lower_bound & df[[col]] &lt;= upper_bound)\n  }\n  return(df2)\n}\n\n# Specify the columns to clean\ncolumns_to_clean2 &lt;- c('price', 'minimum_nights')\n\n# Apply the function to the dataset\ndf_2023 &lt;- remove_outliers2(df2_2023, columns_to_clean2)\n\n# Check the shape of the cleaned dataset (number of rows and columns)\ncat(\"Original dataset shape:\", dim(df2_2023), \"\\n\")\ncat(\"Cleaned dataset shape:\", dim(df_2023), \"\\n\")\n\ndf_2023 &lt;- df_2023 %&gt;%\n  select(-room_type, -neighbourhood, -last_review, -latitude,-longitude, -license, -number_of_reviews_ltm)\n\n\n\nRenaming the columns\n\n\n\nCode\n\n# Rename columns\ndf_2019 &lt;- df_2019 %&gt;%\n  rename(\n    `No. Listings/Host` = calculated_host_listings_count,\n    `Home/Apartment` = `room_typeEntire home/apt`,\n    `Private Room` = `room_typePrivate room`,\n    `Shared Room` = `room_typeShared room`,\n    Bronx = `neighbourhood_groupBronx`,\n    Brooklyn = `neighbourhood_groupBrooklyn`,\n    Manhattan = `neighbourhood_groupManhattan`,\n    Queens = `neighbourhood_groupQueens`,\n    `Staten Island` = `neighbourhood_groupStaten Island`,\n    `Airbnb Name` = name,\n    `Host ID` = host_id,\n    `Host Name` = host_name,\n    Price = price,\n    `Minimum Nights` = minimum_nights,\n    `No. Reviews` = number_of_reviews,\n    `Reviews/Month` = reviews_per_month,\n    `Availability 2019` = availability_365\n  )\n\n# View the first few rows to confirm the changes\nhead(df_2019)\n\n\n\n\nCode\n# Rename columns\ndf_2023 &lt;- df_2023 %&gt;%\n  rename(\n    `No. Listings/Host` = calculated_host_listings_count,\n    `Hotel Room` = `room_typeHotel room`,\n    `Home/Apartment` = `room_typeEntire home/apt`,\n    `Private Room` = `room_typePrivate room`,\n    `Shared Room` = `room_typeShared room`,\n    Bronx = `neighbourhood_groupBronx`,\n    Brooklyn = `neighbourhood_groupBrooklyn`,\n    Manhattan = `neighbourhood_groupManhattan`,\n    Queens = `neighbourhood_groupQueens`,\n    `Staten Island` = `neighbourhood_groupStaten Island`,\n    `Airbnb Name` = name,\n    `Host ID` = host_id,\n    `Host Name` = host_name,\n    Price = price,\n    `Minimum Nights` = minimum_nights,\n    `No. Reviews` = number_of_reviews,\n    `Reviews/Month` = reviews_per_month,\n    `Availability 2023` = availability_365\n  )\n\n# View the first few rows to confirm the changes\nhead(df_2023)\n\n\n     id                                 Airbnb Name Host ID Host Name\n1  2595                       Skylit Midtown Castle    2845  Jennifer\n2  5121                             BlissArtsSpace!    7356     Garon\n3  5203          Cozy Clean Guest Room - Family Apt    7490 MaryEllen\n4  5178           Large Furnished Room Near B'way　    8967  Shunichi\n5  5136 Large Sunny Brooklyn Duplex, Patio + Garden    7378   Rebecca\n6 29628                     Comfortable, Sunny Room  127608     Chris\n  neighbourhood_group Price Minimum Nights No. Reviews Reviews/Month\n1           Manhattan   150             30          49          0.30\n2            Brooklyn    60             30          50          0.30\n3           Manhattan    75              2         118          0.72\n4           Manhattan    68              2         575          3.41\n5            Brooklyn   275             60           3          0.03\n6            Brooklyn    93              3         350          2.25\n  No. Listings/Host Availability 2023 Home/Apartment Hotel Room Private Room\n1                 3               314              1          0            0\n2                 2               365              0          0            1\n3                 1                 0              0          0            1\n4                 1               106              0          0            1\n5                 1               181              1          0            0\n6                 1               145              0          0            1\n  Shared Room Bronx Brooklyn Manhattan Queens Staten Island\n1           0     0        0         1      0             0\n2           0     0        1         0      0             0\n3           0     0        0         1      0             0\n4           0     0        0         1      0             0\n5           0     0        1         0      0             0\n6           0     0        1         0      0             0\n\n\n\n\nDefine the target variable and features.\n\n\nCode to see the target Variables\n\n\n\nCode\n#2019 database\n# Define the target variable\ny_2019 &lt;- df_2019$Price\n\n# Define the feature set by selecting all columns except the specified ones\nX_2019 &lt;- df_2019 %&gt;%\n  select(-Price, -`Airbnb Name`, -`Host Name`)\n\n# Print the dimensions of the feature set and target variable\ncat(\"Feature set shape:\", dim(X_2019), \"\\n\")\ncat(\"Target shape:\", length(y_2019), \"\\n\")\n\n\n\n\nCode\n\n\n#2023 database\n# Define the target variable\ny_2023 &lt;- df_2023$Price\n\n# Define the feature set by selecting all columns except the specified ones\nX_2023 &lt;- df_2023 %&gt;%\n  select(-Price, -`Airbnb Name`, -`Host Name`)\n\n# Print the dimensions of the feature set and target variable\ncat(\"Feature set shape:\", dim(X_2023), \"\\n\")\ncat(\"Target shape:\", length(y_2023), \"\\n\")"
  },
  {
    "objectID": "FinalReport.html#most-important-features-impacting-the-airbnb-prices-in-2019-and-2023.",
    "href": "FinalReport.html#most-important-features-impacting-the-airbnb-prices-in-2019-and-2023.",
    "title": "Final Report: Listing Legends",
    "section": "Most important Features impacting the Airbnb Prices in 2019 and 2023.",
    "text": "Most important Features impacting the Airbnb Prices in 2019 and 2023.\n\n2019 Feature Importance\n\nIn 2019, price was mainly driven by room type, with Manhattan Airbnbs being the most popular, and homes and apartments were top choices.\n\n\n2023 Feature Importance\n\nIn 2019, price was mainly driven by room type, with Manhattan Airbnbs being the most popular, and homes and apartments were top choices.\nBy 2023, the number of reviews became a key price factor. Homes and apartments remained dominant, and Manhattan stayed popular, but reviews grew more important. This shift may be due to the 2020 pandemic, increasing demand for cleaner, safer spaces, and a 2023 law limiting short-term apartment rentals in NYC."
  },
  {
    "objectID": "FinalReport.html#analysis-4.-length-of-stay-effect-on-the-listing-price-and-reviews.",
    "href": "FinalReport.html#analysis-4.-length-of-stay-effect-on-the-listing-price-and-reviews.",
    "title": "Final Report: Listing Legends",
    "section": "Analysis: 4. Length of stay effect on the listing price and reviews.",
    "text": "Analysis: 4. Length of stay effect on the listing price and reviews.\n\n\n\nCode\n\n# Assuming df_2019 and df_2023 are the two dataframes\nmerged_df &lt;- merge(df_2019, df_2023, by = \"Host ID\", all = FALSE)\n\n# Strip any leading/trailing spaces from column names\ncolnames(merged_df) &lt;- trimws(colnames(merged_df))\n\n# Rename columns in the merged dataframe\ncolnames(merged_df) &lt;- gsub(\"Home/Apartment_x\", \"Home/Apartment\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Private Room_x\", \"Private Room\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Shared Room_x\", \"Shared Room\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Bronx_x\", \"Bronx\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Brooklyn_x\", \"Brooklyn\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Manhattan_x\", \"Manhattan\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Queens_x\", \"Queens\", colnames(merged_df))\ncolnames(merged_df) &lt;- gsub(\"Staten Island_x\", \"Staten Island\", colnames(merged_df))\n\n# Display the updated column names\nprint(colnames(merged_df))\n#head(merged_df)\n\n\n\n\nCode\n\n# Compute the change in availability between 2023 and 2019\nmerged_df$availability_change &lt;- merged_df$`Availability 2023` - merged_df$`Availability 2019`\n\n# Display the first few rows to check the result\nhead(merged_df)\n\n\n\n\nChange comparation on the Number on minimum number of nights allowed in 2019 and 2023.\n\n\n\nCode\n# Rename and extract relevant columns for 2019\nmin_nights_2019 &lt;- df_2019 %&gt;%\n  select(`Host ID`, `Minimum Nights`) %&gt;%\n  group_by(`Host ID`) %&gt;%\n  summarize(`Min Nights 2019` = mean(`Minimum Nights`, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# Rename and extract relevant columns for 2023\nmin_nights_2023 &lt;- df_2023 %&gt;%\n  select(`Host ID`, `Minimum Nights`) %&gt;%\n  group_by(`Host ID`) %&gt;%\n  summarize(`Min Nights 2023` = mean(`Minimum Nights`, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n# Merge both datasets\nmerged_min_nights &lt;- merge(min_nights_2019, min_nights_2023, by = \"Host ID\", all = FALSE)\n\n# Calculate the difference\nmerged_min_nights$`Min Nights Change` &lt;- merged_min_nights$`Min Nights 2023` - merged_min_nights$`Min Nights 2019`\n\n# Analyze the results\nsummary(merged_min_nights)\n\n\n    Host ID          Min Nights 2019  Min Nights 2023  Min Nights Change\n Min.   :     2438   Min.   : 1.000   Min.   :  1.00   Min.   :-58.00   \n 1st Qu.:  6501582   1st Qu.: 1.000   1st Qu.:  5.00   1st Qu.:  0.50   \n Median : 23971160   Median : 2.333   Median : 30.00   Median : 25.00   \n Mean   : 52742098   Mean   : 4.853   Mean   : 21.52   Mean   : 16.67   \n 3rd Qu.: 68240110   3rd Qu.: 4.000   3rd Qu.: 30.00   3rd Qu.: 28.00   \n Max.   :274298453   Max.   :62.000   Max.   :100.00   Max.   : 98.00   \n\n\n\n\nCode\n# Count the number of unique Host IDs\nunique_host_ids_count &lt;- length(unique(merged_min_nights$`Host ID`))\n\n# Print the result\ncat(sprintf(\"Number of unique Host IDs: %d\\n\", unique_host_ids_count))\n\n\nNumber of unique Host IDs: 13985\n\n\n\n\nCode\n# Hosts with increased minimum nights\nincreased_min_nights &lt;- merged_min_nights[merged_min_nights$`Min Nights Change` &gt; 0, ]\n#print(increased_min_nights)\n\n# Hosts with decreased minimum nights\ndecreased_min_nights &lt;- merged_min_nights[merged_min_nights$`Min Nights Change` &lt; 0, ]\n#print(decreased_min_nights)\n\n\n\n\nCode\n# Define bins for changes (10-day intervals)\nbins &lt;- c(-Inf, seq(-120, 120, by = 10), Inf)\n\n# Define labels for bins\nlabels &lt;- c(\n  paste0(seq(-120, 110, by = 10), \" to \", seq(-110, 120, by = 10)),\n  \"&gt; 120 days\", \"&lt; -120 days\"\n)\n\n# Create a new column with 10-day bins\nmerged_min_nights$`Change Group` &lt;- cut(\n  merged_min_nights$`Min Nights Change`,\n  breaks = bins,\n  labels = labels,\n  include.lowest = TRUE\n)\n\n# Display the first few rows to check\nhead(merged_min_nights)\n\n\n  Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1    2438            45.0       45.000000          0.000000      0 to 10\n2    2571             9.0       14.000000          5.000000     10 to 20\n3    2787             1.0        5.142857          4.142857     10 to 20\n4    2845             1.0       22.333333         21.333333     30 to 40\n5    2868            29.0       30.000000          1.000000     10 to 20\n6    3647             3.5        5.000000          1.500000     10 to 20\n\n\n\n\nCode\n# Group by 'Change Group' and count\ngrouped_changes &lt;- merged_min_nights %&gt;%\n  group_by(`Change Group`) %&gt;%\n  summarise(Count = n()) %&gt;%\n  arrange(`Change Group`)\n\n# Add a dummy column for a single-row heatmap\ngrouped_changes &lt;- grouped_changes %&gt;%\n  mutate(Dummy = \"Hosts\")  # Create a dummy column for the x-axis\n\n# Plot the heatmap with counts displayed\nggplot(data = grouped_changes, aes(x = Dummy, y = `Change Group`, fill = Count)) +\n  geom_tile(color = \"black\") +\n  geom_text(aes(label = Count), color = \"white\", size = 4) +  # Add labels\n  scale_fill_gradient(low = \"pink\", high = \"purple\", name = \"Number of Hosts\") +\n  labs(\n    title = \"Heatmap of Minimum Nights Changes (2019 to 2023)\",\n    x = \"\",\n    y = \"Change Group (days)\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    plot.title = element_text(hjust = 0.5, size = 16)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nHeatmap of Minimum Night Changes (2019 - 2023)\nPer the previous analysis, the variable “Minimum Nights” was one of the major factors in the price change in 2023. After reviewing our data, we found that the average minimum nights on Airbnb listings increased from 4.85 nights (2019) to 16.66 nights (2023). In the plot below, we can see that out of the 13,980 total listings found in both datasets, half of them increased their required minimum stay to between 30 and 40 days."
  },
  {
    "objectID": "FinalReport.html#price-change-distribution-of-2019-and-2023",
    "href": "FinalReport.html#price-change-distribution-of-2019-and-2023",
    "title": "Final Report: Listing Legends",
    "section": "Price Change Distribution of 2019 and 2023",
    "text": "Price Change Distribution of 2019 and 2023\n\n\n\nCode\n# Drop duplicate Host IDs, keeping the first occurrence\ndf_2019_unique &lt;- df_2019 %&gt;% distinct(`Host ID`, .keep_all = TRUE)\ndf_2023_unique &lt;- df_2023 %&gt;% distinct(`Host ID`, .keep_all = TRUE)\n\n# Merge with the merged_min_nights dataframe\nmerged_min_nights &lt;- merged_min_nights %&gt;%\n  left_join(select(df_2019_unique, `Host ID`, `Price`), by = \"Host ID\") %&gt;%\n  rename(Price_2019 = Price) %&gt;%\n  left_join(select(df_2023_unique, `Host ID`, `Price`), by = \"Host ID\") %&gt;%\n  rename(Price_2023 = Price)\n\n# Calculate the price change\nmerged_min_nights &lt;- merged_min_nights %&gt;%\n  mutate(\n    Price_Change = Price_2023 - Price_2019,\n    Price_Change_Percent = ((Price_2023 - Price_2019) / Price_2019) * 100\n  )\n\n# View the first few rows of the resulting dataframe\nhead(merged_min_nights)\n\n\n  Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1    2438            45.0       45.000000          0.000000      0 to 10\n2    2571             9.0       14.000000          5.000000     10 to 20\n3    2787             1.0        5.142857          4.142857     10 to 20\n4    2845             1.0       22.333333         21.333333     30 to 40\n5    2868            29.0       30.000000          1.000000     10 to 20\n6    3647             3.5        5.000000          1.500000     10 to 20\n  Price_2019 Price_2023 Price_Change Price_Change_Percent\n1         95         95            0              0.00000\n2        182         99          -83            -45.60440\n3        149        199           50             33.55705\n4        225        150          -75            -33.33333\n5         60         60            0              0.00000\n6         79        169           90            113.92405\n\n\n\n\nCode\n# Define bins for the percentage change (e.g., -100% to 100% in 10% increments)\nbins_percentage &lt;- seq(-100, 100, by = 10)\nlabels_percentage &lt;- paste(bins_percentage[-length(bins_percentage)], \"% to \", bins_percentage[-1] - 1, \"%\", sep = \"\")\n\n# Categorize into bins for price change\nmerged_min_nights$Price_Change_Group &lt;- cut(\n  merged_min_nights$Price_Change_Percent,\n  breaks = bins_percentage,\n  labels = labels_percentage,\n  include.lowest = TRUE\n)\n\n# Group by Price Change Group and count the number of listings\nprice_change_grouped &lt;- merged_min_nights %&gt;%\n  count(Price_Change_Group) %&gt;%\n  arrange(Price_Change_Group)\n\n# Plotting the price change distribution\nlibrary(ggplot2)\nggplot(price_change_grouped, aes(x = Price_Change_Group, y = n)) +\n  geom_bar(stat = \"identity\", fill = \"purple\", color = \"black\") +\n  geom_text(aes(label = n), vjust = -0.5, size = 3) +\n  labs(\n    title = \"Price Change Distribution (2019 to 2023)\",\n    x = \"Price Change Group (%)\",\n    y = \"Number of Listings\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_line(color = \"gray\"))\n\n\n\n\n\n\n\n\n\n\nThe goal of this analysis is to review the change in behavior in comparison with the change in minimum nights. As we can observe, 41.77% of listings registered in 2019 and 2023 maintained almost the same price. According to previous research, the new Law 18 affected many owners monetarily, as the length of stay increased. Fewer tourists can afford a long stay, which led owners to offer slight discounts or promotions to keep their business running.\n\nhttps://www.thecity.nyc/2023/08/15/how-new-airbnb-registration-system-works/"
  },
  {
    "objectID": "FinalReport.html#top-20-listings-with-the-larger-minimum-night-change-from-2019-to-2023",
    "href": "FinalReport.html#top-20-listings-with-the-larger-minimum-night-change-from-2019-to-2023",
    "title": "Final Report: Listing Legends",
    "section": "Top 20 Listings with the larger Minimum Night Change from 2019 to 2023",
    "text": "Top 20 Listings with the larger Minimum Night Change from 2019 to 2023\n\n\n\nCode\n# Get the top 20 listings with the highest increase in minimum nights\ntop_50_min_nights_increase &lt;- merged_min_nights %&gt;%\n  arrange(desc(`Min Nights Change`)) %&gt;%\n  head(20)\n\n# View the top 15 listings\nhead(top_50_min_nights_increase, 15)\n\n\n     Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1   19703783               2             100                98   100 to 110\n2    4331864               8             100                92   100 to 110\n3  165884816               2              91                89    90 to 100\n4  183707967               2              90                88    90 to 100\n5    7159107               3              90                87    90 to 100\n6   10461612               3              90                87    90 to 100\n7   16204937               3              90                87    90 to 100\n8  120574445               3              90                87    90 to 100\n9  170071460               3              90                87    90 to 100\n10     45384              14             100                86    90 to 100\n11   9909455               4              90                86    90 to 100\n12  23212298               4              90                86    90 to 100\n13  44460139               4              90                86    90 to 100\n14  50116095               4              90                86    90 to 100\n15   2423061               5              90                85    90 to 100\n   Price_2019 Price_2023 Price_Change Price_Change_Percent Price_Change_Group\n1         160        445          285            178.12500               &lt;NA&gt;\n2         135         99          -36            -26.66667       -30% to -21%\n3         161        161            0              0.00000        -10% to -1%\n4         150         90          -60            -40.00000       -50% to -41%\n5          85        150           65             76.47059         70% to 79%\n6         160        160            0              0.00000        -10% to -1%\n7         215        180          -35            -16.27907       -20% to -11%\n8         200        175          -25            -12.50000       -20% to -11%\n9         100        100            0              0.00000        -10% to -1%\n10        240        450          210             87.50000         80% to 89%\n11         45         88           43             95.55556         90% to 99%\n12        127        194           67             52.75591         50% to 59%\n13        190         39         -151            -79.47368       -80% to -71%\n14         65         50          -15            -23.07692       -30% to -21%\n15        125        260          135            108.00000               &lt;NA&gt;\n\n\n\n\nCode\n# Load required libraries\nlibrary(ggplot2)\n\n# Create a scatter plot to visualize the relationship between Minimum Nights Change and Price Change\nggplot(top_50_min_nights_increase, aes(x = `Min Nights Change`, y = `Price_Change`, color = `Price_Change`, size = `Price_Change`)) +\n  geom_point() +\n  scale_size_continuous(range = c(3, 10)) +  # Adjust the size range for better visibility\n  scale_color_gradientn(colors = c(\"blue\", \"red\")) +  # Coolwarm color palette approximation\n  labs(\n    title = \"Relationship Between Minimum Nights Change and Price Change\",\n    x = \"Change in Minimum Nights\",\n    y = \"Price Change (Monetary)\",\n    color = \"Price Change (%)\",\n    size = \"Price Change (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")  # Adjust legend position\n\n\n\n\n\n\n\n\n\n\n\nIn this analysis, we selected the top 20 listings with the greatest increase in length of stay. As expected, most of the listings show a $0 change or a decrease in price."
  },
  {
    "objectID": "FinalReport.html#no.-reviews-and-reviews-per-month-change-from-2019-to-2023",
    "href": "FinalReport.html#no.-reviews-and-reviews-per-month-change-from-2019-to-2023",
    "title": "Final Report: Listing Legends",
    "section": "No. Reviews and Reviews per Month Change from 2019 to 2023",
    "text": "No. Reviews and Reviews per Month Change from 2019 to 2023\n\n\n\nCode\n# Ensure necessary libraries are loaded\nlibrary(dplyr)\n\n# Remove duplicates by Host ID in both 2019 and 2023 data frames\ndf_2019_unique &lt;- df_2019 %&gt;% distinct(`Host ID`, .keep_all = TRUE)\ndf_2023_unique &lt;- df_2023 %&gt;% distinct(`Host ID`, .keep_all = TRUE)\n\n# Add 'No. Reviews' and 'Reviews/Month' from df_2019 and df_2023 into merged_min_nights\nmerged_min_nights &lt;- merged_min_nights %&gt;%\n  left_join(df_2019_unique %&gt;%\n              select(`Host ID`, `No. Reviews`, `Reviews/Month`) %&gt;%\n              rename(`No. Reviews 2019` = `No. Reviews`, \n                     `Reviews/Month 2019` = `Reviews/Month`), \n            by = \"Host ID\") %&gt;%\n  left_join(df_2023_unique %&gt;%\n              select(`Host ID`, `No. Reviews`, `Reviews/Month`) %&gt;%\n              rename(`No. Reviews 2023` = `No. Reviews`, \n                     `Reviews/Month 2023` = `Reviews/Month`), \n            by = \"Host ID\")\n\nhead(merged_min_nights)\n\n\n  Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1    2438            45.0       45.000000          0.000000      0 to 10\n2    2571             9.0       14.000000          5.000000     10 to 20\n3    2787             1.0        5.142857          4.142857     10 to 20\n4    2845             1.0       22.333333         21.333333     30 to 40\n5    2868            29.0       30.000000          1.000000     10 to 20\n6    3647             3.5        5.000000          1.500000     10 to 20\n  Price_2019 Price_2023 Price_Change Price_Change_Percent Price_Change_Group\n1         95         95            0              0.00000        -10% to -1%\n2        182         99          -83            -45.60440       -50% to -41%\n3        149        199           50             33.55705         30% to 39%\n4        225        150          -75            -33.33333       -40% to -31%\n5         60         60            0              0.00000        -10% to -1%\n6         79        169           90            113.92405               &lt;NA&gt;\n  No. Reviews 2019 Reviews/Month 2019 No. Reviews 2023 Reviews/Month 2023\n1                1               0.06                1               0.02\n2               27               0.37               44               0.37\n3                9               0.21               42               0.49\n4               45               0.38               49               0.30\n5                2               0.06                2               0.03\n6               60               0.64               73               0.53\n\n\n\n\nCode\n# Calculate the change in No. Reviews and Reviews/Month between 2019 and 2023\nmerged_min_nights['No. Reviews Change'] = merged_min_nights['No. Reviews 2023'] - merged_min_nights['No. Reviews 2019']\nmerged_min_nights['Reviews/Month Change'] = merged_min_nights['Reviews/Month 2023'] - merged_min_nights['Reviews/Month 2019']\n\n# Optional: Calculate percentage change for No. Reviews and Reviews/Month\nmerged_min_nights['No. Reviews Change (%)'] = ((merged_min_nights['No. Reviews 2023'] - merged_min_nights['No. Reviews 2019']) / merged_min_nights['No. Reviews 2019']) * 100\nmerged_min_nights['Reviews/Month Change (%)'] = ((merged_min_nights['Reviews/Month 2023'] - merged_min_nights['Reviews/Month 2019']) / merged_min_nights['Reviews/Month 2019']) * 100\n\n# View the first few rows\nhead(merged_min_nights)\n\n\n  Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1    2438            45.0       45.000000          0.000000      0 to 10\n2    2571             9.0       14.000000          5.000000     10 to 20\n3    2787             1.0        5.142857          4.142857     10 to 20\n4    2845             1.0       22.333333         21.333333     30 to 40\n5    2868            29.0       30.000000          1.000000     10 to 20\n6    3647             3.5        5.000000          1.500000     10 to 20\n  Price_2019 Price_2023 Price_Change Price_Change_Percent Price_Change_Group\n1         95         95            0              0.00000        -10% to -1%\n2        182         99          -83            -45.60440       -50% to -41%\n3        149        199           50             33.55705         30% to 39%\n4        225        150          -75            -33.33333       -40% to -31%\n5         60         60            0              0.00000        -10% to -1%\n6         79        169           90            113.92405               &lt;NA&gt;\n  No. Reviews 2019 Reviews/Month 2019 No. Reviews 2023 Reviews/Month 2023\n1                1               0.06                1               0.02\n2               27               0.37               44               0.37\n3                9               0.21               42               0.49\n4               45               0.38               49               0.30\n5                2               0.06                2               0.03\n6               60               0.64               73               0.53\n  No. Reviews Change Reviews/Month Change No. Reviews Change (%)\n1                  0                -0.04               0.000000\n2                 17                 0.00              62.962963\n3                 33                 0.28             366.666667\n4                  4                -0.08               8.888889\n5                  0                -0.03               0.000000\n6                 13                -0.11              21.666667\n  Reviews/Month Change (%)\n1                -66.66667\n2                  0.00000\n3                133.33333\n4                -21.05263\n5                -50.00000\n6                -17.18750\n\n\n\n\nCode\n# Create the scatter plot\nggplot(merged_min_nights, aes(x = `Min Nights Change`, y = `No. Reviews Change`)) +\n  geom_point(color = \"blue\") +  # Plot points in blue\n  labs(\n    title = \"Scatter Plot of Minimum Nights Change vs Reviews Change\",\n    x = \"Minimum Nights Change\",\n    y = \"Review Change\"\n  ) +\n  theme_minimal()  # Use a minimal theme\n\n\n\n\n\n\n\n\n\n\n\nOur third approach is to compare and analyze the relationship between Minimum Nights Change and the number of reviews change to determine if there is a significant correlation suggesting that changes in minimum nights directly affect the number of reviews per listing. Most data points are concentrated around zero on both axes, indicating that many listings experienced minimal or no change in either variable."
  },
  {
    "objectID": "FinalReport.html#correlation-price-change-vs.-no.-reviews-minimum-nights-change",
    "href": "FinalReport.html#correlation-price-change-vs.-no.-reviews-minimum-nights-change",
    "title": "Final Report: Listing Legends",
    "section": "Correlation Price Change vs. No. Reviews & Minimum Nights Change",
    "text": "Correlation Price Change vs. No. Reviews & Minimum Nights Change\n\n\n\nCode\n# Get the top 20 listings with the highest increase in minimum nights\ntop_20_min_nights_increase &lt;- merged_min_nights %&gt;%\n  arrange(desc(`Min Nights Change`)) %&gt;%\n  head(20)\n\n# View the top 3 of the top 20\nhead(top_20_min_nights_increase, 3)\n\n\n    Host ID Min Nights 2019 Min Nights 2023 Min Nights Change Change Group\n1  19703783               2             100                98   100 to 110\n2   4331864               8             100                92   100 to 110\n3 165884816               2              91                89    90 to 100\n  Price_2019 Price_2023 Price_Change Price_Change_Percent Price_Change_Group\n1        160        445          285            178.12500               &lt;NA&gt;\n2        135         99          -36            -26.66667       -30% to -21%\n3        161        161            0              0.00000        -10% to -1%\n  No. Reviews 2019 Reviews/Month 2019 No. Reviews 2023 Reviews/Month 2023\n1                5               0.36                6               0.10\n2                7               0.14                8               0.09\n3               10               0.69               11               0.19\n  No. Reviews Change Reviews/Month Change No. Reviews Change (%)\n1                  1                -0.26               20.00000\n2                  1                -0.05               14.28571\n3                  1                -0.50               10.00000\n  Reviews/Month Change (%)\n1                -72.22222\n2                -35.71429\n3                -72.46377\n\n\n\n\nCode\n# Ensure necessary libraries are loaded\nlibrary(ggplot2)\nlibrary(reshape2)\n\n# Calculate the correlation matrix\ncorrelation_matrix &lt;- cor(merged_min_nights[, c('Min Nights Change', 'Price_Change', 'No. Reviews Change')])\n\n# Convert the correlation matrix to a long format for ggplot\ncorrelation_matrix_melted &lt;- melt(correlation_matrix)\n\n# Plot the correlation matrix heatmap\nggplot(correlation_matrix_melted, aes(Var1, Var2, fill = value)) +\n  geom_tile() +\n  geom_text(aes(label = sprintf(\"%.2f\", value)), color = \"white\", size = 5) +  # Add correlation values to tiles\n  scale_fill_gradient2(low = \"blue\", high = \"purple\", mid = \"orange\", midpoint = 0) +\n  labs(title = \"Correlation Between Minimum Nights Change, Price Change, and Reviews\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n\n\n\n\n\n\n\n\n\n\nIn conclusion, the change in the length of stay has had a notable impact on rental prices, particularly in 2023. As previously discussed, 50% of the listings increased their minimum nights requirement; however, these listings did not significantly raise their prices. Instead, many owners opted to keep prices stable or slightly reduce them, despite broader economic factors such as inflation and increased tourism. This suggests a strategic decision by owners to adopt a “low price” approach to attract more customers, likely in response to new Airbnb regulations and heightened consumer sensitivity to environmental and social challenges.\nOn the other hand, the change in the number of reviews showed only a slight increase in 2023 and did not appear to have a substantial impact on the minimum nights requirement. Ultimately, it is evident that price changes are more strongly influenced by adjustments in the Minimum Nights variable than by the number of reviews. This highlights the importance of length-of-stay policies as a key factor shaping Airbnb rental strategies in recent years."
  },
  {
    "objectID": "FinalReport.html#research-question",
    "href": "FinalReport.html#research-question",
    "title": "Final Report: Listing Legends",
    "section": "Research Question",
    "text": "Research Question\nHow do property characteristics (e.g., type of property, location, availability) or host reputation (e.g., reviews, amount of listings) influence Airbnb pricing in NYC, analyzing 2019 and 2023?"
  },
  {
    "objectID": "FinalReport.html#specific-questions",
    "href": "FinalReport.html#specific-questions",
    "title": "Final Report: Listing Legends",
    "section": "Specific Questions",
    "text": "Specific Questions\n\nHow do rental prices vary by neighborhood in New York City?\nWhat are the peak seasons for Airbnb bookings in NYC?\nDoes the walkability index of NYC affects the listing pricing?\nHow does the length of stay affect the overall reviews and price of a listing?\n\nWe aim to explore how property characteristics and host reputation influence Airbnb pricing in NYC, comparing data from 2019 and 2023. Our research will address how rental prices vary by neighborhood, peak booking seasons, the impact of walkability on pricing, and how length of stay affects reviews and pricing. This will provide insights to help hosts optimize their listings and pricing strategies."
  },
  {
    "objectID": "FinalReport.html#data-sources",
    "href": "FinalReport.html#data-sources",
    "title": "Final Report: Listing Legends",
    "section": "Data Sources",
    "text": "Data Sources\n\nData sets from Kaggle:\n\nNew York City Airbnb Open Data\nNew York City Airbnb 2023, Public Data\n\nData from StreetEasy:\n\nMedian Asking Rent per Borough in NYC\n\nData set from the US Environment Protection Agency:\n\nWalkability Index\n\nArticle from Airbnb Newsroom:\n\nNYC’s rules one year later: Higher prices for travelers, no housing impact\n\nArticle from The City Newsroom:\n\nCan I Legally Stay in an NYC Airbnb? Here’s How the New Registration System Will Work"
  },
  {
    "objectID": "FinalReport.html#hypothesis",
    "href": "FinalReport.html#hypothesis",
    "title": "Final Report: Listing Legends",
    "section": "Hypothesis",
    "text": "Hypothesis\nWalkability significantly influences Airbnb pricing in New York City."
  },
  {
    "objectID": "FinalReport.html#predictions",
    "href": "FinalReport.html#predictions",
    "title": "Final Report: Listing Legends",
    "section": "Predictions",
    "text": "Predictions\n\nHigher Walkability, Higher Prices: Listings in highly walkable neighborhoods are expected to have higher nightly rates due to convenience and urban amenities.\nConsumer Preference: Travelers likely prefer walkable areas, linking walkability to booking rates and price tolerance."
  },
  {
    "objectID": "FinalReport.html#objective",
    "href": "FinalReport.html#objective",
    "title": "Final Report: Listing Legends",
    "section": "Objective",
    "text": "Objective\n\nData Analysis: Analyze Airbnb listings (price, location) alongside walkability scores.\nCorrelation Assessment: Use statistical methods to evaluate the relationship between walkability and pricing.\nImplications:\n\nFor Hosts: Optimize pricing using walkability insights.\nFor Travelers: Understand walkability’s impact on accommodation choices and budgets in NYC."
  },
  {
    "objectID": "FinalReport.html#libraries",
    "href": "FinalReport.html#libraries",
    "title": "Final Report: Listing Legends",
    "section": "Libraries",
    "text": "Libraries\n\n\nShow the code\nlibrary(dplyr)       # Data manipulation\nlibrary(sf)          # Handling spatial data\nlibrary(geosphere)   # Geospatial calculations\nlibrary(httr)        # HTTP requests\nlibrary(tigris)      # Census and geographic data\nlibrary(ggplot2)     # Visualization\nlibrary(leaflet)     # Interactive mapping\nlibrary(gt)          # Table formatting"
  },
  {
    "objectID": "FinalReport.html#cleaning-and-processing-the-airbn-data-sets",
    "href": "FinalReport.html#cleaning-and-processing-the-airbn-data-sets",
    "title": "Final Report: Listing Legends",
    "section": "Cleaning and processing the Airbn Data sets",
    "text": "Cleaning and processing the Airbn Data sets\n\n\nCode\n# Combine Airbnb datasets\nairbnb_combined &lt;- bind_rows(df_2019, df_2023)\n\n# Select only the necessary columns\nairbnb_cleaned &lt;- airbnb_combined |&gt;\n  select(neighbourhood_group, neighbourhood, latitude, longitude, room_type, price)\n\n# Filter rows to include only 'Entire home/apt' and 'Private room'\nairbnb_filtered &lt;- airbnb_cleaned |&gt;\n  filter(room_type %in% c(\"Private room\"))\n\n\nOur data set has the following columns: Rows: 89,893 Columns: 6"
  },
  {
    "objectID": "FinalReport.html#adding-spatial-features-to-airbnb-data",
    "href": "FinalReport.html#adding-spatial-features-to-airbnb-data",
    "title": "Final Report: Listing Legends",
    "section": "Adding Spatial Features to Airbnb Data",
    "text": "Adding Spatial Features to Airbnb Data\nTo incorporate geographic context into the Airbnb dataset, we:\n\nDownload Census Block Groups (CBGs): Use the tigris package to get New York State CBGs.\nPerform a Spatial Join: Map Airbnb latitude/longitude points to their corresponding CBGs.\nAdd GEOID: Assign each Airbnb entry a GEOID, aligning with the Walkability Index’s GEOID20 for seamless merging.\n\nThis enhances the Airbnb dataset with geographic information for further analysis.\n\n\nCode\n# Download Census Block Groups for New York State\nny_block_groups &lt;- block_groups(state = \"NY\", year = 2020, cb = TRUE)\n\n# Check if CRS is undefined\nif (is.na(st_crs(ny_block_groups))) {\n  stop(\"CRS for ny_block_groups is undefined. Define it before proceeding.\")\n}\n\n# Assign WGS84 CRS to airbnb_filtered if it uses lat/lon\nif (is.na(st_crs(airbnb_filtered))) {\n  airbnb_sf &lt;- st_as_sf(airbnb_filtered, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n} else {\n  airbnb_sf &lt;- st_as_sf(airbnb_filtered, coords = c(\"longitude\", \"latitude\"))\n}\n\n# Transform CRS of airbnb_sf to match ny_block_groups if necessary\nif (!st_crs(airbnb_sf)$epsg == st_crs(ny_block_groups)$epsg) {\n  airbnb_sf &lt;- st_transform(airbnb_sf, crs = st_crs(ny_block_groups))\n}\n\n# Perform spatial join to associate attributes\nairbnb_with_block &lt;- st_join(airbnb_sf, ny_block_groups, join = st_within)\n\n# Replace point geometries with the corresponding block group geometries\nairbnb_with_block$geometry &lt;- ny_block_groups$geometry[match(\n  airbnb_with_block$GEOID, ny_block_groups$GEOID\n)]\n\n#Now we proceed to merge the walkability index data with the airbnb data set.\n\n# Step 1: Remove `sf` class from walkability\nwalkability_no_sf &lt;- st_drop_geometry(walkability)\n\n# Step 2: Perform attribute join\nairbnb_with_walkability &lt;- airbnb_with_block |&gt;\n  left_join(walkability_no_sf, by = c(\"GEOID\" = \"GEOID20\"))"
  },
  {
    "objectID": "FinalReport.html#key-findings",
    "href": "FinalReport.html#key-findings",
    "title": "Final Report: Listing Legends",
    "section": "Key Findings",
    "text": "Key Findings\n\nIntercept (67.775):\n\nRepresents the expected average price when the Walkability Index is zero.\nStatistically significant (P = 0.000) but not practically relevant since Walkability Index values rarely reach zero.\n\nWalkability Index (0.330):\n\nFor each one-unit increase in the Walkability Index, the average price rises by $0.33.\nStatistically significant (P = 0.016) but with a small effect size.\n\nR-Squared (0.001):\n\nIndicates only 0.1% of price variation is explained by the Walkability Index.\nSuggests the Walkability Index is a weak predictor, with other factors likely driving price variations."
  },
  {
    "objectID": "FinalReport.html#insights",
    "href": "FinalReport.html#insights",
    "title": "Final Report: Listing Legends",
    "section": "Insights",
    "text": "Insights\n\nWhile walkability has a statistically significant effect, its impact on Airbnb pricing is small.\nOther factors, such as neighborhood features, amenities, and room size, are likely more influential.\nFurther analysis incorporating additional variables is recommended to better understand the determinants of Airbnb pricing."
  },
  {
    "objectID": "FinalReport.html#data-sources-1",
    "href": "FinalReport.html#data-sources-1",
    "title": "Final Report: Listing Legends",
    "section": "Data Sources",
    "text": "Data Sources\n\n\nShow the code\ndf_2019 &lt;- read.csv(\"AB_NYC_2019.csv\", header = TRUE, sep = \",\", stringsAsFactors = FALSE)\ndf_2023&lt;- read.csv(\"NYC-Airbnb-2023.csv\", header = TRUE, sep = \",\", stringsAsFactors = FALSE)\n\n\nNow we proceed to download the Walkability Index data from the EPA API.\nThe documentation for the API can be found here. The following code would help you download the data from the API."
  },
  {
    "objectID": "FinalReport.html#combining-the-datasets",
    "href": "FinalReport.html#combining-the-datasets",
    "title": "Final Report: Listing Legends",
    "section": "Combining the Datasets",
    "text": "Combining the Datasets\nNow that we have the necessary data sets, we can proceed to combine them for further analysis. We will first clean and process the data before merging them based on the geographical information.\nFirst we would combine, the airbnb data sets."
  },
  {
    "objectID": "FinalReport.html#cleaning-the-dataset-and-handling-missing-values",
    "href": "FinalReport.html#cleaning-the-dataset-and-handling-missing-values",
    "title": "Final Report: Listing Legends",
    "section": "Cleaning the Dataset and Handling Missing Values",
    "text": "Cleaning the Dataset and Handling Missing Values\nNow that we have combined the datasets, we need to clean the data and handle any missing values before proceeding with the analysis.We also need to eliminate the outliers from the dataset to have a better visualization of the data.\nAfter elimitating the outliers, we have the following visual.\n\n\nCode\n# Step 3: Select and clean necessary columns\nairbnb_cleaned &lt;- airbnb_with_walkability |&gt;\n  select(neighbourhood_group, neighbourhood, room_type, price, GEOID, NatWalkInd) |&gt; # Select relevant columns\n  filter(!is.na(price) & !is.na(NatWalkInd))  # Remove rows with missing price or walkability index\n\n\n#Outliers\n# Define the IQR-based outlier threshold function\noutlier_threshold &lt;- function(x) {\n  Q1 &lt;- quantile(x, 0.25, na.rm = TRUE)\n  Q3 &lt;- quantile(x, 0.75, na.rm = TRUE)\n  IQR &lt;- Q3 - Q1\n  lower &lt;- Q1 - 1.5 * IQR\n  upper &lt;- Q3 + 1.5 * IQR\n  return(list(lower = lower, upper = upper))\n}\n\n# Apply the function to identify outlier thresholds\nthresholds &lt;- outlier_threshold(airbnb_cleaned$price)\n\n# Add a column identifying outliers\nairbnb_cleaned &lt;- airbnb_cleaned |&gt;\n  mutate(\n    is_outlier = price &lt; thresholds$lower | price &gt; thresholds$upper\n  )\n\n# Count the number of outliers\nnum_outliers &lt;- sum(airbnb_cleaned$is_outlier, na.rm = TRUE)\n\n# Remove outliers\nairbnb_cleaned_no_outliers &lt;- airbnb_cleaned |&gt;\n  filter(!is_outlier)\n\n# Enhanced histogram with removed outliers annotation\nggplot(airbnb_cleaned, aes(x = price, fill = is_outlier)) +\n  geom_histogram(binwidth = 10, color = \"black\", alpha = 0.7, position = \"identity\") +\n  scale_fill_manual(values = c(\"FALSE\" = \"gray\", \"TRUE\" = \"red\")) +\n  labs(\n    title = \"Airbnb Price Distribution with Outliers Highlighted\",\n    x = \"Price\",\n    y = \"Count\",\n    fill = \"Outlier\"\n  ) +\n  theme_minimal() +\n  xlim(0, quantile(airbnb_cleaned$price, 0.99, na.rm = TRUE)) +  # Optional: Limit x-axis\n  annotate(\n    \"text\",\n    x = quantile(airbnb_cleaned$price, 0.75, na.rm = TRUE),  # Position annotation\n    y = max(table(cut(airbnb_cleaned$price, seq(0, max(airbnb_cleaned$price, na.rm = TRUE), 10)))),\n    label = paste(num_outliers, \"Outliers Removed\"),\n    color = \"red\",\n    size = 5,\n    hjust = 0\n  )"
  },
  {
    "objectID": "FinalReport.html#average-price-by-census-block-group",
    "href": "FinalReport.html#average-price-by-census-block-group",
    "title": "Final Report: Listing Legends",
    "section": "Average Price by Census Block Group",
    "text": "Average Price by Census Block Group\nWe will calculate the average price of private rooms by Census Block Group (CBG) to visualize the distribution of Airbnb prices across different neighborhoods in New York City. Each CBG will be represented by its average price and Walkability Index."
  },
  {
    "objectID": "FinalReport.html#visualizing-the-average-price-distribution",
    "href": "FinalReport.html#visualizing-the-average-price-distribution",
    "title": "Final Report: Listing Legends",
    "section": "Visualizing the Average Price Distribution",
    "text": "Visualizing the Average Price Distribution\n\n\nCode\n# Create a color palette for the heatmap\npal &lt;- colorNumeric(\n  palette = \"YlOrRd\",  # Choose a heatmap color palette\n  domain = ny_block_groups_with_price$avg_price,  # Domain of average prices\n  na.color = \"transparent\"  # Handle missing values\n)\n\n# Create the Leaflet map with a heatmap-like color gradient\nleaflet(data = ny_block_groups_with_price) |&gt;\n  addTiles() |&gt;  # Add default OpenStreetMap tiles\n  addPolygons(\n    fillColor = ~pal(avg_price),  # Use color palette for the fill color\n    color = \"black\",              # Border color\n    weight = 1,                   # Border weight\n    fillOpacity = 0.7,            # Transparency for the fill\n    popup = ~paste0(\n      \"GEOID: \", GEOID, \"&lt;br&gt;\",\n      \"Average Price: $\", round(avg_price, 2)\n    )\n  ) |&gt;\n  addLegend(\n    pal = pal, values = ny_block_groups_with_price$avg_price,\n    position = \"bottomright\",\n    title = \"Average Price\",\n    opacity = 1\n  ) |&gt;\n  setView(lng = -73.935242, lat = 40.730610, zoom = 12)  # Center on NYC"
  },
  {
    "objectID": "FinalReport.html#walkabilty-index-visualization",
    "href": "FinalReport.html#walkabilty-index-visualization",
    "title": "Final Report: Listing Legends",
    "section": "Walkabilty index Visualization",
    "text": "Walkabilty index Visualization\nNow we would create a heatmap to visualize the Walkability Index across different neighborhoods in New York City.\n\n\nCode\n# Create a color palette for the heatmap\npal &lt;- colorNumeric(\n  palette = \"Greens\",  # Green color palette\n  domain = ny_block_groups_with_price$avg_NatWalkInd,  # Domain of average prices\n  na.color = \"transparent\"  # Handle missing values\n)\n# Create the Leaflet map with a heatmap-like color gradient\nleaflet(data = ny_block_groups_with_price) |&gt;\n  addTiles() |&gt;  # Add default OpenStreetMap tiles\n  addPolygons(\n    fillColor = ~pal(avg_NatWalkInd),  # Use color palette for the fill color\n    color = \"black\",              # Border color\n    weight = 1,                   # Border weight\n    fillOpacity = 0.7,            # Transparency for the fill\n    popup = ~paste0(\n      \"GEOID: \", GEOID, \"&lt;br&gt;\",\n      \"Walkability Index\", round(avg_NatWalkInd, 2)\n    )\n  ) |&gt;\n  addLegend(\n    pal = pal, values = ny_block_groups_with_price$avg_NatWalkInd,\n    position = \"bottomright\",\n    title = \"Walkability Index\",\n    opacity = 1\n  ) |&gt;\n  setView(lng = -73.935242, lat = 40.730610, zoom = 12)  # Center on NYC\n\n\n\n\n\n\nAfter visualizing the data, we can proceed to the linear regression analysis to determine the relationship between walkability and Airbnb pricing."
  },
  {
    "objectID": "FinalReport.html#linear-regression-analysis",
    "href": "FinalReport.html#linear-regression-analysis",
    "title": "Final Report: Listing Legends",
    "section": "Linear Regression Analysis",
    "text": "Linear Regression Analysis\n\n\nCode\n# Fit a linear regression model with only walkability\nmodel_walkability &lt;- lm(avg_price ~ avg_NatWalkInd, data = private_room_avg_price)\n\n# Extract model summary\nsummary_output &lt;- summary(model_walkability)\n\n# Extract coefficients and relevant values\ncoefficients &lt;- summary_output$coefficients\ncoefficients_df &lt;- data.frame(\n  Predictor = rownames(coefficients),\n  Coefficient = coefficients[, \"Estimate\"],\n  PValue = coefficients[, \"Pr(&gt;|t|)\"]\n)\n\n# Add R-squared and adjusted R-squared as additional rows\ncoefficients_df &lt;- rbind(\n  coefficients_df,\n  data.frame(Predictor = \"R-Squared\", Coefficient = summary_output$r.squared, PValue = NA)\n  )\n# Update the label for walkability in the Predictor column\ncoefficients_df$Predictor &lt;- gsub(\"avg_NatWalkInd\", \"Walkability Index\", coefficients_df$Predictor)\n\n# Create a summary table using gt\nsummary_table &lt;- gt(coefficients_df) |&gt;\n  gt::tab_header(\n    title = \"Walkability Model Summary\"\n  ) |&gt;\n  gt::cols_label(\n    Predictor = \"Predictor\",\n    Coefficient = \"Coefficient\",\n    PValue = \"P-Value\"\n  ) |&gt;\n  gt::fmt_number(\n    columns = c(Coefficient, PValue),\n    decimals = 3\n  ) |&gt;\n  gt::cols_align(\n    align = \"center\",\n    columns = everything()\n  )\n\n# Print the table\nsummary_table\n\n\n\n\n\n\n\n\nWalkability Model Summary\n\n\nPredictor\nCoefficient\nP-Value\n\n\n\n\n(Intercept)\n67.775\n0.000\n\n\nWalkability Index\n0.330\n0.016\n\n\nR-Squared\n0.001\nNA"
  },
  {
    "objectID": "FinalReport.html#walkability-model-summary",
    "href": "FinalReport.html#walkability-model-summary",
    "title": "Final Report: Listing Legends",
    "section": "Walkability Model Summary",
    "text": "Walkability Model Summary\nThis table summarizes a linear regression analysis of the relationship between the Walkability Index and Airbnb private room prices:"
  }
]