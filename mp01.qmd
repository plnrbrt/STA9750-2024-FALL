---
title: "Mini Project 1"
format:
  html:
    css: styles.css
---

# Introduction

This mini project walks you through how to prepare, clean, and analyze data. The project will be followed by a report on the subject analyzed.

We are going to analyze the fiscal characteristics of major US public transit systems using data from the National Transit Database. The goal is to understand farebox recovery rates, analyze ridership, and examine the financial efficiency of various transit systems.

We will use data from the [National Transit Database](https://www.transit.dot.gov/ntd)
 as our primary source. In particular, since we want to analyze farebox revenues, total number of trips, total number of vehicle miles traveled, and total revenues and expenses by source, we will need to analyze several different tables:

- The [2022 Fare Revenue](https://www.transit.dot.gov/ntd/data-product/2022-annual-database-fare-revenues) table
- The latest [Monthly Ridership](https://www.transit.dot.gov/ntd/data-product/monthly-module-adjusted-data-release) tables
- The [2022 Operating Expenses](https://www.transit.dot.gov/ntd/data-product/2022-operating-expenses) reports

Let's start by cleaning the data.

## Data Preparation
The following code will download, clean, and join the tables. 
```{r}
# Load required libraries
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("readxl")) install.packages("readxl")
if(!require("DT")) install.packages("DT")

library(tidyverse)
library(readxl)
library(readr)
library(lubridate)
library(DT)

# Let's start with Fare Revenue
library(tidyverse)
if(!file.exists("2022_fare_revenue.xlsx")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "2022_fare_revenue.xlsx" in your project
    # directory.
    download.file("http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx", 
                  destfile="2022_fare_revenue.xlsx", 
                  quiet=FALSE, 
                  method="wget")
}
FARES <- readxl::read_xlsx("2022_fare_revenue.xlsx") |>
    select(-`State/Parent NTD ID`, 
           -`Reporter Type`,
           -`Reporting Module`,
           -`TOS`,
           -`Passenger Paid Fares`,
           -`Organization Paid Fares`) |>
    filter(`Expense Type` == "Funds Earned During Period") |>
    select(-`Expense Type`) |>
    group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`
             `Agency Name`,  # These are direct operated and sub-contracted 
             `Mode`) |>      # of the same transit modality
                             # Not a big effect in most munis (significant DO
                             # tends to get rid of sub-contractors), but we'll sum
                             # to unify different passenger experiences
    summarize(`Total Fares` = sum(`Total Fares`)) |>
    ungroup()

# Next, expenses
if(!file.exists("2022_expenses.csv")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "2022_expenses.csv" in your project
    # directory.
    download.file("https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true", 
                  destfile="2022_expenses.csv", 
                  quiet=FALSE, 
                  method="wget")
}
EXPENSES <- readr::read_csv("2022_expenses.csv") |>
    select(`NTD ID`, 
           `Agency`,
           `Total`, 
           `Mode`) |>
    mutate(`NTD ID` = as.integer(`NTD ID`)) |>
    rename(Expenses = Total) |>
    group_by(`NTD ID`, `Mode`) |>
    summarize(Expenses = sum(Expenses)) |>
    ungroup()

FINANCIALS <- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))
```
Finally, let’s extract monthly transit numbers:
```{r}
# Monthly Transit Numbers
library(tidyverse)
if(!file.exists("ridership.xlsx")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "ridership.xlsx" in your project
    # directory.
    download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx", 
                  destfile="ridership.xlsx", 
                  quiet=FALSE, 
                  method="wget")
}
TRIPS <- readxl::read_xlsx("ridership.xlsx", sheet="UPT") |>
            filter(`Mode/Type of Service Status` == "Active") |>
            select(-`Legacy NTD ID`, 
                   -`Reporter Type`, 
                   -`Mode/Type of Service Status`, 
                   -`UACE CD`, 
                   -`TOS`) |>
            pivot_longer(-c(`NTD ID`:`3 Mode`), 
                            names_to="month", 
                            values_to="UPT") |>
            drop_na() |>
            mutate(month=my(month)) # Parse _m_onth _y_ear date specs
MILES <- readxl::read_xlsx("ridership.xlsx", sheet="VRM") |>
            filter(`Mode/Type of Service Status` == "Active") |>
            select(-`Legacy NTD ID`, 
                   -`Reporter Type`, 
                   -`Mode/Type of Service Status`, 
                   -`UACE CD`, 
                   -`TOS`) |>
            pivot_longer(-c(`NTD ID`:`3 Mode`), 
                            names_to="month", 
                            values_to="VRM") |>
            drop_na() |>
            group_by(`NTD ID`, `Agency`, `UZA Name`, 
                     `Mode`, `3 Mode`, month) |>
            summarize(VRM = sum(VRM)) |>
            ungroup() |>
            mutate(month=my(month)) # Parse _m_onth _y_ear date specs

USAGE <- inner_join(TRIPS, MILES) |>
    mutate(`NTD ID` = as.integer(`NTD ID`))
```
This creates a table as follows:
```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()
```
### Task 1 - Creating Syntatic Names

The following code will rename the column 'UZA Name' to 'metro_area'. Because it has no spaces in it, this name will be easier to manipulate in code. 
```{r}
USAGE <- USAGE |>
  rename(metro_area = `UZA Name`)
```
### Task 2: Recoding the Mode column
The 'Mode' column is also helpful, but it uses a set of codes that aren’t interpretable. To make life easier for ourselves, let’s use a case_when statement to transform this into something we can make sense of.

First, let's find the unique 'Mode' codes in our data using the distinct function. After examining the NTD website and finding the interpretations of these codes, we can complete the following snippet to recode the 'Mode' column.
```{r}
# Find unique Mode codes in the USAGE table
distinct(USAGE, Mode)
```

```{r}
USAGE <- USAGE |>
  mutate(Mode = case_when(
    Mode == "HR" ~ "Heavy Rail",       # HR: Heavy Rail
    Mode == "LR" ~ "Light Rail",        # LR: Light Rail
    Mode == "MB" ~ "Bus",               # MB: Bus (Motor Bus)
    Mode == "CR" ~ "Commuter Rail",     # CR: Commuter Rail
    Mode == "DR" ~ "Demand Response",   # DR: Demand Response
    Mode == "VP" ~ "Vanpool",           # VP: Vanpool
    Mode == "AR" ~ "Alaska Railroad",   # AR: Alaska Railroad
    Mode == "RB" ~ "Bus Rapid Transit", # RB: Bus Rapid Transit
    Mode == "FB" ~ "Ferryboat",       # FB: Ferryboat
    Mode == "SR" ~ "Streetcar Rail",       # SR: Streetcar Rail
    Mode == "TB" ~ "Trolleybus",       # TB: Trolleybus
    Mode == "CB" ~ "Commuter Bus",       # CB: Commuter Bus
    Mode == "YR" ~ "Hybrid Rail",       # YR: Hybrid Rail
    Mode == "MG" ~ "Monorail and Automated Guideway modes",  # MG: Monorail and Automated Guideway modes
    Mode == "TR" ~ "Aerial Tramway",       # TR: Aerial Tramway
    Mode == "IP" ~ "Inclined Plane",       # IP: Inclined Plane
    Mode == "PB" ~ "Publico",       # PB: Publico
    Mode == "CC" ~ "Cable Car",       # CC: Cable Car
    TRUE ~ "Unknown"                    # Any other mode
  ))
```
Now that the data is clean, we can create an attractive summary table of the cleaned up USAGE table using the following snippet:
```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()
```
## Data Analysis

Now let's analyse our data. 

### Task 3: Answering Specified Questions with dplyr
Using functions filter, group_by, summarize, arrange, we are going to answer the following questions for our analysis with the following codes:

1. What transit agency had the most total VRM in our data set?
```{r}
# Load necessary libraries
library(dplyr)
library(knitr)
# Calculate total VRM by agency and find the agency with the most total VRM
agency_most_vrm <- USAGE |>
  group_by(Agency) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1)  # Get the top agency
# Display the result in a table
kable(agency_most_vrm, caption = "Transit Agency with Most Total VRM")
```
The transit agency that had the most total VRM in our data set is the MTA New York City Transit, which reported a total of 10,832,855,350 VRM.

2. What transit mode had the most total VRM in our data set?
```{r}
mode_most_vrm <- USAGE |>
  group_by(Mode) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1)  # Get the top mode

kable(mode_most_vrm, caption = "Transit Mode with Most Total VRM")
```
The transit mode that had the most total VRM in our data set is the Bus with a total of 49,444,494,088 VRM.

3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?
```{r}
# Filter for Heavy Rail in NYC for May 2024
NYC_Subway_trip_may_24 <- USAGE %>%
  mutate(month = format(ymd(month), "%Y-%m")) %>% 
  filter(Mode == "Heavy Rail", 
         Agency == "MTA New York City Transit",  
         month == "2024-05") %>%  
  summarize(total_trip = sum(UPT, na.rm = TRUE)) 

kable(NYC_Subway_trip_may_24, caption = "Total Heavy Rail Trips in NYC for May 2024")
```
In May 2024, 180,458,819 trips were taken on the NYC Subway (Heavy Rail).

4. How much did NYC subway ridership fall between April 2019 and April 2020?
```{r}
# NYC Heavy Rail ridership for April 2019
nyc_ridership_2019 <- USAGE |>
  filter(metro_area == "New York--Jersey City--Newark, NY--NJ", Mode == "Heavy Rail", month == "2019-04-01") |>
  summarise(nyc_sub_2019 = sum(UPT, na.rm = TRUE))

# NYC Heavy Rail ridership for April 2020
nyc_ridership_2020 <- USAGE |>
  filter(metro_area == "New York--Jersey City--Newark, NY--NJ", Mode == "Heavy Rail", month == "2020-04-01") |>
  summarise(nyc_subway_ridership_fall = sum(UPT, na.rm = TRUE))

# Calculate the percentage change in ridership
nyc_ridership <- ((nyc_ridership_2020$nyc_subway_ridership_fall - nyc_ridership_2019$nyc_sub_2019) / nyc_ridership_2019$nyc_sub_2019) * 100

# Combine results into a data frame for display
results <- data.frame(
  Year = c("April 2019", "April 2020", "Percentage Change"),
  UPT = c(nyc_ridership_2019$nyc_sub_2019, nyc_ridership_2020$nyc_subway_ridership_fall, nyc_ridership)
)

kable(results, caption = "NYC Heavy Rail Ridership Comparison for April 2019 and April 2020")
```
Here our results show us that the NYC Subway ridership went from 240,655,437 in April 2019 to 20,704,824 in April 2020.Our last piece of the code informs us that this represent a 91% ridership fall between April 2019 and April 2020.

### Task 4: Explore and Analyze

1. Find the city with the most trips in a single month.
```{r}
# Calculate the highest total UPT by metro area and month
highest_upt <- USAGE |> 
  group_by(metro_area, month) |> 
  summarize(total_UPT = sum(UPT, na.rm = TRUE), .groups = 'drop') |> 
  slice_max(total_UPT, n = 1)  # Get the highest total UPT for each metro area and month

kable(highest_upt, caption = "Metro Area and Month with the Highest Total UPT")
```
2. Which agency has the most extensive bus network based on VRM?
```{r}
# Calculate the agency with the highest total VRM for Motor Bus
highest_vrm_motor_bus <- USAGE |> 
  filter(Mode == "Bus") |>
  group_by(Agency) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1)

kable(highest_vrm_motor_bus, caption = "Agency with the Highest Total VRM for Motor Bus")
```
3. How did overall ridership change over time from 2022 to 2024?
```{r}
# Calculate the total UPT by year
annual_upt <- USAGE |> 
  group_by(year = year(month)) |> 
  summarize(total_UPT = sum(UPT, na.rm = TRUE)) |> 
  arrange(year)

kable(annual_upt, caption = "Total UPT by Year")
```
### Task 5: Table Summarization
Create a new table from USAGE that has annual total (sum) UPT and VRM for 2022. This will require use of the group_by, summarize, and filter functions. You will also want to use the year function, to extract a year from the month column.

The resulting table should have the following columns:

NTD ID
Agency
metro_area
Mode
UPT
VRM
Make sure to ungroup your table after creating it.

We will name this table USAGE_2022_ANNUAL.
```{r}
USAGE_2022_ANNUAL <- USAGE |>
  filter(year(month) == 2022) |>
  group_by(`NTD ID`, Agency, `metro_area`, Mode) |>
  summarize(
    UPT = sum(UPT, na.rm = TRUE),
    VRM = sum(VRM, na.rm = TRUE)
  ) %>%
  ungroup()
USAGE_2022_ANNUAL
```
Once we have created this new table, we can merge it to the FINANCIALS data but first we need to make sure they have the same "mode" refrence names with the following code:
```{r}
FINANCIALS <- FINANCIALS |>
  mutate(Mode = case_when(
    Mode == "HR" ~ "Heavy Rail",       # HR: Heavy Rail
    Mode == "LR" ~ "Light Rail",        # LR: Light Rail
    Mode == "MB" ~ "Bus",               # MB: Bus (Motor Bus)
    Mode == "CR" ~ "Commuter Rail",     # CR: Commuter Rail
    Mode == "DR" ~ "Demand Response",   # DR: Demand Response
    Mode == "VP" ~ "Vanpool",           # VP: Vanpool
    Mode == "AR" ~ "Alaska Railroad",   # AR: Alaska Railroad
    Mode == "RB" ~ "Bus Rapid Transit", # RB: Bus Rapid Transit
    Mode == "FB" ~ "Ferryboat",       # FB: Ferryboat
    Mode == "SR" ~ "Streetcar Rail",       # SR: Streetcar Rail
    Mode == "TB" ~ "Trolleybus",       # TB: Trolleybus
    Mode == "CB" ~ "Commuter Bus",       # CB: Commuter Bus
    Mode == "YR" ~ "Hybrid Rail",       # YR: Hybrid Rail
    Mode == "MG" ~ "Monorail and Automated Guideway modes",  # MG: Monorail and Automated Guideway modes
    Mode == "TR" ~ "Aerial Tramway",       # TR: Aerial Tramway
    Mode == "IP" ~ "Inclined Plane",       # IP: Inclined Plane
    Mode == "PB" ~ "Publico",       # PB: Publico
    Mode == "CC" ~ "Cable Car",       # CC: Cable Car
    TRUE ~ "Unknown"                    # Any other mode
  ))
```
Once we have made sure that USAGE_2022_ANNUAL and FINANCIALS have the same value for "mode", we can merge USAGE_2022_ANNUAL to the FINANCIALS data as follows:
```{r}
USAGE_AND_FINANCIALS <- left_join(USAGE_2022_ANNUAL, 
           FINANCIALS, 
           join_by(`NTD ID`, Mode)) |>
    drop_na()
USAGE_AND_FINANCIALS |>
      DT::datatable()
```
### Task 6: Farebox Recovery Among Major Systems
Using the USAGE_AND_FINANCIALS table,  we are going to try to answer the following questions:

- Which transit system (agency and mode) had the most UPT in 2022?
- Which transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of - Total Fares to Expenses?
- Which transit system (agency and mode) has the lowest expenses per UPT?
- Which transit system (agency and mode) has the highest total fares per UPT?
- Which transit system (agency and mode) has the lowest expenses per VRM?
- Which transit system (agency and mode) has the highest total fares per VRM?

We will restrict our answers to major transit systems by defining them as those with 400,000 UPT per annum.

To answer these questions, we'll need to perform the following steps using the USAGE_AND_FINANCIALS table:

1. Which transit system (agency and mode) had the most UPT in 2022?

```{r}
# Find the transit system with the most UPT in 2022
library(dplyr)
library(knitr)
max_upt <- USAGE_AND_FINANCIALS %>%
  filter(UPT >= 400000) %>%
  arrange(desc(UPT)) %>%
  slice(1) %>%
  select(Agency, Mode, UPT)
kable(max_upt, caption = "Transit System with Most UPT in 2022")
```
The answer shows us that the MTA New York City Transit is the transit system that had the most UTP with more than 1.79 billion of trips.

2. Which transit system (agency and mode) had the highest farebox recovery (Total Fares to Expenses ratio)?
```{r}
highest_farebox_recovery <- USAGE_AND_FINANCIALS |>
  group_by(Agency, Mode) |>
  summarize(
    total_fares = sum(`Total Fares`, na.rm = TRUE),
    total_expenses = sum(Expenses, na.rm = TRUE)
  ) |>
  mutate(farebox_recovery_ratio = total_fares / total_expenses) |>
  ungroup() |>
  arrange(desc(farebox_recovery_ratio)) |>
  slice_head(n = 1)
kable(highest_farebox_recovery, caption = "Transit System with Highest Farebox Recovery Ratio")
```
The Transit System with the highest recovery ratio is the Transit Authority of Central Kentuchy, with the Vanpool mode and a recovery ratio of $2.38 USD.

3.Which transit system (agency and mode) has the lowest expenses per UPT?
```{r}
lowest_expenses_per_upt <- USAGE_AND_FINANCIALS |>
  group_by(Agency, Mode) |>
  summarize(
    total_expenses = sum(Expenses, na.rm = TRUE),
    total_UPT = sum(UPT, na.rm = TRUE)
  ) |>
  filter(total_UPT >= 400000) |>
  mutate(expenses_per_UPT = total_expenses / total_UPT) |>
  ungroup() |>
  arrange(expenses_per_UPT) |>
  slice_head(n = 1)

kable(lowest_expenses_per_upt, caption = "Transit System with Lowest Expenses per UPT")
```
North Carolina State University is the agency with the lowest expenses per UPT with the Bus mode. The expenses per UPT is $1.18 USD.

4.Which transit system (agency and mode) has the highest total fares per UPT?
```{r}
highest_fares_per_upt <- USAGE_AND_FINANCIALS |>
  group_by(Agency, Mode) |>
  summarize(
    total_fares1 = sum(`Total Fares`, na.rm = TRUE),
    total_UPT = sum(UPT, na.rm = TRUE)
  ) |>
  mutate(total_fares_per_UPT = total_fares1 / total_UPT) |>
  ungroup() |>
  arrange(desc(total_fares_per_UPT)) |>
  slice_head(n = 1)

kable(highest_fares_per_upt, caption = "Transit System with Highest Total Fares per UPT")
```
The Altoona Metro Transit with the Demand Response mode had the highest total fares per UPT. With just 26 trips, it collected a total in fares of $17,058 USD with a fare of $660 USD per UPT.

5.Which transit system (agency and mode) has the lowest expenses per VRM?
```{r}
lowest_expenses_per_vrm <- USAGE_AND_FINANCIALS %>%
  filter(UPT >= 400000) %>%
  mutate(expenses_per_vrm = Expenses / VRM) %>%
  arrange(expenses_per_vrm) %>%
  slice(1) %>%
  select(Agency, Mode, expenses_per_vrm)

kable(lowest_expenses_per_vrm, caption = "Transit System with Lowest Expenses per VRM in 2022")
```
New Mexico Department of Transportation Vanpool mode has the lowest expense per VRM. Its fare per VRM is around 0.45.

6.Which transit system (agency and mode) has the highest total fares per VRM?
```{r}
highest_fares_per_VRM <- USAGE_AND_FINANCIALS %>%
  mutate(fares_per_VRM = `Total Fares` / VRM)  %>%  
  arrange(desc(fares_per_VRM)) %>%  
  slice_max(fares_per_VRM, n = 1) 

kable(highest_fares_per_VRM, caption = "Transit System with Highest Fares per VRM in 2022")
```
The transit system that has the highest total fares per VRM is the Ferryboat from Chicago Water Taxi (Wendella) with a total fare per VRM of $237 USD.

## Conclusion from the Mini Project 1 Analysis

This mini project provides several key insights into the fiscal characteristics, ridership, and operational efficiency of major U.S. public transit systems in 2022, based on data from the National Transit Database. Below are the major conclusions derived from each analysis:

1. Most Total Vehicle Revenue Miles (VRM)

Transit Agency: The MTA New York City Transit had the highest total Vehicle Revenue Miles (VRM) with over 10.8 billion VRM.
Transit Mode: Buses had the most total VRM, accumulating more than 49.4 billion VRM across agencies.
This indicates that the MTA operates the largest transit network in terms of vehicle miles, reflecting its role in serving a massive, densely populated area like New York City. Buses are crucial across transit systems, covering extensive distances.

2. Ridership Insights

NYC Subway Ridership: In May 2024, there were approximately 180 million trips taken on the NYC Subway (Heavy Rail), showing the continued importance of the subway in daily transportation.
Ridership Decline: NYC Subway ridership fell drastically between April 2019 and April 2020 by 91%, primarily due to the COVID-19 pandemic, reflecting the severe impact of external shocks like pandemics on public transit usage.
This emphasizes how ridership levels can be highly volatile in response to global events, such as health crises, with significant consequences for transit agencies' revenue and service planning.

3. Highest Ridership in a Single Month

Metro Area: New York–Jersey City–Newark, NY–NJ had the highest number of trips in a single month (October 2014), with nearly 396 million unlinked passenger trips (UPT).
This reinforces New York City’s dominance as the leading metropolitan area in the U.S. in terms of public transit usage, particularly for heavy rail and bus systems.

4. Bus Network Extent

Agency with Most Extensive Bus Network: New Jersey Transit Corporation had the most extensive bus network based on VRM, with over 3.78 billion VRM, reflecting its widespread service area and role in connecting commuters across state lines.

5. Ridership Trends (2022-2024)

Ridership saw a gradual recovery post-pandemic, with total UPT increasing from 6 billion in 2022 to nearly 7 billion in 2023. However, it significantly dropped again in 2024 to just over 4.18 billion, potentially indicating further external factors or a slow post-pandemic recovery.

6. Annual UPT and VRM for 2022

The analysis of UPT and VRM by transit mode and metro area in 2022 highlights regional differences in transit usage and network extent. For instance, King County (Seattle) had significant bus usage and VRM.

7. Farebox Recovery and Financial Efficiency

Highest Farebox Recovery: The Transit Authority of Central Kentucky had the highest farebox recovery ratio at 2.38, meaning the system collected more in fares than it spent on expenses (a rare occurrence in public transit).
Lowest Expenses per UPT: A yet-to-be-confirmed agency/mode from the final analysis had the lowest expenses per UPT, reflecting operational efficiency in terms of cost per passenger.
These insights into farebox recovery and financial efficiency help identify which systems are more sustainable and cost-effective, and which may require additional subsidies or fare increases to maintain financial stability.

# Overall Conclusion
The project underscores the critical role that public transit systems like the MTA and New Jersey Transit play in urban mobility, especially in large metropolitan areas like New York City. However, the data also reveals significant vulnerabilities, particularly in ridership declines during major events like the pandemic, which drastically impacted revenue generation.

The findings related to farebox recovery, VRM, and UPT offer insights into which transit systems are the most efficient and financially viable, with a focus on reducing operational expenses and optimizing fare collection to meet expenses.
