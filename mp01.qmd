---
title: "Mini Project 1"
format:
  html:
    css: styles.css
---

# Introduction

This mini project walks you through how to prepare, clean, and analyze data. The project will be followed by a report on the subject analywed.

We are going to analyze the fiscal characteristics of major US public transit systems using data from the National Transit Database. The goal is to understand farebox recovery rates, analyze ridership, and examine the financial efficiency of various transit systems.

We will use data from the [National Transit Database](https://www.transit.dot.gov/ntd)
 as our primary source. In particular, since we want to analyze farebox revenues, total number of trips, total number of vehicle miles traveled, and total revenues and expenses by source, we will need to analyze several different tables:

- The [2022 Fare Revenue](https://www.transit.dot.gov/ntd/data-product/2022-annual-database-fare-revenues) table
- The latest [Monthly Ridership](https://www.transit.dot.gov/ntd/data-product/monthly-module-adjusted-data-release) tables
- The [2022 Operating Expenses](https://www.transit.dot.gov/ntd/data-product/2022-operating-expenses) reports

Let's start by cleaning the data.

## Data Preparation
The following code will download, clean, and join the tables. 
```{r}
# Load required libraries
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("readxl")) install.packages("readxl")
if(!require("DT")) install.packages("DT")

library(tidyverse)
library(readxl)
library(readr)
library(lubridate)
library(DT)

# Let's start with Fare Revenue
library(tidyverse)
if(!file.exists("2022_fare_revenue.xlsx")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "2022_fare_revenue.xlsx" in your project
    # directory.
    download.file("http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx", 
                  destfile="2022_fare_revenue.xlsx", 
                  quiet=FALSE, 
                  method="wget")
}
FARES <- readxl::read_xlsx("2022_fare_revenue.xlsx") |>
    select(-`State/Parent NTD ID`, 
           -`Reporter Type`,
           -`Reporting Module`,
           -`TOS`,
           -`Passenger Paid Fares`,
           -`Organization Paid Fares`) |>
    filter(`Expense Type` == "Funds Earned During Period") |>
    select(-`Expense Type`) |>
    group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`
             `Agency Name`,  # These are direct operated and sub-contracted 
             `Mode`) |>      # of the same transit modality
                             # Not a big effect in most munis (significant DO
                             # tends to get rid of sub-contractors), but we'll sum
                             # to unify different passenger experiences
    summarize(`Total Fares` = sum(`Total Fares`)) |>
    ungroup()

# Next, expenses
if(!file.exists("2022_expenses.csv")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "2022_expenses.csv" in your project
    # directory.
    download.file("https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true", 
                  destfile="2022_expenses.csv", 
                  quiet=FALSE, 
                  method="wget")
}
EXPENSES <- readr::read_csv("2022_expenses.csv") |>
    select(`NTD ID`, 
           `Agency`,
           `Total`, 
           `Mode`) |>
    mutate(`NTD ID` = as.integer(`NTD ID`)) |>
    rename(Expenses = Total) |>
    group_by(`NTD ID`, `Mode`) |>
    summarize(Expenses = sum(Expenses)) |>
    ungroup()

FINANCIALS <- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))
```
Finally, let’s extract monthly transit numbers:
```{r}
# Monthly Transit Numbers
library(tidyverse)
if(!file.exists("ridership.xlsx")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "ridership.xlsx" in your project
    # directory.
    download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx", 
                  destfile="ridership.xlsx", 
                  quiet=FALSE, 
                  method="wget")
}
TRIPS <- readxl::read_xlsx("ridership.xlsx", sheet="UPT") |>
            filter(`Mode/Type of Service Status` == "Active") |>
            select(-`Legacy NTD ID`, 
                   -`Reporter Type`, 
                   -`Mode/Type of Service Status`, 
                   -`UACE CD`, 
                   -`TOS`) |>
            pivot_longer(-c(`NTD ID`:`3 Mode`), 
                            names_to="month", 
                            values_to="UPT") |>
            drop_na() |>
            mutate(month=my(month)) # Parse _m_onth _y_ear date specs
MILES <- readxl::read_xlsx("ridership.xlsx", sheet="VRM") |>
            filter(`Mode/Type of Service Status` == "Active") |>
            select(-`Legacy NTD ID`, 
                   -`Reporter Type`, 
                   -`Mode/Type of Service Status`, 
                   -`UACE CD`, 
                   -`TOS`) |>
            pivot_longer(-c(`NTD ID`:`3 Mode`), 
                            names_to="month", 
                            values_to="VRM") |>
            drop_na() |>
            group_by(`NTD ID`, `Agency`, `UZA Name`, 
                     `Mode`, `3 Mode`, month) |>
            summarize(VRM = sum(VRM)) |>
            ungroup() |>
            mutate(month=my(month)) # Parse _m_onth _y_ear date specs

USAGE <- inner_join(TRIPS, MILES) |>
    mutate(`NTD ID` = as.integer(`NTD ID`))
```
This creates a table as follows:
```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()
```
### Task 1 - Creating Syntatic Names

The following code will rename the column 'UZA Name' to 'metro_area'. Because it has no spaces in it, this name will be easier to manipulate in code. 
```{r}
USAGE <- USAGE |>
  rename(metro_area = `UZA Name`)
```
### Task 2: Recoding the Mode column
The 'Mode' column is also helpful, but it uses a set of codes that aren’t interpretable. To make life easier for ourselves, let’s use a case_when statement to transform this into something we can make sense of.

First, let's find the unique 'Mode' codes in our data using the distinct function. After examining the NTD website and finding the interpretations of these codes, we can complete the following snippet to recode the 'Mode' column.
```{r}
# Find unique Mode codes in the USAGE table
distinct(USAGE, Mode)
```

```{r}
USAGE <- USAGE |>
  mutate(Mode = case_when(
    Mode == "HR" ~ "Heavy Rail",       # HR: Heavy Rail
    Mode == "LR" ~ "Light Rail",        # LR: Light Rail
    Mode == "MB" ~ "Bus",               # MB: Bus (Motor Bus)
    Mode == "CR" ~ "Commuter Rail",     # CR: Commuter Rail
    Mode == "DR" ~ "Demand Response",   # DR: Demand Response
    Mode == "VP" ~ "Vanpool",           # VP: Vanpool
    Mode == "AR" ~ "Alaska Railroad",   # AR: Alaska Railroad
    Mode == "RB" ~ "Bus Rapid Transit", # RB: Bus Rapid Transit
    Mode == "FB" ~ "Ferryboat",       # FB: Ferryboat
    Mode == "SR" ~ "Streetcar Rail",       # SR: Streetcar Rail
    Mode == "TB" ~ "Trolleybus",       # TB: Trolleybus
    Mode == "CB" ~ "Commuter Bus",       # CB: Commuter Bus
    Mode == "YR" ~ "Hybrid Rail",       # YR: Hybrid Rail
    Mode == "MG" ~ "Monorail and Automated Guideway modes",  # MG: Monorail and Automated Guideway modes
    Mode == "TR" ~ "Aerial Tramway",       # TR: Aerial Tramway
    Mode == "IP" ~ "Inclined Plane",       # IP: Inclined Plane
    Mode == "PB" ~ "Publico",       # PB: Publico
    Mode == "CC" ~ "Cable Car",       # CC: Cable Car
    TRUE ~ "Unknown"                    # Any other mode
  ))
```
Now that the data is clean, we can create an attractive summary table of the cleaned up USAGE table using the following snippet:
```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()
```
## Data Analysis

Now let's analyse our data. 

### Task 3: Answering Specified Questions with dplyr
Using functions filter, group_by, summarize, arrange, we are going to answer the following questions for our analysis with the following codes:

1. What transit agency had the most total VRM in our data set?
```{r}
# Transit agency with the most total VRM
agency_most_vrm <- USAGE |>
  group_by(Agency) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1)  # Get the top agency

print(agency_most_vrm)
```
The transit agency that had the most total VRM in our data set is the MTA New York City Transit, which reported a total of 10,832,855,350 VRM.

2. What transit mode had the most total VRM in our data set?
```{r}
# Transit mode with the most total VRM
mode_most_vrm <- USAGE |>
  group_by(Mode) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1)  # Get the top mode

print(mode_most_vrm)
```
The transit mode that had the most total VRM in our data set is the Bus with a total of 49,444,494,088 VRM.

3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?
```{r}
# Filter for Heavy Rail in NYC for May 2024
NYC_Subway_trip_may_24 <- USAGE %>%
  mutate(month = format(ymd(month), "%Y-%m")) %>% 
  filter(Mode == "Heavy Rail", 
         Agency == "MTA New York City Transit",  
         month == "2024-05") %>%  
  summarize(total_trip = sum(UPT, na.rm = TRUE)) 

NYC_Subway_trip_may_24
```
In May 2024, 180,458,819 trips were taken on the NYC Subway (Heavy Rail).

4. How much did NYC subway ridership fall between April 2019 and April 2020?
```{r}
nyc_ridership_2019 <- USAGE |>
  filter(metro_area == "New York--Jersey City--Newark, NY--NJ", Mode == "Heavy Rail", month == "2019-04-01") |>
  summarise(nyc_sub_2019 = sum(UPT, na.rm = TRUE))
nyc_ridership_2020<- USAGE |>
  filter(metro_area == "New York--Jersey City--Newark, NY--NJ", Mode == "Heavy Rail", month == "2020-04-01") |>
  summarise(nyc_subway_ridership_fall= sum(UPT, na.rm = TRUE))
nyc_ridership=((nyc_ridership_2020-nyc_ridership_2019)/(nyc_ridership_2019))*100
nyc_ridership_2019
nyc_ridership_2020
nyc_ridership
```
Here our results show us that the NYC Subway ridership went from 240,655,437 in April 2019 to 20,704,824 in April 2020.Our last piece of the code informs us that this represent a 91% ridership fall between April 2019 and April 2020.

### Task 4: Explore and Analyze

### Task 5: Table Summarization

```{r}
# Create the USAGE_2022_ANNUAL table
USAGE_2022_ANNUAL <- USAGE |>
  # Extract the year from the month column
  mutate(year = year(month)) |>
  # Filter for the year 2022
  filter(year == 2022) |>
  # Group by the necessary columns
  group_by(`NTD ID`, Agency, metro_area, Mode) |>
  # Summarize total UPT and VRM for the year
  summarize(UPT = sum(UPT, na.rm = TRUE), VRM = sum(VRM, na.rm = TRUE)) |>
  # Ungroup the table
  ungroup()
colnames(USAGE_2022_ANNUAL)
```

```{r}
FINANCIALS <- FINANCIALS |>
  mutate(Mode = case_when(
    Mode == "HR" ~ "Heavy Rail",       # HR: Heavy Rail
    Mode == "LR" ~ "Light Rail",        # LR: Light Rail
    Mode == "MB" ~ "Bus",               # MB: Bus (Motor Bus)
    Mode == "CR" ~ "Commuter Rail",     # CR: Commuter Rail
    Mode == "DR" ~ "Demand Response",   # DR: Demand Response
    Mode == "VP" ~ "Vanpool",           # VP: Vanpool
    Mode == "AR" ~ "Alaska Railroad",   # AR: Alaska Railroad
    Mode == "RB" ~ "Bus Rapid Transit", # RB: Bus Rapid Transit
    Mode == "FB" ~ "Ferryboat",       # FB: Ferryboat
    Mode == "SR" ~ "Streetcar Rail",       # SR: Streetcar Rail
    Mode == "TB" ~ "Trolleybus",       # TB: Trolleybus
    Mode == "CB" ~ "Commuter Bus",       # CB: Commuter Bus
    Mode == "YR" ~ "Hybrid Rail",       # YR: Hybrid Rail
    Mode == "MG" ~ "Monorail and Automated Guideway modes",  # MG: Monorail and Automated Guideway modes
    Mode == "TR" ~ "Aerial Tramway",       # TR: Aerial Tramway
    Mode == "IP" ~ "Inclined Plane",       # IP: Inclined Plane
    Mode == "PB" ~ "Publico",       # PB: Publico
    Mode == "CC" ~ "Cable Car",       # CC: Cable Car
    TRUE ~ "Unknown"                    # Any other mode
  ))
```

```{r}
USAGE_AND_FINANCIALS <- left_join(USAGE_2022_ANNUAL, 
           FINANCIALS, 
           join_by(`NTD ID`, Mode)) |>
    drop_na()
USAGE_AND_FINANCIALS |>
  DT::datatable()
```
### Task 6: Farebox Recovery Among Major Systems
Using the USAGE_AND_FINANCIALS table, answer the following questions:

Which transit system (agency and mode) had the most UPT in 2022?
Which transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?
Which transit system (agency and mode) has the lowest expenses per UPT?
Which transit system (agency and mode) has the highest total fares per UPT?
Which transit system (agency and mode) has the lowest expenses per VRM?
Which transit system (agency and mode) has the highest total fares per VRM?
You may wish to restrict your answer to major transit systems, which you can define as those with 400,000 UPT per annum.