---
title: "Mini Project 1"
format:
  html:
    css: styles.css
---

# Introduction

This report analyzes the fiscal characteristics of major US public transit systems using data from the National Transit Database. The goal is to understand farebox recovery rates, analyze ridership, and examine the financial efficiency of various transit systems.

```{r}
# Load required libraries
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("readxl")) install.packages("readxl")
if(!require("DT")) install.packages("DT")

library(tidyverse)
library(readxl)
library(DT)

# Load Fare Revenue Data
if(!file.exists("2022_fare_revenue.xlsx")){
    download.file("http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx", 
                  destfile="2022_fare_revenue.xlsx", 
                  quiet=FALSE, 
                  method="wget")
}
FARES <- read_xlsx("2022_fare_revenue.xlsx") |>
    select(-`State/Parent NTD ID`, -`Reporter Type`, -`Reporting Module`, -`TOS`,
           -`Passenger Paid Fares`, -`Organization Paid Fares`) |>
    filter(`Expense Type` == "Funds Earned During Period") |>
    select(-`Expense Type`)

# Load Expenses Data
if(!file.exists("2022_expenses.csv")){
    download.file("https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true", 
                  destfile="2022_expenses.csv", 
                  quiet=FALSE, 
                  method="wget")
}
EXPENSES <- read_csv("2022_expenses.csv") |>
    select(`NTD ID`, `Agency`, `Total`, `Mode`) |>
    mutate(`NTD ID` = as.integer(`NTD ID`)) |>
    rename(Expenses = Total) |>
    group_by(`NTD ID`, `Mode`) |>
    summarize(Expenses = sum(Expenses)) |>
    ungroup()

# Join Fares and Expenses
FINANCIALS <- inner_join(FARES, EXPENSES, by = c("NTD ID", "Mode"))
```

```{r}
# Monthly Transit Numbers
library(tidyverse)
if(!file.exists("ridership.xlsx")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "ridership.xlsx" in your project
    # directory.
    download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx", 
                  destfile="ridership.xlsx", 
                  quiet=FALSE, 
                  method="wget")
}
TRIPS <- readxl::read_xlsx("ridership.xlsx", sheet="UPT") |>
            filter(`Mode/Type of Service Status` == "Active") |>
            select(-`Legacy NTD ID`, 
                   -`Reporter Type`, 
                   -`Mode/Type of Service Status`, 
                   -`UACE CD`, 
                   -`TOS`) |>
            pivot_longer(-c(`NTD ID`:`3 Mode`), 
                            names_to="month", 
                            values_to="UPT") |>
            drop_na() |>
            mutate(month=my(month)) # Parse _m_onth _y_ear date specs
MILES <- readxl::read_xlsx("ridership.xlsx", sheet="VRM") |>
            filter(`Mode/Type of Service Status` == "Active") |>
            select(-`Legacy NTD ID`, 
                   -`Reporter Type`, 
                   -`Mode/Type of Service Status`, 
                   -`UACE CD`, 
                   -`TOS`) |>
            pivot_longer(-c(`NTD ID`:`3 Mode`), 
                            names_to="month", 
                            values_to="VRM") |>
            drop_na() |>
            group_by(`NTD ID`, `Agency`, `UZA Name`, 
                     `Mode`, `3 Mode`, month) |>
            summarize(VRM = sum(VRM)) |>
            ungroup() |>
            mutate(month=my(month)) # Parse _m_onth _y_ear date specs

USAGE <- inner_join(TRIPS, MILES) |>
    mutate(`NTD ID` = as.integer(`NTD ID`))
```

```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()
```

```{r}
USAGE <- USAGE |>
  rename(metro_area = `UZA Name`)
```

```{r}
# Find unique Mode codes in the USAGE table
distinct(USAGE, Mode)
```

```{r}
USAGE <- USAGE |>
  mutate(Mode = case_when(
    Mode == "HR" ~ "Heavy Rail",       # HR: Heavy Rail
    Mode == "LR" ~ "Light Rail",        # LR: Light Rail
    Mode == "MB" ~ "Bus",               # MB: Bus (Motor Bus)
    Mode == "CR" ~ "Commuter Rail",     # CR: Commuter Rail
    Mode == "DR" ~ "Demand Response",   # DR: Demand Response
    Mode == "VP" ~ "Vanpool",           # VP: Vanpool
    Mode == "AR" ~ "Alaska Railroad",   # AR: Alaska Railroad
    Mode == "RB" ~ "Bus Rapid Transit", # RB: Bus Rapid Transit
    Mode == "FB" ~ "Ferryboat",       # FB: Ferryboat
    Mode == "SR" ~ "Streetcar Rail",       # SR: Streetcar Rail
    Mode == "TB" ~ "Trolleybus",       # TB: Trolleybus
    Mode == "CB" ~ "Commuter Bus",       # CB: Commuter Bus
    Mode == "YR" ~ "Hybrid Rail",       # YR: Hybrid Rail
    Mode == "MG" ~ "Monorail and Automated Guideway modes",  # MG: Monorail and Automated Guideway modes
    Mode == "TR" ~ "Aerial Tramway",       # TR: Aerial Tramway
    Mode == "IP" ~ "Inclined Plane",       # IP: Inclined Plane
    Mode == "PB" ~ "Publico",       # PB: Publico
    Mode == "CC" ~ "Cable Car",       # CC: Cable Car
    TRUE ~ "Unknown"                    # Any other mode
  ))
```

```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()
```

```{r}
# Clean the USAGE table by unselecting columns and renaming others
USAGE_CLEAN <- USAGE |>
  select(-`NTD ID`, -`3 Mode`, 
         UPT = `UPT`,    # Renaming UPT to a more descriptive name (if desired)
         VRM = `VRM`,    # Renaming VRM to a more descriptive name (if desired)
         metro_area,     # Keep the renamed metro_area
         Agency,         # Keep Agency
         Mode,           # Keep Mode
         month)          # Keep month
print(USAGE_CLEAN)
```
```{r}
# Transit agency with the most total VRM
agency_most_vrm <- USAGE_CLEAN |>
  group_by(Agency) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1)  # Get the top agency

print(agency_most_vrm)
```
```{r}
# Transit mode with the most total VRM
mode_most_vrm <- USAGE_CLEAN |>
  group_by(Mode) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1)  # Get the top mode

print(mode_most_vrm)
```
```{r}
# Trips taken on the NYC Subway (Heavy Rail) in May 2024
nyc_subway_trips_may_2024 <- USAGE_CLEAN |>
  filter(Mode == "Heavy Rail", month == "2024-05-01") |>
  summarize(total_trips = sum(UPT, na.rm = TRUE))

print(nyc_subway_trips_may_2024)
```
```{r}
# Mode of transport with the longest average trip in May 2024
longest_avg_trip <- USAGE_CLEAN |>
  filter(month == "2024-05-01") |>
  group_by(Mode) |>
  summarize(avg_trip_length = mean(VRM / UPT, na.rm = TRUE)) |>
  arrange(desc(avg_trip_length)) |>
  slice(1)  # Get the mode with the longest average trip

print(longest_avg_trip)
```
```{r}
# Ridership fall for NYC Subway between April 2019 and April 2020
nyc_subway_ridership_fall <- USAGE_CLEAN |>
  filter(Mode == "Heavy Rail", month %in% c("2019-04-01", "2020-04-01")) |>
  group_by(month) |>
  summarize(total_ridership = sum(UPT, na.rm = TRUE))

# Calculate the fall in ridership
ridership_fall_amount <- nyc_subway_ridership_fall$total_ridership[2] - nyc_subway_ridership_fall$total_ridership[1]

print(ridership_fall_amount)
```
```{r}
library(dplyr)
library(lubridate)

# Create the USAGE_2022_ANNUAL table
USAGE_2022_ANNUAL <- USAGE |>
  filter(year(month) == 2022) |>  # Filter for the year 2022
  group_by(`NTD ID`, Agency, metro_area, Mode) |>  # Group by specified columns
  summarize(
    UPT = sum(UPT, na.rm = TRUE),  # Calculate total UPT
    VRM = sum(VRM, na.rm = TRUE)   # Calculate total VRM
  ) |> 
  ungroup()  # Ungroup the table

# Print the resulting table
print(USAGE_2022_ANNUAL)
```
