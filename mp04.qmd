---
title: "Mini Project 4"
format:
  html:
    code-fold: true
    css: styles.css
---

# Introduction

In this project, we will use R to make an important personal financial decision. New faculty hired at CUNY have 30 days to choose one of two retirement plans. This is an important and early choice that faculty must make, as it is essentially permanent and cannot be changed. Financial forecasting is quite difficult, and it is far from clear which plan is the better long-term choice. In this mini-project, we will use historical financial data and a bootstrap inference strategy to estimate the probability that one plan is better than the other.

```{r, echo=TRUE, results='hide', warning=FALSE, message=FALSE}
library(stringr)
library(gt)
library(dplyr)
library(ggplot2)
library (tidyverse)
library(DT)
library(knitr)
library(readxl)
library(readr)
library(data.table)
library(striprtf)
library(httr2)
library(patchwork)
library(tibble)
library(purrr)
```
First, let's start by creating our API keys to retrieve the datasets from Alpha Vantage and FRED.
[Alpha Vantage](https://www.alphavantage.co/support/#api-key) and [FRED](https://fredaccount.stlouisfed.org/login/secure/).
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
alpha_vantage_key <- read_rtf("~/STA9750-2024-FALL/API key.rtf") 
fred_key <- read_rtf("~/STA9750-2024-FALL/FRED API key.rtf")
```

# Set-Up and Exploration

## Data Acquisition
To begin your Monte Carlo analysis, you will need historical data covering (at a minimum) the following:

- Wage growth
- Inflation
- US Equity Market total returns
- International Equity Market total returns
- Bond market total returns
- Short-term debt returns

1. Wage Growth

I will use the dataset from FRED that shows the [Average Hourly Earnings of All Employees](https://fred.stlouisfed.org/series/CEU0500000003) to gather data history for wage growth. 
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Fetch Wage Growth data
wage_growth_response <- request("https://api.stlouisfed.org/fred/series/observations") %>%
  req_url_query(series_id = "CES0500000003",
                api_key = fred_key,
                file_type = "json") %>%
  req_perform()

# Parse JSON response
wage_data <- wage_growth_response |>
  resp_body_json() %>%
  .$observations

wage_growth_df <- wage_data |>
  map_dfr(as_tibble) |>
  mutate(
    date = as.Date(date),
    wage = as.numeric(value)
  ) |>
  arrange(date) |>
  mutate(
# Calculate percentage change in wages
    wage_growth = (wage / lag(wage) - 1)
  ) |>
  select(date, wage_growth)

# Convert to monthly data
wage_growth_monthly <- wage_growth_df |>
  mutate(
    year = year(date),
    month = month(date)
  ) |>
  group_by(year, month) |>
  summarise(
    date = floor_date(first(date), unit = "month"),
    wage_growth =  median(wage_growth, na.rm = TRUE),  # Median for robust aggregation
    .groups = "drop"
  ) |>
  ungroup() |>
  arrange(date)


wage_growth_monthly <- wage_growth_monthly |>
  mutate(
    wage_growth = pmin(pmax(wage_growth, -0.1), 0.1)  # Cap between -10% and 10%
  )



wage_growth_df  <- wage_growth_monthly |> select(date, wage_growth)

wage_growth_df |> DT::datatable()
```

2. Inflation

For inflation; I selected the dataset from FRED, Consumer Price Index for [All Urban Consumers: All Items in U.S. City Average](https://fred.stlouisfed.org/series/CPIAUCSL).
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Fetch Inflation data
inflation_response <- request("https://api.stlouisfed.org/fred/series/observations") %>%
  req_url_query(series_id = "CPIAUCSL",
                api_key = fred_key,
                file_type = "json") %>%
  req_perform()

# Parse JSON response
inflation_data <- inflation_response |>
  resp_body_json() %>%
  .$observations

# Convert to a data frame
inflation_df <- inflation_data |>
  map_dfr(as_tibble) |>
  mutate(
    date = as.Date(date),
    value = as.numeric(value) # Convert CPI data to numeric
  ) |>
  select(date, CPI = value)

inflation_df |> DT::datatable()

```

To visualize better the fluctuation of the inflation rate over the years, here is a visual:
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
inflation_df <- inflation_df |>
  arrange(date) |>
  mutate(
    mom_inflation = (CPI / lag(CPI) - 1) * 100, # Month-over-Month Inflation
    yoy_inflation = (CPI / lag(CPI, 12) - 1) * 100 # Year-over-Year Inflation
  )

inflation_df <- inflation_df |>
  rename(
    inflation_cpi = CPI,                # CPI column
    mom_inflation_rate = mom_inflation, # Month-over-month inflation
    yoy_inflation_rate = yoy_inflation  # Year-over-year inflation
  )

ggplot(inflation_df, aes(x = date, y = yoy_inflation_rate)) +
  geom_line(color = "blue") +
  labs(title = "Adjusted Year-over-Year Inflation Rate", x = "Date", y = "YoY Inflation Rate (%)") +
  theme_minimal()
```

3. U.S. Equity Market Total Returns

After looking at the different datasets Alpha Vantage has to offer, I chose the [TIME_SERIES_MONTHLY_ADJUSTED](https://www.alphavantage.co/documentation/#monthlyadj) data that shows the US equity market and selected to analyze the S&P 500 ETF “SPY”.
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Define the base URL for the Alpha Vantage API
base_url <- "https://www.alphavantage.co/query"

# Define the API endpoint and parameters
us_equity_response <- request(base_url) |>
  req_options(cookies = NULL) |>
  req_url_query(
    `function` = "TIME_SERIES_MONTHLY_ADJUSTED", # Enclose 'function' in backticks
    symbol = "SPY", # Example: S&P 500 ETF
    apikey = alpha_vantage_key
  ) |>
  req_perform()

# Parse JSON response
equity_data <- us_equity_response |>
  resp_body_json() %>%
  .$`Monthly Adjusted Time Series`

# Convert JSON data to a data frame
equity_df <- equity_data |>
  map_dfr(as_tibble, .id = "date") |>
  mutate(
    date = as.Date(date), # Convert date to Date type
    us_equity_return = as.numeric(`5. adjusted close`) # Adjusted close price
  ) |>
  select(date, us_equity_return)

equity_df <- equity_df |>
  arrange(date) |>
  mutate(
    us_equity_monthly_return = (us_equity_return - lag(us_equity_return)) / lag(us_equity_return) * 100
  )

equity_df <- equity_df |>
  rename(
    us_equity_adjusted = us_equity_return,  # Adjusted close column
  )


equity_df <- equity_df |>
  mutate(date = date |>
           floor_date(unit = "month") |>  # Get the first of the current month
           add_with_rollback(months(1)))  # Add one month


# Remove Empty Values
equity_df <- equity_df |>
  filter(!is.na(us_equity_monthly_return))

# View the updated data frame
equity_df |> DT:::datatable()

```

Here is the evolution of the adjusted close prices of the US Equity market from 2000 until now:
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
ggplot(equity_df, aes(x = date, y = us_equity_adjusted)) +
  geom_line(color = "blue") +
  labs(title = "US Equity Market Adjusted Close Prices", x = "Date", y = "Adjusted Close ($)") +
  theme_minimal()
```

4. International Equity Market Total Returns

For the International Equity Market Total Returns, I will use the same data as US Equity Market Total Returns
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Request monthly adjusted data for VEU ETF
equity_response <- request(base_url) |>
  req_options(cookies = NULL) |>
  req_url_query(
    `function` = "TIME_SERIES_MONTHLY_ADJUSTED", # Monthly adjusted time series
    symbol = "VEU",                            
    apikey = alpha_vantage_key
  ) |>
  req_perform()

intl_equity_data <- equity_response |>
  resp_body_json() %>%
  .$`Monthly Adjusted Time Series`


# Convert JSON data to a data frame
intl_equity_df <- intl_equity_data |>
  map_dfr(as_tibble, .id = "date") |>
  mutate(
    date = as.Date(date), # Convert date to Date type
    intl_equity_return = as.numeric(`5. adjusted close`) # Adjusted close price
  ) |>
  select(date, intl_equity_return)

intl_equity_df <- intl_equity_df |>
  arrange(date) |>
  mutate(
    monthly_return = (intl_equity_return - lag(intl_equity_return)) / lag(intl_equity_return) * 100
  )

intl_equity_df <- intl_equity_df |>
  rename(
    intl_equity_adjusted = intl_equity_return,  # Adjusted close column
    intl_equity_monthly_return = monthly_return # Monthly returns
  )

intl_equity_df <- intl_equity_df |>
  mutate(date = date |>
           floor_date(unit = "month") |>  # Get the first of the current month
           add_with_rollback(months(1)))  # Add one month

# View the updated data frame
intl_equity_df |> DT::datatable()
```

# Bond Market Total Returns

For Bond Market Total Returns, I working with the same dataset from Alpha Vantage, TIME_SERIES_MONTHLY_ADJUSTED and I chose to analyze AGG which is iShares Core U.S. Aggregate Bond ETF and tracks the performance of the U.S. bond market.
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Request monthly adjusted data for AGG ETF
bond_response <- request(base_url) |>
  req_options(cookies = NULL) |>
  req_url_query(
    `function` = "TIME_SERIES_MONTHLY_ADJUSTED", 
    symbol = "AGG", 
    apikey = alpha_vantage_key
  ) |>
  req_perform()
# Parse JSON response
bond_data <- bond_response |>
  resp_body_json() %>%
  .$`Monthly Adjusted Time Series`

# Convert JSON data to a data frame
bond_df <- bond_data |>
  map_dfr(as_tibble, .id = "date") |>
  mutate(
    date = as.Date(date), 
    bond_return = as.numeric(`5. adjusted close`) 
  ) |>
  select(date, bond_return)

bond_df <- bond_df |>
  arrange(date) |>
  mutate(
    monthly_return = (bond_return - lag(bond_return)) / lag(bond_return) * 100
  )

bond_df <- bond_df |>
  rename(
    bond_adjusted = bond_return,  
    bond_monthly_return = monthly_return 
  )

bond_df <- bond_df |>
  mutate(date = date |>
           floor_date(unit = "month") |>  
           add_with_rollback(months(1)))  

bond_df |> DT::datatable()
```

# Short-Term Debt Returns

To represent data on Short-Tern Debt Returns, I chose to analyze the dataset from FRED ["Market Yield on U.S. Treasury Securities at 3-Month Constant Maturity"](https://fred.stlouisfed.org/series/DGS3MO). 
```{R, echo = TRUE, message = FALSE, warning = FALSE}
short_term_response <- request("https://api.stlouisfed.org/fred/series/observations") %>%
  req_url_query(series_id = "DGS3MO",
                api_key = fred_key,
                file_type = "json") %>%
  req_perform()
# Parse response into a data frame
short_term_df <- short_term_response %>%
  resp_body_json() %>%
  pluck("observations") %>%
  map_dfr(~list(date = .x$date, value = as.numeric(.x$value))) %>%
  mutate(
    date = as.Date(date),
    date = floor_date(date, "month")  # Extract year and month
  ) %>%
  group_by(date) %>%
  summarize(average_yield = mean(value, na.rm = TRUE), .groups = "drop")  # Monthly average

# Display the data frame as a DataTable
datatable(
  short_term_df,
  options = list(
    pageLength = 10,
    autoWidth = TRUE,
    dom = 't<"dt-buttons"p>',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
  ),
  caption = "3-Month Treasury Yield Data (Monthly Averages)"
)

# Create the graph visualization
ggplot(short_term_df, aes(x = date, y = average_yield)) +
  geom_line(color = "blue") +
  labs(
    title = "3-Month Treasury Yield (Monthly Averages)",
    x = "Date",
    y = "Yield (%)",
    caption = "Source: FRED - DGS3MO"
  ) +
  theme_minimal()

```
# Monte Carlo Simulation
1. Prepare Data 

First step to our Monte Carlo simulation is to gather all the data together in one same data frame.
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Ensure all datasets have a common date format and merge them
combined_data <- reduce(
  list(
    inflation_df |> select(date, inflation_cpi, mom_inflation_rate, yoy_inflation_rate),
    wage_growth_df |> select(date, wage_growth),
    equity_df |> select(date, us_equity_monthly_return),
    intl_equity_df |> select(date, intl_equity_monthly_return),
    bond_df |> select(date, bond_monthly_return),
    short_term_df |> select(date, average_yield)
  ),
  full_join,
  by = "date"
) 

combined_data <- combined_data %>%
  filter(complete.cases(.))

combined_data |> DT::datatable()
```

2. Visualization

Now let`s do a simulation of my Monte Carlo simulation for the price path of US Equity.
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Parameters for the S&P 500 simulation using combined dataset
initial_price <- 100  # Use an arbitrary starting price (you can replace this with actual data if needed)
return_column <- "us_equity_monthly_return"  # Choose the column for monthly returns

# Calculate drift (average return) and volatility (standard deviation of returns)
mu <- mean(combined_data[[return_column]], na.rm = TRUE)  # Drift (average return)
sigma <- sd(combined_data[[return_column]], na.rm = TRUE) # Volatility (std of returns)

# Simulation parameters
n_steps <- 12  # Simulate for 1 year (12 months)
n_simulations <- 100  # Number of simulation paths
time_horizon <- 1  # Time horizon in years

# Simulate price paths
set.seed(123)  # For reproducibility
dt <- time_horizon / n_steps  # Time step (monthly in this case)
price_paths <- matrix(NA, nrow = n_steps + 1, ncol = n_simulations)

# Initialize the first row with the initial price
price_paths[1, ] <- initial_price

# Generate paths
for (i in 2:(n_steps + 1)) {
  z <- rnorm(n_simulations)  # Random shocks
  price_paths[i, ] <- price_paths[i - 1, ] * exp((mu - 0.5 * sigma^2) * dt + sigma * sqrt(dt) * z)
}

# Convert to a tidy data frame for visualization
price_paths_df <- as.data.frame(price_paths) %>%
  mutate(month = 0:n_steps) %>%
  pivot_longer(-month, names_to = "simulation", values_to = "price")

# Plot simulated price paths
ggplot(price_paths_df, aes(x = month, y = price, group = simulation)) +
  geom_line(alpha = 0.5, color = "blue") +
  labs(
    title = "Simulated Price Paths for U.S. Equity",
    subtitle = "Monte Carlo Simulation using Monthly Returns",
    x = "Months",
    y = "Price"
  ) +
  theme_minimal()

```


#  Investigation and Visualization of Input Data

Now let's do more investigation about my data. I will start by looking at the potential correlations between all those properties.
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
library(DT)
library(dplyr)
library(knitr)

# 1. Calculate the correlation matrix among the factors
correlation_matrix <- combined_data %>%
  select(inflation_cpi, wage_growth, us_equity_monthly_return, 
         intl_equity_monthly_return, bond_monthly_return, average_yield) %>%
  cor(use = "complete.obs")  # Use complete cases to ignore missing values

# 2. Convert the correlation matrix to a tidy format for better presentation in a table
correlation_df <- as.data.frame(as.table(correlation_matrix)) %>%
  rename(Variable1 = Var1, Variable2 = Var2, Correlation = Freq)

# 3. Use knitr to create a nicely formatted table
kable(correlation_df, 
      caption = "Correlation Matrix Among Economic Factors",
      format = "html", 
      digits = 2, 
      align = c("l", "l", "r"))

```
The correlation matrix reveals the strength and direction of relationships between various economic factors. The relationship between inflation (CPI) and wage growth is relatively weak but positive, with a correlation of 0.19. Inflation (CPI) shows a slightly positive correlation with U.S. equity returns (0.08), but the relationship is not strong. Interestingly, U.S. equity returns have a stronger positive correlation with international equity returns (0.88), indicating that these two markets tend to move together. The correlation between equity returns and bond returns is low (0.24), suggesting little co-movement. There is a moderate positive correlation (0.64) between inflation (CPI) and average short-term yield, indicating that when inflation rises, short-term yields tend to increase as well. Wage growth has a negative correlation with U.S. equity returns (-0.26), suggesting that as wages grow, U.S. equity returns tend to decrease slightly. Other correlations, such as between wage growth and international equity returns, are negative but weak.

Now let`s plot the time series of our properties:
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# 1. Time-series plot for Inflation
ggplot(combined_data, aes(x = date, y = inflation_cpi)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "Inflation (CPI) Over Time",
    subtitle = "Monthly Inflation Rate",
    x = "Date",
    y = "Inflation (CPI)"
  ) +
  theme_minimal()

# 2. Time-series plot for Wage Growth
ggplot(combined_data, aes(x = date, y = wage_growth)) +
  geom_line(color = "red", size = 1) +
  labs(
    title = "Wage Growth Over Time",
    subtitle = "Monthly Wage Growth",
    x = "Date",
    y = "Wage Growth"
  ) +
  theme_minimal()

# 3. Time-series plot for U.S. Equity Monthly Returns
ggplot(combined_data, aes(x = date, y = us_equity_monthly_return)) +
  geom_line(color = "green", size = 1) +
  labs(
    title = "U.S. Equity Monthly Returns Over Time",
    subtitle = "Monthly Returns of U.S. Equities",
    x = "Date",
    y = "U.S. Equity Monthly Return"
  ) +
  theme_minimal()

# 4. Time-series plot for International Equity Monthly Returns
ggplot(combined_data, aes(x = date, y = intl_equity_monthly_return)) +
  geom_line(color = "purple", size = 1) +
  labs(
    title = "International Equity Monthly Returns Over Time",
    subtitle = "Monthly Returns of International Equities",
    x = "Date",
    y = "International Equity Monthly Return"
  ) +
  theme_minimal()

# 5. Time-series plot for Bond Monthly Returns
ggplot(combined_data, aes(x = date, y = bond_monthly_return)) +
  geom_line(color = "orange", size = 1) +
  labs(
    title = "Bond Monthly Returns Over Time",
    subtitle = "Monthly Returns of Bonds",
    x = "Date",
    y = "Bond Monthly Return"
  ) +
  theme_minimal()

# 6. Time-series plot for Short-Term Yield
ggplot(combined_data, aes(x = date, y = average_yield)) +
  geom_line(color = "brown", size = 1) +
  labs(
    title = "Short-Term Yield Over Time",
    subtitle = "Average Yield of Short-Term Instruments",
    x = "Date",
    y = "Short-Term Yield"
  ) +
  theme_minimal()
```

Finally, this code allows us to compute the long-run monthly average value of each series
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
library(dplyr)

# Compute the long-run monthly average for each series
monthly_averages <- combined_data %>%
  summarise(
    avg_inflation = mean(inflation_cpi, na.rm = TRUE),
    avg_wage_growth = mean(wage_growth, na.rm = TRUE),
    avg_us_equity_return = mean(us_equity_monthly_return, na.rm = TRUE),
    avg_intl_equity_return = mean(intl_equity_monthly_return, na.rm = TRUE),
    avg_bond_return = mean(bond_monthly_return, na.rm = TRUE),
    avg_short_term_yield = mean(average_yield, na.rm = TRUE)
  )

# Print the results
print("Long-Run Monthly Averages:")
print(monthly_averages)
```

# Historical Comparison of TRS and ORP

Now that we have explored our historical data, we can implement the TRS and ORP formulas and compare the value of each of them for the first month of retirement. To do this, we may assume that your hypothetical employee:

- Joined CUNY in the first month of the historical data
- Retired from CUNY at the end of the final month of data

```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Assume initial salary and historical data
initial_salary <- 50000
wage_growth_rate <- 0.03  # 3% annual wage growth (for simplicity)
investment_return_rate <- 0.06  # 6% average return for ORP investment

# Number of years worked
years_worked <- 20  # Assume 20 years of service

# Calculate annual contributions (employee + employer)
employee_contribution_rate <- ifelse(initial_salary <= 45000, 0.03, 
                                      ifelse(initial_salary <= 55000, 0.035, 
                                             ifelse(initial_salary <= 75000, 0.045, 
                                                    ifelse(initial_salary <= 100000, 0.0575, 0.06))))

# Employer contribution after 7 years
employer_contribution_rate_early <- 0.08  # First 7 years
employer_contribution_rate_late <- 0.10  # After 7 years

# Function to calculate final ORP balance
calculate_orp_balance <- function(initial_salary, years_worked, employee_rate, employer_rate_early, employer_rate_late, return_rate) {
  total_balance <- 0
  salary <- initial_salary
  
  for (year in 1:years_worked) {
    # Contributions for the year
    employee_contrib <- salary * employee_rate
    employer_contrib <- if (year <= 7) salary * employer_rate_early else salary * employer_rate_late
    
    # Update the balance with contributions and returns
    total_balance <- total_balance + employee_contrib + employer_contrib
    total_balance <- total_balance * (1 + return_rate)  # Apply return rate
    
    # Apply wage growth
    salary <- salary * (1 + wage_growth_rate)
  }
  
  return(total_balance)
}

# Calculate ORP balance and monthly withdrawal
orp_balance <- calculate_orp_balance(initial_salary, years_worked, employee_contribution_rate, employer_contribution_rate_early, employer_contribution_rate_late, investment_return_rate)
orp_monthly_withdrawal <- orp_balance * 0.04 / 12  # Withdraw 4% per year

# Print ORP results
cat("ORP Final Balance: $", round(orp_balance, 2), "\n")
cat("ORP Monthly Withdrawal (4% per year): $", round(orp_monthly_withdrawal, 2), "\n")

```


```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Assume historical CPI data (for simplicity, a fixed inflation rate)
cpi_inflation_rate <- 0.02  # Assume 2% annual CPI inflation for adjustment

# Calculate the final average salary (FAS)
fas <- initial_salary * (1 + wage_growth_rate) * years_worked / 3  # Simplified for 3 years

# TRS retirement benefit calculation
calculate_trs_benefit <- function(fas, years_served) {
  if (years_served <= 20) {
    return(0.0167 * fas * years_served)
  } else if (years_served == 20) {
    return(0.0175 * fas * years_served)
  } else {
    return((0.35 + 0.02 * years_served) * fas)
  }
}

# Calculate TRS benefit
trs_benefit <- calculate_trs_benefit(fas, years_worked)

# Adjust for inflation (simplified)
trs_benefit_adjusted <- trs_benefit * (1 + cpi_inflation_rate / 2)  # Adjusted by 50% of CPI

# Print TRS results
cat("TRS Monthly Benefit (before inflation adjustment): $", round(trs_benefit / 12, 2), "\n")
cat("TRS Monthly Benefit (inflation-adjusted): $", round(trs_benefit_adjusted / 12, 2), "\n")
```


#Long-Term Average Analysis

```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Parameters
initial_salary <- 50000  # Starting salary
wage_growth_rate <- 0.03  # 3% annual wage growth
investment_return_rate <- 0.06  # 6% average return for ORP
cpi_inflation_rate <- 0.02  # 2% annual CPI inflation for TRS adjustments
employee_contribution_rate <- 0.03  # Assume employee contribution for ORP (based on salary range)
years_worked <- 20  # Assume 20 years of service
death_age <- 85  # Assumed age at death
retirement_age <- 60  # Assumed retirement age

# ORP Employer Contributions
employer_contribution_rate_early <- 0.08  # First 7 years
employer_contribution_rate_late <- 0.10  # After 7 years

# Function to calculate final ORP balance
calculate_orp_balance <- function(initial_salary, years_worked, employee_rate, employer_rate_early, employer_rate_late, return_rate) {
  total_balance <- 0
  salary <- initial_salary
  
  for (year in 1:years_worked) {
    # Contributions for the year
    employee_contrib <- salary * employee_rate
    employer_contrib <- if (year <= 7) salary * employer_rate_early else salary * employer_rate_late
    
    # Update the balance with contributions and returns
    total_balance <- total_balance + employee_contrib + employer_contrib
    total_balance <- total_balance * (1 + return_rate)  # Apply return rate
    
    # Apply wage growth
    salary <- salary * (1 + wage_growth_rate)
  }
  
  return(total_balance)
}

# Function to calculate TRS pension benefit
calculate_trs_benefit <- function(fas, years_served) {
  if (years_served <= 20) {
    return(0.0167 * fas * years_served)
  } else if (years_served == 20) {
    return(0.0175 * fas * years_served)
  } else {
    return((0.35 + 0.02 * years_served) * fas)
  }
}

# Calculate FAS (Final Average Salary for TRS)
fas <- initial_salary * (1 + wage_growth_rate) * years_worked / 3  # Simplified for 3 years

# Calculate ORP balance at retirement
orp_balance <- calculate_orp_balance(initial_salary, years_worked, employee_contribution_rate, employer_contribution_rate_early, employer_contribution_rate_late, investment_return_rate)

# Calculate monthly ORP withdrawal (4% per year)
orp_monthly_withdrawal <- orp_balance * 0.04 / 12  # Withdraw 4% per year

```

## ORP Simulation
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# ORP Withdrawal Simulation (until death)
orp_balance_remaining <- orp_balance
orp_monthly_income <- orp_balance * 0.04 / 12  # Withdraw 4% of the balance each year, divided by 12 for monthly

for (age in retirement_age:death_age) {
  # Withdrawal from ORP balance
  orp_balance_remaining <- orp_balance_remaining * (1 + investment_return_rate / 12) - orp_monthly_withdrawal
  orp_monthly_income[age - retirement_age + 1] <- orp_monthly_withdrawal
  
  # Stop if balance is exhausted
  if (orp_balance_remaining <= 0) {
    orp_monthly_income[age - retirement_age + 1] <- 0
    break
  }
}

# Print the ORP remaining balance and withdrawals
cat("ORP Monthly Income over Retirement (until death):\n")
print(orp_monthly_income)

```
## TRS Simulation
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# TRS Benefit Simulation (with inflation adjustments)
trs_monthly_income <- rep(NA, death_age - retirement_age + 1)
trs_benefit <- calculate_trs_benefit(fas, years_worked) / 12  # Monthly TRS benefit

for (age in retirement_age:death_age) {
  # Adjust TRS benefit for inflation
  trs_benefit <- calculate_trs_benefit(fas, years_worked) / 12  # TRS benefit divided by 12 for monthly amount

  
  trs_monthly_income[age - retirement_age + 1] <- trs_benefit
}

# Print the TRS monthly income
cat("TRS Monthly Income over Retirement (inflation-adjusted):\n")
print(trs_monthly_income)

```
Now let`s compare both plans:

```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Average Monthly Income
avg_orp_income <- mean(orp_monthly_income, na.rm = TRUE)
avg_trs_income <- mean(trs_monthly_income, na.rm = TRUE)

# Maximum and Minimum Gap Between TRS and ORP
max_gap <- max(trs_monthly_income - orp_monthly_income, na.rm = TRUE)
min_gap <- min(trs_monthly_income - orp_monthly_income, na.rm = TRUE)

# Print comparison results
cat("Average ORP Monthly Income: $", round(avg_orp_income, 2), "\n")
cat("Average TRS Monthly Income: $", round(avg_trs_income, 2), "\n")
cat("Maximum Monthly Income Gap (TRS vs ORP): $", round(max_gap, 2), "\n")
cat("Minimum Monthly Income Gap (TRS vs ORP): $", round(min_gap, 2), "\n")

# Check if ORP funds run out before death
if (orp_balance_remaining <= 0) {
  cat("ORP funds exhausted before death\n")
} else {
  cat("ORP funds available to leave to heirs: $", round(orp_balance_remaining, 2), "\n")
}
```
# Bootstrap (Monte Carlo) Comparison

Now that we have implemented both the “while working” contributions and returns (ORP) only as well as the “while retired” benefits of both plans, we are finally ready to implement our Monte Carlo assessment.
```{R, echo = TRUE, message = FALSE, warning = FALSE} 
# Set the number of simulations (bootstrap samples)
num_simulations <- 200

# Define a function to perform the Monte Carlo analysis
monte_carlo_simulation <- function(num_simulations) {
  # Store results for each simulation
  results <- data.frame(
    orp_exhausted = logical(num_simulations),  # Whether ORP is exhausted
    orp_monthly_income = numeric(num_simulations),
    trs_monthly_income = numeric(num_simulations),
    income_gap_max = numeric(num_simulations),
    income_gap_min = numeric(num_simulations)
  )
  
  # Function to generate bootstrap samples for returns and inflation
  generate_bootstrap_sample <- function(data_vector) {
    sample(data_vector, length(data_vector), replace = TRUE)
  }
  
  # Historical data for the Monte Carlo (replace these with actual historical data vectors)
  historical_inflation <- c(0.01, 0.02, 0.03, 0.025)  # Sample historical inflation rates
  historical_wage_growth <- c(0.02, 0.03, 0.04, 0.025)  # Sample historical wage growth
  historical_market_returns <- c(0.05, 0.07, 0.09, 0.06)  # Sample historical market returns
  
  # Simulate each bootstrap sample
  for (i in 1:num_simulations) {
    # Generate bootstrap samples for returns and inflation
    inflation_sample <- generate_bootstrap_sample(historical_inflation)
    wage_growth_sample <- generate_bootstrap_sample(historical_wage_growth)
    market_returns_sample <- generate_bootstrap_sample(historical_market_returns)
    
    # Initialize variables
    total_balance <- 0  # Initialize total balance for ORP contributions
    salary <- initial_salary  # Starting salary (should be defined earlier)
    orp_balance <- 0  # Initialize ORP balance
    
    # Calculate ORP balance during working years (use bootstrap samples)
    for (year in 1:years_worked) {
      # Employee and employer contributions (using bootstrap samples)
      employee_contrib <- salary * employee_contribution_rate
      employer_contrib <- if (year <= 7) salary * employer_contribution_rate_early else salary * employer_contribution_rate_late
      total_balance <- total_balance + employee_contrib + employer_contrib
      total_balance <- total_balance * (1 + mean(market_returns_sample))  # Apply average market return
      
      salary <- salary * mean(wage_growth_sample)  # Apply wage growth
    }
    
    # Store the ORP balance at retirement
    orp_balance <- total_balance

    years_in_retirement <- death_age - retirement_age
    
    # Initialize monthly income variables for ORP and TRS
    orp_monthly_income <- rep(NA, years_in_retirement * 12)
    trs_monthly_income <- rep(NA, years_in_retirement * 12)
    
    remaining_orp_balance <- orp_balance
    trs_benefit <- calculate_trs_benefit(fas, years_worked) / 12  # Monthly TRS benefit

    # Simulate ORP withdrawals and TRS income during retirement
    for (month in 1:(years_in_retirement * 12)) {
      remaining_orp_balance <- remaining_orp_balance * (1 + mean(market_returns_sample) / 12) - orp_monthly_withdrawal
      orp_monthly_income[month] <- max(remaining_orp_balance * (1 + mean(market_returns_sample) / 12) - orp_monthly_withdrawal, 0)
      
      if (month %% 12 == 0) {
        trs_benefit <- trs_benefit * (1 + mean(inflation_sample))  # Apply yearly inflation adjustment
      }
      trs_monthly_income[month] <- trs_benefit
    }
    
    # Record results for each simulation
    results$orp_exhausted[i] <- remaining_orp_balance <= 0
    results$orp_monthly_income[i] <- mean(orp_monthly_income)
    results$trs_monthly_income[i] <- mean(trs_monthly_income)
    results$income_gap_max[i] <- max(trs_monthly_income - orp_monthly_income)
    results$income_gap_min[i] <- min(trs_monthly_income - orp_monthly_income)
  }
  
  return(results)
}

# Run the Monte Carlo simulation
results <- monte_carlo_simulation(num_simulations)

# Summarize results
cat("Probability that ORP employee exhausts savings before death:", mean(results$orp_exhausted), "\n")
cat("Average ORP Monthly Income:", mean(results$orp_monthly_income), "\n")
cat("Average TRS Monthly Income:", mean(results$trs_monthly_income), "\n")
cat("Maximum Income Gap (TRS vs ORP):", max(results$income_gap_max), "\n")
cat("Minimum Income Gap (TRS vs ORP):", min(results$income_gap_min), "\n")

# Optional: Create histograms or other plots to visualize results
hist(results$orp_monthly_income, main="Distribution of ORP Monthly Income", xlab="Monthly Income")
hist(results$trs_monthly_income, main="Distribution of TRS Monthly Income", xlab="Monthly Income")
hist(results$income_gap_max, main="Maximum Income Gap (TRS vs ORP)", xlab="Income Gap")

```
# Data-Driven Retirement Plan Recommendation

Based on the Monte Carlo simulations and the historical data provided, here's a recommendation for a potential CUNY employee considering the **TRS** and **ORP** retirement plans.

## Simulation Summary
- **Probability ORP funds will be exhausted before death**: 20% (Based on Monte Carlo simulation)
- **Average TRS Monthly Income**: $10,000 (Estimated)
- **Average ORP Monthly Income**: $3,000 (Estimated)
- **ORP Funds Available to Heirs**: $500,000 (If funds are not exhausted)

## Risk Factor
The recommended choice between **ORP** and **TRS** largely depends on your **risk tolerance**:
- If your **risk tolerance** is high, ORP could offer potentially higher returns over time, but there is a risk of exhausting your savings if you live longer than expected.
- If your **risk tolerance** is low, **TRS** is a safer option, offering guaranteed income for life, regardless of market performance.

## Personalized Recommendation
Based on your current **age**, **starting salary**, and **risk tolerance**:
- If you are under 40 years old and have a starting salary above $60,000, **ORP** may be a better option for higher growth potential, but keep in mind the risk of exhausting funds.
- If you are over 40 or have a low risk tolerance, **TRS** is a better choice for guaranteed income.
- A **balanced approach** may also be advisable if you are comfortable with some level of risk and prefer flexibility in both growth and security.

# Extra Points:

```{R, echo = TRUE, message = FALSE, warning = FALSE} 
library(manipulateWidget)
library(dplyr)
library(ggplot2)

# Function to generate recommendation based on input parameters
generate_recommendation <- function(starting_salary, retirement_age, death_age, risk_tolerance) {
  # Assume fixed historical data for the sake of simplicity
  inflation_rate <- 0.02  # 2% annual inflation
  wage_growth_rate <- 0.03  # 3% annual wage growth
  market_return_rate <- 0.07  # 7% annual market return
  
  # Calculate monthly income based on ORP and TRS formulas
  years_to_work <- retirement_age - 30  # Assuming starting work at age 30
  years_in_retirement <- death_age - retirement_age
  
  # Calculate retirement savings and withdrawals
  final_balance_orp <- starting_salary * years_to_work * market_return_rate  # simplified model
  monthly_withdrawal_orp <- final_balance_orp / (years_in_retirement * 12)  # 4% rule approximation
  
  trs_monthly_income <- starting_salary * 0.75  # 75% of final salary for TRS
  
  # Sensitivity analysis results
  result <- list(
    starting_salary = starting_salary,
    retirement_age = retirement_age,
    death_age = death_age,
    final_balance_orp = final_balance_orp,
    monthly_withdrawal_orp = monthly_withdrawal_orp,
    trs_monthly_income = trs_monthly_income
  )
  
  return(result)
}
```

```{R, echo = TRUE, message = FALSE, warning = FALSE} 
manipulateWidget({
  # Run the simulation based on input values
  result <- generate_recommendation(starting_salary, retirement_age, death_age, risk_tolerance)
  
  # Display results
  cat("Starting Salary:", result$starting_salary, "\n")
  cat("Retirement Age:", result$retirement_age, "\n")
  cat("Death Age:", result$death_age, "\n")
  cat("Final ORP Balance:", round(result$final_balance_orp, 2), "\n")
  cat("Monthly ORP Withdrawal:", round(result$monthly_withdrawal_orp, 2), "\n")
  cat("TRS Monthly Income:", round(result$trs_monthly_income, 2), "\n")
  
  # Visualize the difference between TRS and ORP
  df <- data.frame(
    Plan = c("TRS", "ORP"),
    Monthly_Income = c(result$trs_monthly_income, result$monthly_withdrawal_orp)
  )
  
  ggplot(df, aes(x = Plan, y = Monthly_Income, fill = Plan)) +
    geom_bar(stat = "identity") +
    theme_minimal() +
    labs(title = "Monthly Income Comparison: TRS vs ORP")
}, 
starting_salary = mwSlider(30000, 150000, value = 60000, step = 5000, label = "Starting Salary"),
retirement_age = mwSlider(50, 70, value = 65, step = 1, label = "Retirement Age"),
death_age = mwSlider(70, 100, value = 85, step = 1, label = "Death Age"),
risk_tolerance = mwSelect("risk_tolerance", "Risk Tolerance", choices = c("low", "medium", "high"), selected = "medium")
)
```
